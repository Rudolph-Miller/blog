<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common Lisp on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/tags/common-lisp/</link>
    <description>Recent content in Common Lisp on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; Copyright 2015 Rudolph Miller</copyright>
    <lastBuildDate>Thu, 29 Oct 2015 00:34:45 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/tags/common-lisp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About Lisp</title>
      <link>http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</link>
      <pubDate>Thu, 29 Oct 2015 00:34:45 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</guid>
      <description>

&lt;p&gt;name: lisp
layout: true&lt;/p&gt;

&lt;h2 id=&#34;class-center-middle-lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;class: center, middle, lisp&lt;/h2&gt;

&lt;h1 id=&#34;tech-talk-4:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Tech Talk #4&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;rudolph-miller:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;@Rudolph-Miller&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/favicon.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( &lt;a href=&#34;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&#34;&gt;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&lt;/a&gt; )&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;common-lisper:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Common Lisper&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp??&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/search.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;ｌｉｓｐ-は超至近距離アイドル:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「ＬＩＳＰ」は超至近距離アイドル&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;キミとセツゾク-が合言葉:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「キミとセツゾク」が合言葉&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-idle.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;toc_7:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;???&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-alien.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- 1958年
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- John McCarthy
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Dynamic and strong typing
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Multiparadigm
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- S-expression and Polish Notation
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Syntactic coherence
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Code is made up of first-class object
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- The whole language is always available.
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;1958:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;1958&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;class: bottom, center&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/programming-languages.png )&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h3 id=&#34;only-fortran-is-older:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;only FORTRAN is older&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;john-mccarthy:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;John McCarthy&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;class: middle, center
layout: true&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;the-father-of-ai:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;the father of AI&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;invented-garbage-collection:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;invented Garbage Collection&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false
template: lisp&lt;/p&gt;

&lt;h1 id=&#34;dynamic-and-strong-typing:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Dynamic and strong typing&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing1.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing2.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;multiparadigm:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Multiparadigm&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;imperative:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Imperative&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;object-oriented:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Object-oriented&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;functional:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Functional&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;s-expression-and-polish-notation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression and Polish Notation&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-keyboard.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;lots-of-irritating-superfluous-parentheses:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lots of Irritating Superfluous Parentheses&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;s-expression-is-ast:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression is AST.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bnf&#34;&gt;&amp;lt;S-exp&amp;gt; ::= &amp;lt;List&amp;gt; | &amp;lt;Atom&amp;gt; 
&amp;lt;List&amp;gt;  ::= (&amp;lt;S-exp&amp;gt;*) 
&amp;lt;Atom&amp;gt;  ::= &amp;lt;Symbol&amp;gt; | &amp;lt;Number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun add1 (num1 num2)
  (+ num1 num2))

(add1 (add1 1 2) 3)
;; =&amp;gt; 6

(reduce #&#39;add1 (list 1 2 3))
;; =&amp;gt; 6

(defun add2 (&amp;amp;rest args)
  (reduce #&#39;add args))

(add2 1 2 3)
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;syntactic-coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Syntactic coherence&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(if (or false true)
  (print true)
  (print false))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;code-is-made-up-of-first-class-object:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Code is made up of first-class object&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Code
(defun add1 (num1 num2)
  (+ num1 num2))

;; Data
(list &#39;defun &#39;add1 (list &#39;num1 num2)
  (list &#39;+ &#39;num1 &#39;num2))

&#39;(defun add1 (num1 num2)
  (+ num1 num2))

;; REPL
(eval
 &#39;(defun add1 (num1 num2)
    (+ num1 num2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;the-whole-language-is-always-available:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;The whole language is always available.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;you-can-compile-or-run-code-while-reading-read-or-run-code-while-compiling-and-read-or-compile-code-at-runtime:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.&lt;/h2&gt;

&lt;p&gt;quated from &amp;ldquo;&lt;a href=&#34;http://www.paulgraham.com/diff.html&#34;&gt;What Made Lisp Different&lt;/a&gt;&amp;rdquo; by Paul Graham&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while reading
(defun char-code-a-p (int)
  (= int #.(char-code #\a)))

(defun char-code-a-p (int)
  (= int 97))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while compiling
(defun include-p-1 (string char)
  (when (find char string) t))

(defmacro include-p-2 (string char)
  (let ((hash (make-hash-table)))
    (loop for c across string
      (setf (gethash c hash) t))
    `(gethash ,char ,hash)))

(defun time-of-include-p-1 ()
  (time (loop repeat 10000000 do (include-p-1 &amp;quot;sample&amp;quot; #\a))))

(defun time-of-include-p-2 ()
  (time (loop repeat 10000000 do (include-p-2 &amp;quot;sample&amp;quot; #\a))))

(time-of-include-p-1)
;; 0.495 seconds of real time
;; 1,336,787,055 processor cycles

(time-of-include-p-2)
;; 0.003 seconds of real time
;; 8,880,960 processor cycles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; compile code at runtime
(defun define-add-some (some)
  (eval
   `(defun add-some (int)
      (+ int ,some))))

(define-add-some 10)
;; add-some

(add-some 2)
;; =&amp;gt; 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;finally:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Finally,&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;why-s-expression:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Why S-expression??&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;because:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Because,&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;simple-and-coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Simple and Coherence.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;no-translation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Translation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;no-limitation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Limitation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;simple-and-coherence-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Simple and Coherence.&lt;/h1&gt;

&lt;h1 id=&#34;no-translation-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Translation.&lt;/h1&gt;

&lt;h1 id=&#34;no-limitation-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Limitation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/the_end.jpg )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integral-Rest</title>
      <link>http://blog.rudolph-miller.com/2015/08/21/integral-rest/</link>
      <pubDate>Fri, 21 Aug 2015 11:20:54 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/21/integral-rest/</guid>
      <description>

&lt;p&gt;稚拙のIntegral-Restを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#integral-rest:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;Integral-Rest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;integral-rest:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;Integral-Rest&lt;/h2&gt;

&lt;p&gt;Integral-RestはIntegralのDAO tableからREST APIを簡単に作るLibrary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defpackage sample
  (:use :cl
        :integral
        :integral-rest))
(in-package :sample)

(connect-toplevel :sqlite3 :database-name &amp;quot;:memory:&amp;quot;)

(defclass user ()
  ((id :initarg :id
       :type integer
       :primary-key t
       :accessor user-id)
   (name :initarg :name
         :type string
         :accessor user-name))
  (:metaclass integral:&amp;lt;dao-table-class&amp;gt;))

(ensure-table-exists (find-class &#39;user))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:metaclass&lt;/code&gt;として&lt;code&gt;integral:&amp;lt;dao-table-class&amp;gt;&lt;/code&gt;を指定し、&lt;code&gt;user&lt;/code&gt;を&lt;code&gt;defclass&lt;/code&gt;する.&lt;br /&gt;
後は&lt;code&gt;(set-rest-app)&lt;/code&gt;をすると&lt;code&gt;*rest-app*&lt;/code&gt;がREST API appに束縛されので、&lt;br /&gt;
&lt;code&gt;*rest-app*&lt;/code&gt;は&lt;code&gt;ningle:&amp;lt;app&amp;gt;&lt;/code&gt;の&lt;code&gt;instance&lt;/code&gt;なので、これをそのまま&lt;code&gt;clack:clackup&lt;/code&gt;できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(set-rest-app)

(clack:clackup *rest-app*)
;; =&amp;gt; Listening on localhost:5000.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでREST API ServerがPort 5000で立ち上がる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;)
;; =&amp;gt; #&amp;lt;USER id: 1&amp;gt;

(dex:get &amp;quot;http://localhost:5000/api/users&amp;quot;)
;; =&amp;gt; &amp;quot;[{\&amp;quot;id\&amp;quot;:1,\&amp;quot;name\&amp;quot;:\&amp;quot;Rudolph\&amp;quot;}]&amp;quot;

(dex:get &amp;quot;http://localhost:5000/api/users/1&amp;quot;)
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;name\&amp;quot;:\&amp;quot;Rudolph\&amp;quot;}&amp;quot;

(dex:post &amp;quot;http://localhost:5000/api/users&amp;quot; :contest &#39;((&amp;quot;name&amp;quot; . &amp;quot;Miller&amp;quot;)))
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Miller\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; #&amp;lt;USER id: 2 name: &amp;quot;Miller&amp;quot;&amp;gt;

(dex:put &amp;quot;http://localhost:5000/api/users/2&amp;quot; :contest &#39;((&amp;quot;name&amp;quot; . &amp;quot;Tom&amp;quot;)))
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Tom\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; #&amp;lt;USER id: 2 name: &amp;quot;Tom&amp;quot;&amp;gt;

(dex:delete &amp;quot;http://localhost:5000/api/users/2&amp;quot;)
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Tom\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; NIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっとしたAPI Serverだと&lt;code&gt;app.lisp&lt;/code&gt;に十数行で書ける.&lt;/p&gt;

&lt;h2 id=&#34;see-also:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/integral-rest&#34;&gt;Integral-Rest GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/integral-rest/overview.html&#34;&gt;Integral-Rest Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker image for Clack Application</title>
      <link>http://blog.rudolph-miller.com/2015/08/20/docker-image-for-clack-application/</link>
      <pubDate>Thu, 20 Aug 2015 10:10:48 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/20/docker-image-for-clack-application/</guid>
      <description>

&lt;p&gt;Clack Application用のDocker base imageを作成したので紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;How to use.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-to-use:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;How to use.&lt;/h2&gt;

&lt;p&gt;簡単な&lt;code&gt;app.lisp&lt;/code&gt;を用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defvar *app*
  (lambda (env)
    (declare (ignore env))
    &#39;(200 (:content-type &amp;quot;text/plain&amp;quot;) (&amp;quot;Hello, World&amp;quot;))))

(lack:builder
 :session
 *app*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt;として&lt;code&gt;rudolphm/clack&lt;/code&gt;を指定してDockerfileを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FROM rudolphm/clack:latest
MAINTAINER Rudolph Miller


ADD app.lisp /usr/local/src/clack-test/

CMD clackup --port 5000 --server woo /usr/local/src/clack-test/app.lisp
EXPOSE 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfileでやっているのは上の&lt;code&gt;app.lisp&lt;/code&gt;を配置して、
&lt;code&gt;ENTRYPOINT&lt;/code&gt;として&lt;code&gt;clackup --port 5000 --server woo app.lisp&lt;/code&gt;を指定しているだけだ.
後はDockerで&lt;code&gt;build&lt;/code&gt;して&lt;code&gt;run&lt;/code&gt;するとClack Applicationが動く.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t clack-sample ./
docker run -d -p 5000:5000 clack-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common Lispもようやくここまで来たかって所感.&lt;/p&gt;

&lt;h2 id=&#34;see-also:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/dockerfile-clack&#34;&gt;Dockerfile-Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/woo&#34;&gt;Woo GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snmsts/roswell&#34;&gt;Roswell GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Clipper</title>
      <link>http://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</link>
      <pubDate>Mon, 10 Aug 2015 13:53:10 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</guid>
      <description>

&lt;p&gt;稚作のClipperを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/h2&gt;

&lt;p&gt;例えばMicro Blogサービスを作るとしよう.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.models
  (:use :cl
        :integral))
(in-package :sample.models)

(defclass user ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :reader user-id)
   (name :col-type (:varchar 255)
         :initarg :name
         :accessor user-name))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defclass post ()
  ((id :type (:integer 11)
       :primary-key t
       :auto-increment t
       :not-null t
       :reader post-id)
   (content :type string
            :col-type (:varchar 255)
            :initarg :content
            :accessor post-content)
   (user-id :type integer
            :initarg :user-id
            :accessor post-user-id))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defun user-posts (user)
  (check-type user user)
  (select-dao &#39;post (where (:= :user_id (user-id user)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じに&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt;を使用しModelとして&lt;code&gt;user&lt;/code&gt;と&lt;code&gt;post&lt;/code&gt;を定義する.
とりあえずこれで&lt;code&gt;user&lt;/code&gt;に紐づく&lt;code&gt;post&lt;/code&gt;の投稿と&lt;code&gt;post&lt;/code&gt;の一覧機能ができる.&lt;/p&gt;

&lt;p&gt;次に&lt;code&gt;user&lt;/code&gt;が名前の表示だけじゃ物足りなく感じ、Iconを設定できるようにしてみる.
Iconを設定するためにはImage Filesを保存、管理しなくてはならない.&lt;/p&gt;

&lt;p&gt;開発を進めて行く内に、
「開発時はBrowserで確認するため&lt;code&gt;static/images/icons&lt;/code&gt;に保存し、
test時は開発環境を壊したくないため&lt;code&gt;t/images/icons&lt;/code&gt;に保存したい.
その上、productionではS3のBucketに保存したい.」
となるのは当然だと思う.
(少なくとも僕はそれが必要になった.)&lt;/p&gt;

&lt;p&gt;これらの切り替えを簡単にするのが&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;Clipper&lt;/a&gt;だ.&lt;/p&gt;

&lt;p&gt;とりあえずIconのModelとして&lt;code&gt;icon&lt;/code&gt;を用意して、&lt;code&gt;user&lt;/code&gt;と紐づける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defclass icon ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :initarg :id)
   (user-id :type integer)
   (image-file-name :col-type (:varchar 255)
                    :initarg :image-file-name)
   (image-content-type :col-type (:varchar 255)
                       :initarg :image-content-type)
   (image-file-size :col-type (:integer 11)
                    :initarg :image-file-size)
   (url :type string
        :initarg :url))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))


(defun user-icon (user)
  (check-type user user)
  (car
   (select-dao &#39;icon
               (where (:= :user_id (user-id user)))
               (limit 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数でのconfigの切り替えに&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt;を使用し、
&lt;code&gt;clipper:setup-clipper&lt;/code&gt;の引数をenvごとに管理する.
又、切り替えのための&lt;code&gt;sample.models::setup-clipper&lt;/code&gt;も定義しておく.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.config
  (:use :cl)
  (:import-from :envy
                :config-env-var
                :defconfig))
(in-package :sample.config)

(setf (config-env-var) &amp;quot;APP_ENV&amp;quot;)

(defconfig |development|
    `(:clipper (:store-type :local
                :image-directory #P&amp;quot;/home/user/app/images/icons&amp;quot;
                :relative #P&amp;quot;/home/user/app/&amp;quot;
                :prefix &amp;quot;http://localhost:3000/&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defconfig |production|
    `(:clipper (:store-type :s3
                :aws-access-key (uiop:getenv &amp;quot;AWS_ACCESS_KEY&amp;quot;)
                :aws-secret-key (uiop:getenv &amp;quot;AWS_SECRET_KEY&amp;quot;)
                :s3-endpoint &amp;quot;s3-ap-northeast-1.amazonaws.com&amp;quot;
                :s3-bucket-name &amp;quot;sample-app&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defun config ()
  (envy:config #.(package-name *package*)))


(in-package :sample.models)

(defun setup-clipper ()
  (apply #&#39;clipper:setup-clipper
         (append (list :clipper-class (find-class &#39;icon))
                 (getf (sample.config::config) :clipper))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると環境変数&lt;code&gt;APP_ENV&lt;/code&gt;によってImage Filesの保存先を切り替えられる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(in-package :sample.models)

(ql:quickload :osicat)

(defvar *url* &amp;quot;http://www.lisperati.com/lisplogo_alien_256.png&amp;quot;)

;; APP_ENV=development
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;development&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;http://localhost:3000/images/icons/1/lisplogo_alien_256.png&amp;quot;


;; APP_ENV=production
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;production&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;John&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;https://s3-ap-northeast-1.amazonaws.com/sample-app/2/lisplogo_alien_256.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;便利.&lt;/p&gt;

&lt;h2 id=&#34;see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/clipper/overview.html&#34;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/clipper/&#34;&gt;Quickdocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt; - An object relational mapper for Common Lisp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt; - Configuration switcher by an environment variable inspired by Config::ENV.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xach.com/lisp/zs3/&#34;&gt;ZS3&lt;/a&gt; - Amazon S3 and CloudFront from Common Lisp.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>