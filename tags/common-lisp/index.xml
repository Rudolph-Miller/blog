<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common Lisp on (rudolph-miller)</title>
    <link>https://blog.rudolph-miller.com/tags/common-lisp/</link>
    <description>Recent content in Common Lisp on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2015 Rudolph Miller</copyright>
    <lastBuildDate>Fri, 26 Feb 2016 20:30:37 +0900</lastBuildDate>
    <atom:link href="https://blog.rudolph-miller.com/tags/common-lisp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deep Learning in Common Lisp</title>
      <link>https://blog.rudolph-miller.com/2016/02/26/deep-learning-in-common-lisp/</link>
      <pubDate>Fri, 26 Feb 2016 20:30:37 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/02/26/deep-learning-in-common-lisp/</guid>
      <description>

&lt;p&gt;Deep Learning をCommon Lispで実装してみた.&lt;/p&gt;

&lt;p&gt;そろそろ Deep Learning の実装ぐらい教養かなと思ったので、
&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B018K6C99A/ref=as_li_tf_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B018K6C99A&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;深層学習&lt;/a&gt;
という本を読みながら実装してみた.&lt;/p&gt;

&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B018K6C99A/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B018K6C99A&amp;linkCode=as2&amp;tag=rudolph-miller-22&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B018K6C99A&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=rudolph-miller-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=rudolph-miller-22&amp;l=as2&amp;o=9&amp;a=B018K6C99A&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回実装したのは順伝播型ニューラルネットワーク (Feed Forward Neural Network) で、
テストしたのは &lt;code&gt;Fisher&#39;s iris flower data set&lt;/code&gt; (統計の有名なデータセット) の多クラス分類 (Multi-class classification) .&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/cldl&#34;&gt;CLDL&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#deep-neural-network:99621a27901250e81c3c36481758f611&#34;&gt;Deep Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math:99621a27901250e81c3c36481758f611&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#impl:99621a27901250e81c3c36481758f611&#34;&gt;Impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test:99621a27901250e81c3c36481758f611&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#todo:99621a27901250e81c3c36481758f611&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:99621a27901250e81c3c36481758f611&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;deep-neural-network:99621a27901250e81c3c36481758f611&#34;&gt;Deep Neural Network&lt;/h1&gt;

&lt;p&gt;Deep Learning は Deep Neural Network (Multi-layer perceptron, 多層構造のNeural Network) の機械学習の事.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160224/dnn.png&#34; alt=&#34;/20160224/dnn.png&#34;&gt;


&lt;p&gt;Input Layer (入力層)、多層の Hidden Layer (中間層)、Output Layer (出力層) で構成され、
それぞれの層は単数または複数のUnitで構成される.&lt;/p&gt;

&lt;p&gt;順伝播型ニューラルネットワークではすべてのUnitがその前後の層のすべてのUnitと結合している.&lt;/p&gt;

&lt;p&gt;学習というのは、ネットワークに与えたInputからのOutputを正解に近づけるようにParameterを調整すること.&lt;/p&gt;

&lt;h1 id=&#34;math:99621a27901250e81c3c36481758f611&#34;&gt;Math&lt;/h1&gt;

&lt;p&gt;とりあえず数式として俯瞰する.&lt;/p&gt;

&lt;h2 id=&#34;activation-function:99621a27901250e81c3c36481758f611&#34;&gt;Activation function&lt;/h2&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160224/math_1.png&#34; alt=&#34;/20160224/math_1.png&#34;&gt;


&lt;p&gt;連続した$p-1$層と$p$層を考える.&lt;/p&gt;

&lt;p&gt;$u$はUnitの入力、$z$はUnitの出力、$w$はUnit間のConnectionの重みを表す.&lt;/p&gt;

&lt;p&gt;これらの関係は&lt;/p&gt;

&lt;p&gt;$$
u_j^{(p)} = \sum _{i=0}^{I} w _{ji} z _{i}^{(p-1)} + b_j^{(p)} \tag{1}
$$&lt;/p&gt;

&lt;p&gt;$$
z_j^{(p)} = f(u_j^{(p)}) \tag{2}
$$&lt;/p&gt;

&lt;p&gt;のようにあらわせる.&lt;/p&gt;

&lt;p&gt;(1) における $b$ はBiasで、
UnitのInputは前層のOutputにConnectionの重みを掛けたものの和にBiasを足したものである.&lt;/p&gt;

&lt;p&gt;ここで&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160224/math_2.png&#34; alt=&#34;/20160224/math_2.png&#34;&gt;


&lt;p&gt;のようにBias Unitという特別なUnit (Outputが常に $1$) を導入して、&lt;/p&gt;

&lt;p&gt;$$
b_j^{(p)} = w _{j0} z _{0}^{(p-1)} \tag{3}
$$&lt;/p&gt;

&lt;p&gt;のように $b$ をあらわすと (1) は&lt;/p&gt;

&lt;p&gt;$$
u_j^{(p)} = \sum _{i=0}^{I} w _{ji} z _{i}^{(p-1)} \tag{4}
$$&lt;/p&gt;

&lt;p&gt;のように書ける.&lt;/p&gt;

&lt;p&gt;(2) における $f$ は &lt;strong&gt;Activation function (活性化関数)&lt;/strong&gt; と呼ばれる.
Activation functionはUnitへの入力から出力を計算する関数で
通常は単調増加する日線形関数を使用し、
一般にHidden LayerとOutput Layerで別の関数を使用する.&lt;/p&gt;

&lt;p&gt;今回はHidden Layerで&lt;/p&gt;

&lt;p&gt;$$
f(u) = \max(u, 0) \tag{5}
$$&lt;/p&gt;

&lt;p&gt;のRectified Linear Unit (正規化線形関数, ReLU, ランプ関数)を使用し、Output Layerで&lt;/p&gt;

&lt;p&gt;$$
f(u_k) = \frac{e^{u_k}}{\sum _{j=1}^{K} e^{u_j}} \tag{6}
$$&lt;/p&gt;

&lt;p&gt;のSoftmax functionを使用する. ( $K$ はOutput LayerのUnit数、 $k$ はOutput LayerのUnit番号.)&lt;/p&gt;

&lt;h2 id=&#34;error-function:99621a27901250e81c3c36481758f611&#34;&gt;Error function&lt;/h2&gt;

&lt;p&gt;順伝播型ニューラルネットワークはParameter $w$ を変えるとOutputが変化し、
良い $w$ を選ぶとネットワーク全体として望みの関数として振る舞うようになる.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Traiting data&lt;/strong&gt;を用いて $w$ を調整することを学習という.&lt;/p&gt;

&lt;p&gt;このときそれぞれのTraining sampleでのOutputと目標値の近さをあらわす関数を
&lt;strong&gt;Error function (誤差関数)&lt;/strong&gt; と呼ぶ&lt;/p&gt;

&lt;p&gt;Error functionはHidden LayerのActivation functionとセットで設計され、
それらは問題の種類ごとに異なる.&lt;/p&gt;

&lt;p&gt;今回は Multi-class classification なのでActivation functionにSoftmax functionを使用し、
Error functionには&lt;/p&gt;

&lt;p&gt;$$
E(W) = - \sum _{n=1}^{N} \sum _{k=1}^{K} d _{nk} \log y _{nk} \tag{7}
$$&lt;/p&gt;

&lt;p&gt;を使用する.
ここで $W$ はネットワークの全体の重みをまとめた行列で (3) によりBiasもここに入る、
$n$ はTrainig dataにおけるTraining sampleの番号、
$K$ はOutput LayerのUnit数、
$k$ はOutput LayerのUnit番号、
$d _{nk}$ は n 番目のTraining sampleの k 番目のUnitの目標値、
$y _{nk}$ は n 番目のTraining sampleの k 番目のUnitのOutput.&lt;/p&gt;

&lt;p&gt;今回はMulti-class classificationなので、 $d _{nk}$ は&lt;/p&gt;

&lt;p&gt;$$
\sum _{k=1}^{K} d _{k} = 1 \tag{8}
$$&lt;/p&gt;

&lt;p&gt;で、正解のclassに対応する一つのUnitのOutputが 1 で、残りのUnitのOutputが 0 となる.&lt;/p&gt;

&lt;h2 id=&#34;stochastic-gradient-descent:99621a27901250e81c3c36481758f611&#34;&gt;Stochastic Gradient Descent&lt;/h2&gt;

&lt;p&gt;ネットワークの目的はError functionの値を小さくすることだが、
Error functionは一般に凸関数ではなく、大域的な最小解を直接得ることは通常不可能.&lt;/p&gt;

&lt;p&gt;代わりに局所的な極小点を求める.
一般に $E(W)$ の極小点は複数存在するため、得た極小点が大域的な最小解となることはほぼ無いが、
それでもその極小点が十分小さい値ならば目的に貢献し得る.&lt;/p&gt;

&lt;p&gt;局所的な極小点の探索方法はいくつかあるが、最も簡単なのが &lt;strong&gt;Gradient Descent Method (勾配降下法)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Gradientというのは $W$ の成分数を $M$ として、&lt;/p&gt;

&lt;p&gt;$$
\nabla E = \frac{\partial W}{\partial E} = [\frac{\partial E}{\partial w_1} &amp;hellip; \frac{\partial E}{\partial w _M}]^{T} \tag{9}
$$&lt;/p&gt;

&lt;p&gt;というVectorで、
Gradient Descent Method は $W$ を $- \nabla E$ 方向に動かし、
これをなんども繰り返すことで局所的な極小点を探索する.&lt;/p&gt;

&lt;p&gt;現在の重みを $W^{(t)}$ 、動かした後の重みを $W^{(t+1)}$ とすると&lt;/p&gt;

&lt;p&gt;$$
W^{(t+1)} = W^{(t)} - \epsilon \nabla E \tag{10}
$$&lt;/p&gt;

&lt;p&gt;とあらわされる.&lt;/p&gt;

&lt;p&gt;このときの $\epsilon$ を &lt;strong&gt;Learning rate (学習係数)&lt;/strong&gt; と呼び、
一回の更新での $W$ の更新量を決める定数.
大きいと極小点に収束しない可能性があり、小さいと収束までの反復回数が多くなる.&lt;/p&gt;

&lt;p&gt;Learing rateの決定にも手法があるが、今回はとりあえず定数で指定することにする.&lt;/p&gt;

&lt;p&gt;Gradient Descent Method はTraining data全体に対してError functionの値を最小化する.&lt;/p&gt;

&lt;p&gt;$$
E(W) = \sum _{n=1}^{N} E_n(w) \tag{11}
$$&lt;/p&gt;

&lt;p&gt;これに対してTraining dataの一部を使って $W$ の更新を行う (さらに更新ごとにTraining samplesを取り替える) 手法を
&lt;strong&gt;Stochastic Gradient Descent (確率的勾配降下法)&lt;/strong&gt; と呼ぶ.&lt;/p&gt;

&lt;p&gt;Stochastic Gradient Descent を使うと、 Gradient Descent Method に潜在する
&lt;em&gt;相対的に小さくない局所的な極小解にはまるリスク&lt;/em&gt; を小さくできる.&lt;/p&gt;

&lt;h2 id=&#34;back-propagation:99621a27901250e81c3c36481758f611&#34;&gt;Back propagation&lt;/h2&gt;

&lt;p&gt;Gradient Descent Method を実行するには&lt;/p&gt;

&lt;p&gt;$$
\nabla E = \frac{\partial W}{\partial E} = [\frac{\partial E}{\partial w_1} &amp;hellip; \frac{\partial E}{\partial w _M}]^{T} \tag{9}
$$&lt;/p&gt;

&lt;p&gt;を計算する必要があるが、微分の連鎖規則のため、Output Layerから遠いLayerになると微分計算が困難になる.&lt;/p&gt;

&lt;p&gt;これを解決するのが &lt;strong&gt;Back propagation (誤差逆伝播法)&lt;/strong&gt;.
Back propagation はOutput LayerからInput Layerに向かって、連鎖的に勾配を計算していく方法.&lt;/p&gt;

&lt;p&gt;n 番目のTraining sampleのError functionの値 $E_n$ をLayer $p$ におけるParameter $w _{ji}^{(p)}$ に関して微分すると、
$w _{ji}^{(p)}$ は&lt;/p&gt;

&lt;p&gt;$$
u_j^{(p)} = \sum _{i=0}^{I} w _{ji} z _{i}^{(p-1)} \tag{4}
$$&lt;/p&gt;

&lt;p&gt;により $u_j^{(p)}$ の中にのみ存在するので、&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial E_n}{\partial w _{ji}^{(p)}} = \frac{\partial E_n}{\partial u _{j}^{(p)}} \frac{\partial u _{j}^{(p)}}{\partial w _{ji}^{(p)}} \tag{12}
$$&lt;/p&gt;

&lt;p&gt;となる.&lt;/p&gt;

&lt;p&gt;$u_j^{(p)}$ の変動が $E_n$ に与える影響は、
このUnit $j$からのOutput $z_j^{(p)}$ を通じて、$p+1$ LayerのOutputを変化させることによってのみ生じるので、
(12) の右辺第1項は&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial E_n}{\partial u _{j}^{(p)}} = \sum _k \frac{\partial E_n}{\partial u_k^{(p+1)}} \frac{\partial u_k^{(p+1)}}{\partial u_j^{(p)}} \tag{13}
$$&lt;/p&gt;

&lt;p&gt;となる.&lt;/p&gt;

&lt;p&gt;左辺の $\frac{\partial E_n}{\partial u _{j}^{(p)}}$ と右辺の $\frac{\partial E_n}{\partial u _{j}^{(p+1)}}$ に注目して、&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{p} = \frac{\partial E_n}{\partial u _{j}^{(p)}} \tag{14}
$$&lt;/p&gt;

&lt;p&gt;とおく.&lt;/p&gt;

&lt;p&gt;$$
u_k^{(p+1)} = \sum _j w _{kj}^{(p+1)} z_j^{(p)} = \sum _j w _{kj}^{(p+1)} f(u_j^{(p)}) \tag{15}
$$&lt;/p&gt;

&lt;p&gt;より、&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial u_k^{(p+1)}}{\partial u_j^{(p)}} = w _{kj}^{(p+1)} f&amp;rsquo;(u_j^{(p)}) \tag{16}
$$&lt;/p&gt;

&lt;p&gt;となるので、 (13) は&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{(p)} = \sum _k \delta _j^{(p+1)} (w _{kj}^{(p+1)} f&amp;rsquo;(u_j^{(p)})) \tag{17}
$$&lt;/p&gt;

&lt;p&gt;となる. これは $\delta _j^{(p)}$ が $\delta _k^{(p+1)} (k = 1, 2, &amp;hellip;)$ から計算できることを意味する.&lt;/p&gt;

&lt;p&gt;(12) の右辺第1項はこのように $\delta$ を計算することで得られる.
第2項は $u_j^{(p)} = \sum _i w _{ji}^{(p)} z_i^{(p-1)}$ から&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial u _{j}^{(p)}}{\partial w _{ji}^{(p)}} = z_i^{(p-1)} \tag{18}
$$&lt;/p&gt;

&lt;p&gt;が得られるので、目的の微分は&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial E_n}{\partial w _{ji}^{(p)}} = \delta _j^{(p)} z_i{(p-1)} \tag{19}
$$&lt;/p&gt;

&lt;p&gt;となり、 $p-1$ Layerと $p$ LayerをつなぐConnectionの重み $w _{ji}^{(p)}$ に関する微分は、
Unit $j$ に関する $\delta _j^{(p)}$ と Unit $i$ のOutput $z_i^{(p-1)}$ のただの積で与えられる.
$\delta$ はOutput LayerからInput Layerに順に (17) を適用すれば求められる.
Output Layerでの $\delta$ は&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{(P)} = \frac{\partial E_n}{\partial u_j^{(P)}} \tag{20}
$$&lt;/p&gt;

&lt;p&gt;で計算できる.&lt;/p&gt;

&lt;p&gt;今回はOutput LayerのError functionは (7) を使用し
( n 番目のTrainig sampleに関しては $-\sum _{k=1}^{K} d _{nk} \log y _{nk}$)、
Activation functionにSoftmax functionを使用しているので、&lt;/p&gt;

&lt;p&gt;$$
E_n = - \sum _k d_k \log y_k = - \sum _k d_k log (\frac{e^{u_k^{(P)}}}{\sum _i e^{u_i^{(P)}}}) \tag{21}
$$&lt;/p&gt;

&lt;p&gt;となり、&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{(P)} = - \sum _k d_k \frac{1}{y_k} \frac{\partial y_k}{\partial u_j^{(P)}}
= -d_j(1-y_j) - \sum _{k \neq j} d_k(-y_j)
= \sum _k d_k (y_j - d_j)
\tag{22}
$$&lt;/p&gt;

&lt;p&gt;で $\delta$ が求められる.&lt;/p&gt;

&lt;p&gt;(20) ( 今回は具体的には (22) ) と (17) により任意のLayerの $\delta$ が求められるので、 (19) により任意のConnectionの重み $w$ を更新できる.&lt;/p&gt;

&lt;h1 id=&#34;impl:99621a27901250e81c3c36481758f611&#34;&gt;Impl&lt;/h1&gt;

&lt;p&gt;順伝播型ニューラルネットワークのcoreなところを追ったところで実装.
数式の流れをちゃんと理解できてたら大したこと無い.&lt;/p&gt;

&lt;p&gt;※以下のCodeはそのままで動くようには書いてない.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160226/impl_1.png&#34; alt=&#34;/20160226/impl_1.png&#34;&gt;


&lt;p&gt;上の図を &lt;code&gt;CLOS&lt;/code&gt; に落とし込む.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defclass unit ()
  ((input-value ...)
   (output-value ...)
   (left-connections ...)
   (right-connections ...)
   (delta ...)))

(defclass bias-unit (unit) ())

(defclass connection ()
  ((left-unit ...)
   (right-unit ...)
   (weight ...)
   (weight-diff ...)))

(defclass layer ()
  ((bias-unit ...)
   (units ...)))

(defclass input-layer (layer) ())

(defclass hidden-layer (layer)
  ((bias-unit :initform (make-instance &#39;bias-unit))))

(defclass output-layer (layer)
  ((bias-unit :initform (make-instance &#39;bias-unit))))

(defclass dnn ()
  ((layers ...)
   (connections ...)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input Layer以外のLayerのUnitのInputは (4) なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun calculate-unit-input-value (unit)
  (reduce #&#39;+
          (mapcar #&#39;(lambda (connection)
                      (* (unit-output-value (connection-left-unit connection))
                         (connection-weight connection)))
                  (unit-left-connections unit))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、OutputはBias Unit (Outputが1) 以外は (2) なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defgeneric calculate-unit-output-value (unit)
  (:method ((unit unit))
    (funcall activatinon-function (unit-input-value unit)))
  (:method ((unit bias-unit))
    (declare (ignore unit))
    1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように計算できる.&lt;/p&gt;

&lt;p&gt;これをInput LayerからOutput Layerまで繰り返してネットワークの出力を得る.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun predict (dnn input)
  (dolist (layer (dnn-layers dnn))
    (etypecase layer
      (input-layer
       (map nil
            #&#39;(lambda (input-unit value)
                (setf (unit-input-value input-unit) value
                      (unit-output-value input-unit) value))
            (layer-units layer)
            input))
      ((or hidden-layer output-layer)
       (let ((units (layer-units layer)))
         (dolist (unit units)
           (let ((input-value (calculate-unit-output-value unit)))
             (setf (unit-input-value unit) input-value
                   (unit-output-value unit)
                   (calculate-unit-output-value unit))))))))
  (mapcar #&#39;unit-output-value
          (layer-units (output-layer (dnn-layers dnn)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにError functionを適用する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun test (dnn data-set)
  (/ (reduce #&#39;+
             (mapcar #&#39;(lambda (data)
                         (funcall error-function
                                  (predict dnn (data-input data))
                                  (data-expected data)))
                     data-set))
     (length data-set)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは (20) と (17) で $\delta$ を計算し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defgeneric calculate-delta (layer unit)
  (:method ((layer output-layer) unit)
    ...)
  (:method ((layer hidden-layer) unit)
    ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back propagationで &lt;code&gt;connection&lt;/code&gt; の &lt;code&gt;weight&lt;/code&gt; を更新すれば学習ができる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun train (dnn data-set)
  (dolist (data data-set)
    (predict dnn (data-input data))
    (dolist (layer (reverse (cdr (dnn-layers dnn))))
      (dolist (unit (layer-units layer))
        (let ((delta (calculate-delta layer unit)))
          (setf (unit-delta unit) delta)
          (dolist (connection (unit-left-connections unit))
            (incf (connection-weight-diff connection)
                  (* delta
                     (unit-output-value
                      (connection-left-unit connection))))))))
    (dolist (outer-connections (dnn-connections dnn))
      (dolist (inner-connectios outer-connections)
        (dolist (connection inner-connectios)
          (decf (connection-weight connection)
                (* (dnn-learning-coefficient dnn)
                   (connection-weight-diff connection)))
          (setf (connection-weight-diff connection) 0))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで順伝播型ニューラルネットワークが実装できる.&lt;br /&gt;
(実際は &lt;code&gt;connection&lt;/code&gt; の &lt;code&gt;weight&lt;/code&gt; を平均0で分散1の正規乱数で初期化や、
Inputの正規化や、Mini-batchで学習の実装もしている.)&lt;/p&gt;

&lt;h1 id=&#34;test:99621a27901250e81c3c36481758f611&#34;&gt;Test&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Fisher&#39;s iris flower data set&lt;/code&gt; (統計の有名なデータセット) の多クラス分類 (Multi-class classification) をやってみる.&lt;/p&gt;

&lt;p&gt;データセット自体は R で &lt;code&gt;iris&lt;/code&gt; とかやると出てくるもので、
&lt;code&gt;iris dataset&lt;/code&gt; とかで検索すれば手に入る.&lt;/p&gt;

&lt;p&gt;どういうデータかというと、4つのInputと1つのLabelの集まりで、Labelは3種類ある.
そのためテストではInput Layerは4 Units、Hidden Layerは10 Units、Output Layerは3 Units、学習係数は0.001で組んだ.
(Hidden LayerのLayer数やUnit数と学習係数は適当.)&lt;/p&gt;

&lt;p&gt;今回使ったデータセットは150サンプルあるので、それを15サンプルずつの10セットに分ける.
そのうち1セットをテストデータとして取り、残りを教師データとして学習に使用する.
教師データでの学習の度に学習データを &lt;code&gt;test&lt;/code&gt; にかけ Error function の値をとり、
それが一定以下になるか、指定の学習回数を経るとと学習を打ち切る.
学習のあとにテストデータで &lt;code&gt;predict&lt;/code&gt; を行って正解数を記録する.
それを10セット繰り返す.
最後に正解率を出す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun data-sets ()
  ...)

(defun main (&amp;amp;optional (training-count 0))
  (let* ((layers (make-layers (list (list &#39;input-layer 4)
                                    (list &#39;hidden-layer 10 &#39;rectified-linear-unit)
                                    (list &#39;output-layer 3 &#39;softmax))))
         (connections (connect layers))
         (dnn (make-instance &#39;dnn
                             :layers layers
                             :connections connections
                             :learning-coefficient 0.001))
         (data-sets (data-sets))
         (correc-count 0)
         (test-count 0))
    (dolist (test-data-set data-sets)
      (let ((train-data-set (apply #&#39;append (remove test-data-set data-sets))))
        (loop repeat training-count
              do (train dnn train-data-set)
              until (&amp;lt; (test dnn train-data-set) 0.01))
        (dolist (data test-data-set)
          (incf test-count)
          (let ((result (predict dnn (data-input data))))
            (when (= (position (apply #&#39;max result) result)
                     (data-expected data))
              (incf correc-count))))))
    (format t &amp;quot;Accuracy: ~,2f%~%&amp;quot; (* 100 (/ correc-count test-count)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;学習回数を0から10000で変えながら順に実行する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dolist (times (list 0 10 100 1000 10000))
  (format t &amp;quot;TIMES: ~a~%&amp;quot; times)
  (loop repeat 3
        do (main times)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TIMES: 0
Accuracy: 33.33%
Accuracy: 33.33%
Accuracy: 33.33%
TIMES: 10
Accuracy: 50.00%
Accuracy: 54.00%
Accuracy: 60.00%
TIMES: 100
Accuracy: 89.33%
Accuracy: 82.00%
Accuracy: 86.67%
TIMES: 1000
Accuracy: 95.33%
Accuracy: 97.33%
Accuracy: 95.33%
TIMES: 10000
Accuracy: 97.33%
Accuracy: 97.33%
Accuracy: 96.67%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと学習できてるっぽい.&lt;/p&gt;

&lt;p&gt;Codeは &lt;a href=&#34;https://github.com/Rudolph-Miller/cldl&#34;&gt;CLDL&lt;/a&gt; に置いてるけど、
まぁとくに汎用的なLibraryにするつもりは無いし参考程度に.
(Common LispでDeep Learningしたいだけなら、もっとちゃんとしたLibraryがあるはず.)&lt;/p&gt;

&lt;h1 id=&#34;todo:99621a27901250e81c3c36481758f611&#34;&gt;TODO&lt;/h1&gt;

&lt;p&gt;まだ実装し残してることがあるのでリストアップする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convolution Layer (畳み込み層)&lt;/li&gt;
&lt;li&gt;Pooling Layer (プーリング層)&lt;/li&gt;
&lt;li&gt;MNISTの画像解析&lt;/li&gt;
&lt;li&gt;Recurrent Neural Network (再帰型ニューラルネットワーク)&lt;/li&gt;
&lt;li&gt;Autoencoder (自己符号化器)&lt;/li&gt;
&lt;li&gt;Automatic Differentiation (自動微分)&lt;/li&gt;
&lt;li&gt;学習係数の決定&lt;/li&gt;
&lt;li&gt;Regularization (正則化)

&lt;ul&gt;
&lt;li&gt;Weight restriction&lt;/li&gt;
&lt;li&gt;Weight decay&lt;/li&gt;
&lt;li&gt;Dropout&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当分やることには困らなそう.&lt;/p&gt;

&lt;h1 id=&#34;see-also:99621a27901250e81c3c36481758f611&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B018K6C99A/ref=as_li_tf_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B018K6C99A&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;深層学習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/cldl&#34;&gt;CLDL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jonathan unescapes Unicode Escape Sequence</title>
      <link>https://blog.rudolph-miller.com/2015/11/16/jonathan-unescapes-unicode-escape-sequence/</link>
      <pubDate>Mon, 16 Nov 2015 15:33:08 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/11/16/jonathan-unescapes-unicode-escape-sequence/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;にUnicode Escape Sequenceをunescapeする機能を入れた.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-escape-sequence:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;Unicode Escape Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;unicode-escape-sequence:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;Unicode Escape Sequence&lt;/h1&gt;

&lt;p&gt;先日&lt;a href=&#34;http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/&#34;&gt;Daily Log in Slack&lt;/a&gt;で報告した&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo&#34;&gt;Slack Nippo&lt;/a&gt;を作っている時に、
SlackのAPIのResponseにUnicode Escape Sequenceがあり、&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;がこれをusescapeしていなかったことを知った.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hanshuebner.github.io/yason/&#34;&gt;YASON&lt;/a&gt;も&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;ももちろん対応しているので、
&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;にUnicode Escape Sequenceをunescapeする機能を入れた.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(jonathan:parse &amp;quot;\&amp;quot;\\u30b8\\u30e7\\u30ca\\u30b5\\u30f3\&amp;quot;&amp;quot;)
;; =&amp;gt; &amp;quot;ジョナサン&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろんSurrogate pairも対応している.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(jonathan:parse &amp;quot;\&amp;quot;\\uD840\\uDC0B\&amp;quot;&amp;quot;)
;; =&amp;gt; &amp;quot;𠀋&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;はSurrogate pairを投げると文字化けする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-input-from-string (stream &amp;quot;\&amp;quot;\\uD840\\uDC0B\&amp;quot;&amp;quot;)
  (cl-json:decode-json stream))
;; =&amp;gt; &amp;quot;��&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不具合があれば&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan/issues&#34;&gt;Issues&lt;/a&gt;にreportもらえれば対応します.&lt;/p&gt;

&lt;h1 id=&#34;see-also:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/&#34;&gt;Daily Log in Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hanshuebner.github.io/yason/&#34;&gt;YASON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Daily Log in Slack</title>
      <link>https://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/</link>
      <pubDate>Sat, 14 Nov 2015 23:02:13 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/</guid>
      <description>

&lt;p&gt;Slackでの社内Twitterを日報にするToolを作っている.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#slackで社内twitter:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slackで社内Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slack-nippo:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;slackで社内twitter:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slackで社内Twitter&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://c16e.com/1511101558&#34;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ 〜 Problemが10分で解決するチャットを作ろう&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先日こんな記事があり、Kaizen Platform社内Slackにも&lt;strong&gt;技術顧問の先導&lt;/strong&gt;により &lt;code&gt;#times_${username}&lt;/code&gt; channelが開設された.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.rudolph-miller.com/images/20151114/channel.png&#34; alt=&#34;channel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やってみて感じたことと、これに関してのToolを作っているので報告する.&lt;/p&gt;

&lt;p&gt;毎日日報を&lt;a href=&#34;http://kobito.qiita.com/&#34;&gt;Kobito&lt;/a&gt;で書いて、&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿しているのだが、二つ不満があった.&lt;/p&gt;

&lt;p&gt;一つは、普段Vimを使っているので、別にApplicationとしてEditorを立ち上げたくないとこ.&lt;/p&gt;

&lt;p&gt;もう一つは、上の記事にも書かれていたが、&amp;rdquo;チームとしてのスピード感がでない&amp;rdquo;とこ.&lt;br /&gt;
ある程度の粒度の課題なら別で&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿するが、
小粒な課題や粒度の見えない課題を発見して、日報に書き、投稿後にコメントをもらったときには解決していたりする.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#times_${username]&lt;/code&gt; を始めてみると、余分にApplicationを立ち上げる必要がなく、
リアルタイムにコミュニケーションが発生し、いままでの日報の不満は解決された.&lt;/p&gt;

&lt;p&gt;それだけではなく、&lt;strong&gt;不思議としっくりくる感じ&lt;/strong&gt;があった.&lt;br /&gt;
考えてみるとこれは&lt;strong&gt;社内でのコミュニケーションに近い&lt;/strong&gt;のだ.&lt;/p&gt;

&lt;p&gt;席にいるかが一目で分かり、悩んでいると声をかけられ、話していると他の人が乱入してくる.&lt;br /&gt;
リモートワークを取り入れている会社にとって、&lt;strong&gt;この空気&lt;/strong&gt;を生み出せるのは重要だと思う.&lt;/p&gt;

&lt;p&gt;デメリットもある.
だたのチャットなので&lt;strong&gt;流れる&lt;/strong&gt;.
後で&lt;strong&gt;&amp;ldquo;あの時の課題はどうやって解決したっけ&amp;rdquo;&lt;/strong&gt;みたいなのがぱっとでてこない.&lt;/p&gt;

&lt;h1 id=&#34;slack-nippo:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slack Nippo&lt;/h1&gt;

&lt;p&gt;ということで、一日の終わりにこの &lt;code&gt;#times_${username}&lt;/code&gt; をまとめて日報とするToolを作っている.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.rudolph-miller.com/images/20151114/daily_log.png&#34; alt=&#34;daily log&#34; /&gt;&lt;/p&gt;

&lt;p&gt;タスク管理はTrelloを使用しており、そのログを &lt;code&gt;#times_${username}&lt;/code&gt; に流すようにした.&lt;br /&gt;
今はこのMarkdownを&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿している.&lt;/p&gt;

&lt;p&gt;まだ実験段階なのでローカルで叩いてMarkdownを吐き出すだけだが、&lt;br /&gt;
フォーマットと機能がまとまってきたら、Serverとして起動して生成したMarkdownをSlackに投稿したり、
&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に直接投稿できる機能をつける.&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo/&#34;&gt;Slack Nippo - GitHub&lt;/a&gt;にある.&lt;br /&gt;
とりあえず日報をだしたかったので、かなり雑な部分があるのは認識している.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/api-gateway/&#34;&gt;Amazon API Gateway&lt;/a&gt;と&lt;a href=&#34;https://aws.amazon.com/jp/lambda/&#34;&gt;AWS Lambda&lt;/a&gt;でやろうと考えていたのだが、
気がつくと&lt;strong&gt;Common Lisp&lt;/strong&gt;を書いていた. 心地よかった.&lt;br /&gt;
Serverとして機能をつけたらDocker Imageも&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;に上げてローカルで簡単に立ち上げられるようにする.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c16e.com/1511101558&#34;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ 〜 Problemが10分で解決するチャットを作ろう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo/&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About Lisp</title>
      <link>https://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</link>
      <pubDate>Thu, 29 Oct 2015 00:34:45 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</guid>
      <description>

&lt;p&gt;layout: true
name: center
class: middle, center&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
name: lisp
class: center, middle, lisp&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;tech-talk-4:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Tech Talk #4&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;rudolph-miller:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;@Rudolph-Miller&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/favicon.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( &lt;a href=&#34;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&#34;&gt;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&lt;/a&gt; )&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;common-lisper:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Common Lisper&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp??&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false&lt;/p&gt;

&lt;p&gt;.center[&lt;/p&gt;

&lt;h2 id=&#34;search-on-google-ja:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Search on google (ja)&lt;/h2&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/search.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;ｌｉｓｐ-は超至近距離アイドル:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「ＬＩＳＰ」は超至近距離アイドル&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;キミとセツゾク-が合言葉:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「キミとセツゾク」が合言葉&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-idle.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/polnareff.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-alien.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- 1958
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- John McCarthy
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Dynamic and strong typing
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Multiparadigm
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- S-expression and Polish Notation
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Coherence
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Code is made up of first-class object
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-2:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
.red[
- 1958
]
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;1958:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;1958&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages1.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages2.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages3.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages4.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages5.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;class: bottom, center&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/languages6.png )&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h3 id=&#34;only-fortran-is-older:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;only FORTRAN is older&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-3:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
.red[
- John McCarthy
]
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;john-mccarthy:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;John McCarthy&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;h1 id=&#34;the-father-of-ai:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;the father of AI&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;h1 id=&#34;invented-garbage-collection:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;invented Garbage Collection&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-4:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
.red[
- Dynamic and strong typing
]
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false
template: lisp&lt;/p&gt;

&lt;h1 id=&#34;dynamic-and-strong-typing:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Dynamic and strong typing&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing1.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing2.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-5:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
.red[
- Multiparadigm
]
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;multiparadigm:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Multiparadigm&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;imperative:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Imperative&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;object-oriented:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Object-oriented&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;functional:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Functional&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-6:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
.red[
- S-expression and Polish Notation
]
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;s-expression-and-polish-notation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression and Polish Notation&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;h2 id=&#34;red-l-ots-of-red-i-rritating-red-s-uperfluous-red-p-arentheses:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;.red[L]ots of .red[I]rritating .red[S]uperfluous .red[P]arentheses&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-keyboard.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;s-expression-is-ast:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression is AST.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
template: center&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;1 + 3 * 2
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/ast.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(+ 1 (* 3 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;wait:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Wait!&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ast-is-for-program:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;AST is for program,&lt;/h2&gt;

&lt;h2 id=&#34;not-for-human:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;not for human.&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;we-are-human:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;We are human,&lt;/h2&gt;

&lt;h2 id=&#34;and-think-in-natural-language:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;and think in natural language.&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;really:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Really??&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;when-you-think-of-algorithm:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;When you think of algorithm,&lt;/h2&gt;

&lt;h2 id=&#34;do-you-really-think-in-natural-language:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;do you really think in natural language ?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;no:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;in-the-more-abstract:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;In the more abstract&lt;/h1&gt;

&lt;h2 id=&#34;like-tree-or-graph:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;like tree or graph.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;s-expression-is:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression is&lt;/h2&gt;

&lt;h2 id=&#34;the-more-appropriate-method:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;the more appropriate method.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bnf&#34;&gt;&amp;lt;S-exp&amp;gt; ::= &amp;lt;List&amp;gt; | &amp;lt;Atom&amp;gt; 
&amp;lt;List&amp;gt;  ::= (&amp;lt;S-exp&amp;gt;*) 
&amp;lt;Atom&amp;gt;  ::= &amp;lt;Symbol&amp;gt; | &amp;lt;Number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun add1 (num1 num2)
  (+ num1 num2))

(add1 (add1 1 2) 3)
;; =&amp;gt; 6

(reduce #&#39;add1 (list 1 2 3))
;; =&amp;gt; 6

(defun add2 (&amp;amp;rest args)
  (reduce #&#39;add args))

(add2 1 2 3)
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false&lt;/p&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-7:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
.red[
- Coherence
]
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Coherence&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;no-difference-between-statement-and-expression:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No difference between Statement and Expression.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun sample (bool)
  (if (if (null bool) false true)
    (print true)
    (print false)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-8:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
.red[
- Code is made up of first-class object
]
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;code-is-made-up-of-first-class-object:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Code is made up of first-class object&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Code
(defun add1 (num1 num2)
  (+ num1 num2))

;; Data
(list &#39;defun &#39;add1 (list &#39;num1 num2)
  (list &#39;+ &#39;num1 &#39;num2))

&#39;(defun add1 (num1 num2)
  (+ num1 num2))

;; REPL
(eval
 &#39;(defun add1 (num1 num2)
    (+ num1 num2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-9:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
.red[
- The whole language is always available
]
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;the-whole-language-is-always-available:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;The whole language is always available&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;you-can-compile-or-run-code-while-reading-read-or-run-code-while-compiling-and-read-or-compile-code-at-runtime:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.&lt;/h2&gt;

&lt;p&gt;quoted from &amp;ldquo;&lt;a href=&#34;http://www.paulgraham.com/diff.html&#34;&gt;What Made Lisp Different&lt;/a&gt;&amp;rdquo; by Paul Graham&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
template: center&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while reading
(defun char-code-a-p (int)
  (= int #.(char-code #\a)))

(defun char-code-a-p (int)
  (= int 97))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while compiling
(defun include-p-1 (string char)
  (when (find char string) t))

(defmacro include-p-2 (string char)
  (let ((hash (make-hash-table)))
    (loop for c across string
      (setf (gethash c hash) t))
    `(gethash ,char ,hash)))

(defun time-of-include-p-1 ()
  (time (loop repeat 10000000 do (include-p-1 &amp;quot;sample&amp;quot; #\a))))

(defun time-of-include-p-2 ()
  (time (loop repeat 10000000 do (include-p-2 &amp;quot;sample&amp;quot; #\a))))

(time-of-include-p-1)
;; 0.495 seconds of real time
;; 1,336,787,055 processor cycles

(time-of-include-p-2)
;; 0.003 seconds of real time
;; 8,880,960 processor cycles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; compile code at runtime
(defun define-add-some (some)
  (eval
   `(defun add-some (int)
      (+ int ,some))))

(define-add-some 10)
;; add-some

(add-some 2)
;; =&amp;gt; 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
template: lisp&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;finally:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Finally,&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;why-lisp-why-s-expression:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Why Lisp?? Why S-expression??&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;because:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Because&amp;hellip;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;simple-and-coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Simple and Coherence.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;no-translation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Translation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;no-limitation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Limitation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;and:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;and&amp;hellip;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;god-wrote-in-lisp-code:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;God wrote in Lisp code&lt;/h1&gt;

&lt;h1 id=&#34;every-creature-great-and-small:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Every creature great and small.&lt;/h1&gt;

&lt;p&gt;quoted from &lt;a href=&#34;http://www.gnu.org/fun/jokes/eternal-flame.html&#34;&gt;Eternal Flame&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;think-in-lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Think in Lisp,&lt;/h1&gt;

&lt;h1 id=&#34;think-as-transcendence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Think as Transcendence.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;human-is-freed-from:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Human is freed from&lt;/h1&gt;

&lt;h1 id=&#34;all-the-limitations:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;all the limitations.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;so:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;so&amp;hellip;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lisp-is-s-expression-is:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp is (S-expression is)&lt;/h1&gt;

&lt;h1 id=&#34;a-method-of-salvation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;a method of salvation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/angel7.jpg )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integral-Rest</title>
      <link>https://blog.rudolph-miller.com/2015/08/21/integral-rest/</link>
      <pubDate>Fri, 21 Aug 2015 11:20:54 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/08/21/integral-rest/</guid>
      <description>

&lt;p&gt;稚拙のIntegral-Restを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#integral-rest:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;Integral-Rest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;integral-rest:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;Integral-Rest&lt;/h2&gt;

&lt;p&gt;Integral-RestはIntegralのDAO tableからREST APIを簡単に作るLibrary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defpackage sample
  (:use :cl
        :integral
        :integral-rest))
(in-package :sample)

(connect-toplevel :sqlite3 :database-name &amp;quot;:memory:&amp;quot;)

(defclass user ()
  ((id :initarg :id
       :type integer
       :primary-key t
       :accessor user-id)
   (name :initarg :name
         :type string
         :accessor user-name))
  (:metaclass integral:&amp;lt;dao-table-class&amp;gt;))

(ensure-table-exists (find-class &#39;user))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:metaclass&lt;/code&gt;として&lt;code&gt;integral:&amp;lt;dao-table-class&amp;gt;&lt;/code&gt;を指定し、&lt;code&gt;user&lt;/code&gt;を&lt;code&gt;defclass&lt;/code&gt;する.&lt;br /&gt;
後は&lt;code&gt;(set-rest-app)&lt;/code&gt;をすると&lt;code&gt;*rest-app*&lt;/code&gt;がREST API appに束縛されので、&lt;br /&gt;
&lt;code&gt;*rest-app*&lt;/code&gt;は&lt;code&gt;ningle:&amp;lt;app&amp;gt;&lt;/code&gt;の&lt;code&gt;instance&lt;/code&gt;なので、これをそのまま&lt;code&gt;clack:clackup&lt;/code&gt;できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(set-rest-app)

(clack:clackup *rest-app*)
;; =&amp;gt; Listening on localhost:5000.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでREST API ServerがPort 5000で立ち上がる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;)
;; =&amp;gt; #&amp;lt;USER id: 1&amp;gt;

(dex:get &amp;quot;http://localhost:5000/api/users&amp;quot;)
;; =&amp;gt; &amp;quot;[{\&amp;quot;id\&amp;quot;:1,\&amp;quot;name\&amp;quot;:\&amp;quot;Rudolph\&amp;quot;}]&amp;quot;

(dex:get &amp;quot;http://localhost:5000/api/users/1&amp;quot;)
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;name\&amp;quot;:\&amp;quot;Rudolph\&amp;quot;}&amp;quot;

(dex:post &amp;quot;http://localhost:5000/api/users&amp;quot; :contest &#39;((&amp;quot;name&amp;quot; . &amp;quot;Miller&amp;quot;)))
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Miller\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; #&amp;lt;USER id: 2 name: &amp;quot;Miller&amp;quot;&amp;gt;

(dex:put &amp;quot;http://localhost:5000/api/users/2&amp;quot; :contest &#39;((&amp;quot;name&amp;quot; . &amp;quot;Tom&amp;quot;)))
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Tom\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; #&amp;lt;USER id: 2 name: &amp;quot;Tom&amp;quot;&amp;gt;

(dex:delete &amp;quot;http://localhost:5000/api/users/2&amp;quot;)
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Tom\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; NIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっとしたAPI Serverだと&lt;code&gt;app.lisp&lt;/code&gt;に十数行で書ける.&lt;/p&gt;

&lt;h2 id=&#34;see-also:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/integral-rest&#34;&gt;Integral-Rest GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/integral-rest/overview.html&#34;&gt;Integral-Rest Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker image for Clack Application</title>
      <link>https://blog.rudolph-miller.com/2015/08/20/docker-image-for-clack-application/</link>
      <pubDate>Thu, 20 Aug 2015 10:10:48 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/08/20/docker-image-for-clack-application/</guid>
      <description>

&lt;p&gt;Clack Application用のDocker base imageを作成したので紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;How to use.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-to-use:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;How to use.&lt;/h2&gt;

&lt;p&gt;簡単な&lt;code&gt;app.lisp&lt;/code&gt;を用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defvar *app*
  (lambda (env)
    (declare (ignore env))
    &#39;(200 (:content-type &amp;quot;text/plain&amp;quot;) (&amp;quot;Hello, World&amp;quot;))))

(lack:builder
 :session
 *app*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt;として&lt;code&gt;rudolphm/clack&lt;/code&gt;を指定してDockerfileを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FROM rudolphm/clack:latest
MAINTAINER Rudolph Miller


ADD app.lisp /usr/local/src/clack-test/

CMD clackup --port 5000 --server woo /usr/local/src/clack-test/app.lisp
EXPOSE 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfileでやっているのは上の&lt;code&gt;app.lisp&lt;/code&gt;を配置して、
&lt;code&gt;ENTRYPOINT&lt;/code&gt;として&lt;code&gt;clackup --port 5000 --server woo app.lisp&lt;/code&gt;を指定しているだけだ.
後はDockerで&lt;code&gt;build&lt;/code&gt;して&lt;code&gt;run&lt;/code&gt;するとClack Applicationが動く.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t clack-sample ./
docker run -d -p 5000:5000 clack-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common Lispもようやくここまで来たかって所感.&lt;/p&gt;

&lt;h2 id=&#34;see-also:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/dockerfile-clack&#34;&gt;Dockerfile-Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/woo&#34;&gt;Woo GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snmsts/roswell&#34;&gt;Roswell GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Clipper</title>
      <link>https://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</link>
      <pubDate>Mon, 10 Aug 2015 13:53:10 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</guid>
      <description>

&lt;p&gt;稚作のClipperを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/h2&gt;

&lt;p&gt;例えばMicro Blogサービスを作るとしよう.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.models
  (:use :cl
        :integral))
(in-package :sample.models)

(defclass user ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :reader user-id)
   (name :col-type (:varchar 255)
         :initarg :name
         :accessor user-name))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defclass post ()
  ((id :type (:integer 11)
       :primary-key t
       :auto-increment t
       :not-null t
       :reader post-id)
   (content :type string
            :col-type (:varchar 255)
            :initarg :content
            :accessor post-content)
   (user-id :type integer
            :initarg :user-id
            :accessor post-user-id))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defun user-posts (user)
  (check-type user user)
  (select-dao &#39;post (where (:= :user_id (user-id user)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じに&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt;を使用しModelとして&lt;code&gt;user&lt;/code&gt;と&lt;code&gt;post&lt;/code&gt;を定義する.
とりあえずこれで&lt;code&gt;user&lt;/code&gt;に紐づく&lt;code&gt;post&lt;/code&gt;の投稿と&lt;code&gt;post&lt;/code&gt;の一覧機能ができる.&lt;/p&gt;

&lt;p&gt;次に&lt;code&gt;user&lt;/code&gt;が名前の表示だけじゃ物足りなく感じ、Iconを設定できるようにしてみる.
Iconを設定するためにはImage Filesを保存、管理しなくてはならない.&lt;/p&gt;

&lt;p&gt;開発を進めて行く内に、
「開発時はBrowserで確認するため&lt;code&gt;static/images/icons&lt;/code&gt;に保存し、
test時は開発環境を壊したくないため&lt;code&gt;t/images/icons&lt;/code&gt;に保存したい.
その上、productionではS3のBucketに保存したい.」
となるのは当然だと思う.
(少なくとも僕はそれが必要になった.)&lt;/p&gt;

&lt;p&gt;これらの切り替えを簡単にするのが&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;Clipper&lt;/a&gt;だ.&lt;/p&gt;

&lt;p&gt;とりあえずIconのModelとして&lt;code&gt;icon&lt;/code&gt;を用意して、&lt;code&gt;user&lt;/code&gt;と紐づける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defclass icon ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :initarg :id)
   (user-id :type integer)
   (image-file-name :col-type (:varchar 255)
                    :initarg :image-file-name)
   (image-content-type :col-type (:varchar 255)
                       :initarg :image-content-type)
   (image-file-size :col-type (:integer 11)
                    :initarg :image-file-size)
   (url :type string
        :initarg :url))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))


(defun user-icon (user)
  (check-type user user)
  (car
   (select-dao &#39;icon
               (where (:= :user_id (user-id user)))
               (limit 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数でのconfigの切り替えに&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt;を使用し、
&lt;code&gt;clipper:setup-clipper&lt;/code&gt;の引数をenvごとに管理する.
又、切り替えのための&lt;code&gt;sample.models::setup-clipper&lt;/code&gt;も定義しておく.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.config
  (:use :cl)
  (:import-from :envy
                :config-env-var
                :defconfig))
(in-package :sample.config)

(setf (config-env-var) &amp;quot;APP_ENV&amp;quot;)

(defconfig |development|
    `(:clipper (:store-type :local
                :image-directory #P&amp;quot;/home/user/app/images/icons&amp;quot;
                :relative #P&amp;quot;/home/user/app/&amp;quot;
                :prefix &amp;quot;http://localhost:3000/&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defconfig |production|
    `(:clipper (:store-type :s3
                :aws-access-key (uiop:getenv &amp;quot;AWS_ACCESS_KEY&amp;quot;)
                :aws-secret-key (uiop:getenv &amp;quot;AWS_SECRET_KEY&amp;quot;)
                :s3-endpoint &amp;quot;s3-ap-northeast-1.amazonaws.com&amp;quot;
                :s3-bucket-name &amp;quot;sample-app&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defun config ()
  (envy:config #.(package-name *package*)))


(in-package :sample.models)

(defun setup-clipper ()
  (apply #&#39;clipper:setup-clipper
         (append (list :clipper-class (find-class &#39;icon))
                 (getf (sample.config::config) :clipper))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると環境変数&lt;code&gt;APP_ENV&lt;/code&gt;によってImage Filesの保存先を切り替えられる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(in-package :sample.models)

(ql:quickload :osicat)

(defvar *url* &amp;quot;http://www.lisperati.com/lisplogo_alien_256.png&amp;quot;)

;; APP_ENV=development
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;development&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;http://localhost:3000/images/icons/1/lisplogo_alien_256.png&amp;quot;


;; APP_ENV=production
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;production&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;John&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;https://s3-ap-northeast-1.amazonaws.com/sample-app/2/lisplogo_alien_256.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;便利.&lt;/p&gt;

&lt;h2 id=&#34;see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/clipper/overview.html&#34;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/clipper/&#34;&gt;Quickdocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt; - An object relational mapper for Common Lisp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt; - Configuration switcher by an environment variable inspired by Config::ENV.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xach.com/lisp/zs3/&#34;&gt;ZS3&lt;/a&gt; - Amazon S3 and CloudFront from Common Lisp.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>