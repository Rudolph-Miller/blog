<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React.Js on </title>
    <link>/tags/react/index.js/</link>
    <description>Recent content in React.Js on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 25 Jan 2016 21:46:15 +0900</lastBuildDate>
    <atom:link href="/tags/react.js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scroll to the top with Redux Router</title>
      <link>/post/scroll-to-the-top-with-redux-router/</link>
      <pubDate>Mon, 25 Jan 2016 21:46:15 +0900</pubDate>
      
      <guid>/post/scroll-to-the-top-with-redux-router/</guid>
      <description>

&lt;p&gt;Redux RouterでLocationの変更時にScrollをtopに持っていく方法.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#scroll-position-after-transition-with-redux-router:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll position after transition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scroll-to-the-top-with-redux-router:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;scroll-position-after-transition:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll position after transition&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt; は &lt;a href=&#34;/post/redux-router/&#34;&gt;Redux Routerの紹介&lt;/a&gt; で紹介した通り、React.jsでde facto standardとなっているRouting libraryの &lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt; の &lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;Redux Routerを実際にApplicationで使用していると &lt;code&gt;Link&lt;/code&gt; での遷移時にScrollが元の位置のままで困ったので、 &lt;code&gt;Link&lt;/code&gt; での遷移で &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; するよう実装した.&lt;/p&gt;

&lt;h1 id=&#34;scroll-to-the-top:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/h1&gt;

&lt;h2 id=&#34;example:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;とりあえずRedux Routerを使用したApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const Styles = {
  linkContainer: {
    marginTop: &#39;1000px&#39;
  }
}

class App extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

class Hoge extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;Hoge&amp;lt;/div&amp;gt;
        &amp;lt;div style={Styles.linkContainer}&amp;gt;
          &amp;lt;Link to=&amp;quot;/fuga&amp;quot;&amp;gt;
            To Fuga
          &amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Fuga extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;Fuga&amp;lt;/div&amp;gt;
        &amp;lt;div style={Styles.linkContainer}&amp;gt;
          &amp;lt;Link to=&amp;quot;/hoge&amp;quot;&amp;gt;
            To Hoge
          &amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect path=&amp;quot;/&amp;quot; to=&amp;quot;hoge&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;hoge&amp;quot; component={Hoge} /&amp;gt;
      &amp;lt;Route path=&amp;quot;fuga&amp;quot; component={Fuga} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const reducer = combineReducers({
  router: routerStateReducer
});

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/20160125/scroll_step1.gif&#34; alt=&#34;20160125/scroll_step1.gif&#34;&gt;


&lt;p&gt;上のGIFの通り、このままだと &lt;code&gt;Link&lt;/code&gt; での遷移時にScrollが元の位置のままだ.&lt;br /&gt;
本来なら、遷移したらScrollを最上部にもっていくべきだろう.&lt;/p&gt;

&lt;h2 id=&#34;scroll-to-the-top-1:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/h2&gt;

&lt;p&gt;Redux Routerでも数行でこれが実装できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@@ -66,7 +66,18 @@
const reducer = combineReducers({
   router: routerStateReducer
 });
 
-const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
+const history = createHistory();
+
+history.listen(location =&amp;gt; {
+  setTimeout(() =&amp;gt; {
+    if (location.action === &#39;POP&#39;) {
+      return;
+    }
+    window.scrollTo(0, 0);
+  });
+});
+
+const store = reduxReactRouter({routes, history})(createStore)(reducer);
 
 class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
         &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変更点は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reduxReactRouter&lt;/code&gt; に &lt;code&gt;createHistory&lt;/code&gt; ではなく、 &lt;code&gt;history&lt;/code&gt; として &lt;code&gt;createHistory()&lt;/code&gt; の返り値を渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt; に対して &lt;code&gt;location&lt;/code&gt; の変更のEventの &lt;code&gt;listen&lt;/code&gt; を行い、 &lt;code&gt;location.action&lt;/code&gt; が &lt;code&gt;&#39;POP&#39;&lt;/code&gt; 以外の時に &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; を実行する.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だけ.&lt;/p&gt;

&lt;img src=&#34;/images/20160125/scroll_step2.gif&#34; alt=&#34;20160125/scroll_step2.gif&#34;&gt;


&lt;h2 id=&#34;pushstate:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;pushState&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/post/push-state-in-redux-router/&#34;&gt;pushState in Redux Router&lt;/a&gt; で紹介した通り、
Redux Routerにも &lt;code&gt;pushState&lt;/code&gt; のAPIがあり &lt;code&gt;pushState&lt;/code&gt; ででもPageの遷移ができるが、
この改修により &lt;code&gt;pushState&lt;/code&gt; での遷移でもScrollを最上部に持っていくことができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/post/redux-router/&#34;&gt;Redux Routerの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Theme of Material-UI</title>
      <link>/post/theme-of-material-ui/</link>
      <pubDate>Mon, 11 Jan 2016 21:15:39 +0900</pubDate>
      
      <guid>/post/theme-of-material-ui/</guid>
      <description>

&lt;p&gt;Material-UIのThemeの使い方を紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#material-ui:2974f27f4339877b24e592c5128f86c3&#34;&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#theme:2974f27f4339877b24e592c5128f86c3&#34;&gt;Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:2974f27f4339877b24e592c5128f86c3&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;material-ui:2974f27f4339877b24e592c5128f86c3&#34;&gt;Material-UI&lt;/h1&gt;

&lt;p&gt;Material-UIとMaterial Designについては&lt;a href=&#34;/post/material-ui/&#34;&gt;前回&lt;/a&gt;の記事を参照.&lt;/p&gt;

&lt;h1 id=&#34;theme:2974f27f4339877b24e592c5128f86c3&#34;&gt;Theme&lt;/h1&gt;

&lt;p&gt;Material Designでは色をPrimary color paletteとSecondary color (Accent color) paletteに限定することにより、
直感的で統一感のあるDesignを作り出している.&lt;/p&gt;

&lt;p&gt;Material-UIではこれをThemeとして管理する.&lt;/p&gt;

&lt;h2 id=&#34;color:2974f27f4339877b24e592c5128f86c3&#34;&gt;Color&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/post/material-ui/&#34;&gt;前回&lt;/a&gt;の記事の&lt;a href=&#34;/post/material-ui/#example:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Example&lt;/a&gt;にThemeを適用し、Colorを変更する.&lt;/p&gt;

&lt;p&gt;Colorの指定は&lt;a href=&#34;https://www.google.com/design/spec/style/color.html#color-color-palette&#34;&gt;Color palette&lt;/a&gt;とMaterial-UIの&lt;a href=&#34;http://www.material-ui.com/#/customization/colors&#34;&gt;customization/colors&lt;/a&gt;を参照.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import ThemeManager from &#39;material-ui/lib/styles/theme-manager&#39;;
import ThemeDecorator from &#39;material-ui/lib/styles/theme-decorator&#39;;
import Colors from &#39;material-ui/lib/styles/colors&#39;;
import ColorManipulator from &#39;material-ui/lib/utils/color-manipulator&#39;;
import LightRawTheme from &#39;material-ui/lib/styles/raw-themes/light-raw-theme&#39;;

export default ThemeManager.modifyRawThemePalette(
  ThemeManager.getMuiTheme(LightRawTheme),
  {
    primary1Color: Colors.cyan500,
    primary2Color: Colors.cyan700,
    primary3Color: Colors.lightBlack,
    accent1Color: Colors.green400,
    accent2Color: Colors.grey100,
    accent3Color: Colors.grey500,
    textColor: Colors.blueGrey800,
    alternateTextColor: Colors.white,
    canvasColor: Colors.white,
    borderColor: Colors.grey300,
    disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3),
    pickerHeaderColor: Colors.cyan500
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;theme.js&lt;/code&gt; に書き込み、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import { render } from &#39;react-dom&#39;;
 import React, { Component, PropTypes } from &#39;react&#39;;
 import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
 injectTapEventPlugin();
 
 import {
   Avatar, Card, CardActions,
   CardHeader, CardMedia, CardTitle,
-  RaisedButton, FlatButton, CardText
+  RaisedButton, FlatButton, CardText,
+  ThemeWrapper
 } from &#39;material-ui&#39;;
+import ThemeDecorator from &#39;material-ui/lib/styles/theme-decorator&#39;;

+import Theme from &#39;./theme&#39;;
 
+@ThemeDecorator(Theme)
 class App extends Component {
 ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@ThemeDecorator&lt;/code&gt; で適用する.&lt;/p&gt;

&lt;img src=&#34;/images//20160111/theme-applied.png&#34; alt=&#34;/20160111/theme-applied.png&#34;&gt;


&lt;p&gt;簡単にColorなどを変更できるが、Themeとして管理することにより、統一感が崩れない.&lt;/p&gt;

&lt;h2 id=&#34;font-family:2974f27f4339877b24e592c5128f86c3&#34;&gt;Font Family&lt;/h2&gt;

&lt;p&gt;Material-UIのdefaultの &lt;code&gt;font-family&lt;/code&gt; は &lt;code&gt;&#39;Roboto&#39;, sans-serif&lt;/code&gt; だが、日本語などの &lt;code&gt;Roboto&lt;/code&gt; でカバーされていない言語の場合 &lt;code&gt;Noto&lt;/code&gt; を使用したい.&lt;br /&gt;
(Material Designの&lt;a href=&#34;https://www.google.com/design/spec/style/typography.html#typography-typeface&#34;&gt;Typography&lt;/a&gt;参考.)&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;Noto Sans JP&lt;/code&gt; を使用するため、あらかじめHTMLに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&#39;http://fonts.googleapis.com/earlyaccess/notosansjp.css&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を差し込む.&lt;/p&gt;

&lt;p&gt;あとは上記の &lt;code&gt;theme.js&lt;/code&gt; で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; export default ThemeManager.modifyRawThemePalette(
-  ThemeManager.getMuiTheme(LightRawTheme),
+  ThemeManager.modifyRawThemeFontFamily(
+    ThemeManager.getMuiTheme(LightRawTheme),
+    &amp;quot;&#39;Roboto&#39;, &#39;Noto Sans JP&#39;, sans-serif&amp;quot;
+  ),
   {
     primary1Color: Colors.cyan500,
     primary2Color: Colors.cyan700,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;ThemeManager.modifyRawThemeFontFamily&lt;/code&gt; で &lt;code&gt;font-family&lt;/code&gt; を変更する.&lt;/p&gt;

&lt;img src=&#34;/images//20160111/font-family-not-changed.png&#34; alt=&#34;/20160111/font-family-not-changed.png&#34;&gt;


&lt;img src=&#34;/images//20160111/font-family-changed.png&#34; alt=&#34;/20160111/font-family-changed.png&#34;&gt;


&lt;h1 id=&#34;see-also:2974f27f4339877b24e592c5128f86c3&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/post/material-ui/&#34;&gt;Material-UIの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/style/color.html#color-color-palette&#34;&gt;Color palette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.material-ui.com/#/customization/colors&#34;&gt;Material-UI customization/colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/style/typography.html#typography-typeface&#34;&gt;Typography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Material-UI</title>
      <link>/post/material-ui/</link>
      <pubDate>Mon, 04 Jan 2016 20:54:36 +0900</pubDate>
      
      <guid>/post/material-ui/</guid>
      <description>

&lt;p&gt;Material-UIの紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#material-design:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#material-ui:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:685cc0a50b9186931af118d17b9d18fd&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;material-design:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material Design&lt;/h1&gt;

&lt;p&gt;Material DesignはGoogleが開発しているDesign Guidelineで&lt;strong&gt;一貫性と実世界と同じ挙動でユーザーの負担を軽くする&lt;/strong&gt;ことが目標で、 &lt;strong&gt;マテリアル（素材）のある世界&lt;/strong&gt; が特徴.&lt;/p&gt;

&lt;p&gt;あらゆるdeviceを対象とした&lt;strong&gt;一貫性&lt;/strong&gt;と&lt;strong&gt;周りの世界と連続的で、同じ物理的性質や同じ動き&lt;/strong&gt;で、ユーザーがあらゆるdeviceであらゆるApplicationを、それぞれでの操作を学習する必要無く、自然に使えるようになる.&lt;/p&gt;

&lt;h1 id=&#34;material-ui:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material-UI&lt;/h1&gt;

&lt;h2 id=&#34;about:685cc0a50b9186931af118d17b9d18fd&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/callemall/material-ui&#34;&gt;Material-UI&lt;/a&gt;はMaterial DesignのReact.js実装.&lt;/p&gt;

&lt;p&gt;ComponentとThemeで簡単にMaterial Designを試すことができる.&lt;br /&gt;
(Themeについては今回は触れず、&lt;a href=&#34;/post/theme-of-material-ui/&#34;&gt;Theme of Material-ui&lt;/a&gt;で紹介.)&lt;/p&gt;

&lt;h2 id=&#34;install:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save material-ui
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;material-ui&lt;/code&gt; をinstallする.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zilverline/react-tap-event-plugin&#34;&gt;React-Tap-Event-Plugin&lt;/a&gt;を使用して、Tap eventをlistenしているので、これを有効にしないと一部のComponentが正常に動作しない.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save react-tap-event-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でinstallし、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
injectTapEventPlugin();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をApplicationで実行して有効化する.&lt;/p&gt;

&lt;p&gt;また、Material-UIは &lt;code&gt;Roboto&lt;/code&gt; フォントを使用しているので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&#39;http://fonts.googleapis.com/css?family=Roboto&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をHTMLに差し込むなどして、 &lt;code&gt;Roboto&lt;/code&gt; フォントを有効にする.&lt;/p&gt;

&lt;h2 id=&#34;example:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { render } from &#39;react-dom&#39;;
import React, { Component, PropTypes } from &#39;react&#39;;
import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
injectTapEventPlugin();

import {
  Avatar, Card, CardActions,
  CardHeader, CardMedia, CardTitle,
  RaisedButton, FlatButton, CardText
} from &#39;material-ui&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;Card&amp;gt;
        &amp;lt;CardHeader
          title=&amp;quot;Title&amp;quot;
          subtitle=&amp;quot;Subtitle&amp;quot;
          avatar={&amp;lt;Avatar style={{color: &#39;red&#39;}}&amp;gt;A&amp;lt;/Avatar&amp;gt;}/&amp;gt;
        &amp;lt;CardHeader
          title=&amp;quot;Demo Url Based Avatar&amp;quot;
          subtitle=&amp;quot;Subtitle&amp;quot;
          avatar=&amp;quot;http://lorempixel.com/100/100/nature/&amp;quot;/&amp;gt;
        &amp;lt;CardMedia overlay={&amp;lt;CardTitle title=&amp;quot;Title&amp;quot; subtitle=&amp;quot;Subtitle&amp;quot;/&amp;gt;}&amp;gt;
          &amp;lt;img src=&amp;quot;http://lorempixel.com/600/337/nature/&amp;quot;/&amp;gt;
        &amp;lt;/CardMedia&amp;gt;
        &amp;lt;CardTitle title=&amp;quot;Title&amp;quot; subtitle=&amp;quot;Subtitle&amp;quot;/&amp;gt;
        &amp;lt;CardActions&amp;gt;
          &amp;lt;RaisedButton primary={true} label=&amp;quot;Action1&amp;quot;/&amp;gt;
          &amp;lt;FlatButton label=&amp;quot;Action2&amp;quot;/&amp;gt;
        &amp;lt;/CardActions&amp;gt;
        &amp;lt;CardText&amp;gt;
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          Donec mattis pretium massa. Aliquam erat volutpat. Nulla facilisi.
          Donec vulputate interdum sollicitudin. Nunc lacinia auctor quam sed pellentesque.
          Aliquam dui mauris, mattis quis lacus id, pellentesque lobortis odio.
        &amp;lt;/CardText&amp;gt;
      &amp;lt;/Card&amp;gt;
    );
  }
}

render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images/20160104/example.png&#34; alt=&#34;20160104/example.png&#34;&gt;


&lt;p&gt;こんな感じにComponentに &lt;code&gt;props&lt;/code&gt; を渡すだけ.&lt;/p&gt;

&lt;h1 id=&#34;see-also:685cc0a50b9186931af118d17b9d18fd&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/callemall/material-ui&#34;&gt;Material UI - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.material-ui.com/#/home&#34;&gt;Material UI - Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zilverline/react-tap-event-plugin&#34;&gt;react-tap-event-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Materail Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>pushState in Redux Router</title>
      <link>/post/push-state-in-redux-router/</link>
      <pubDate>Fri, 25 Dec 2015 12:34:52 +0900</pubDate>
      
      <guid>/post/push-state-in-redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; の使い方と、 React Reduxの&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; について、
&lt;code&gt;connect&lt;/code&gt; のSource codeを追いながら解説.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の25日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;は&lt;a href=&#34;htpp://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;前回&lt;/a&gt;で紹介した通り、
React.jsでde facto standardとなっているRouting libraryの&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;h1 id=&#34;pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; はReact RouterでURLを遷移するAPIで、元はBrowserのHistory API.
Redux Routeの &lt;code&gt;pushState&lt;/code&gt; はこれをwrapしたもの.&lt;/p&gt;

&lt;h1 id=&#34;usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/redux-router&#34;&gt;前回&lt;/a&gt;で使ったApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  router: routerStateReducer,
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect(state =&amp;gt; {
  return {
    location: state.router.location
  }
})
class CounterButton extends Component {
  render() {
    const { dispatch } = this.props;

    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.location.pathname === &#39;/incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images//20151225/without-push-state.gif&#34; alt=&#34;/20151225/without-push-state.gif&#34;&gt;


&lt;p&gt;これに &lt;code&gt;pushState&lt;/code&gt; で、 &lt;code&gt;/decr&lt;/code&gt; を1秒後に &lt;code&gt;/incr&lt;/code&gt; にredirectするという無駄な機能をつける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter, pushState } from &#39;redux-router&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+@connect(null, { pushState })
class Decrement extends Component {
+  componentDidMount() {
+    const { pushState } = this.props;
+
+    setTimeout(() =&amp;gt; {
+      pushState(null, &#39;/incr&#39;);
+    }, 1000)
+  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images//20151225/with-push-state.gif&#34; alt=&#34;/20151225/with-push-state.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; をRedux Routerから &lt;code&gt;import&lt;/code&gt; し、 &lt;code&gt;pushState&lt;/code&gt; を &lt;code&gt;connect&lt;/code&gt; の第二引数に &lt;code&gt;{ pushState: pushState }&lt;/code&gt; の形で渡し、
&lt;code&gt;componentDidMount&lt;/code&gt; の中で &lt;code&gt;setTimeout&lt;/code&gt; を使って &lt;code&gt;this.props.pushState&lt;/code&gt; を呼んでいる.&lt;/p&gt;

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; は &lt;a href=&#34;https://github.com/acdlite/redux-router/blob/master/src/actionCreators.js#L56&#34;&gt;ここ&lt;/a&gt;で定義されていて、どうもAction creatorのようだ.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の第二引数って何だろう.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rackt/redux/&#34;&gt;Redux&lt;/a&gt;の&lt;a href=&#34;http://rackt.org/redux/index.html&#34;&gt;Tutorial&lt;/a&gt;の &lt;code&gt;connect&lt;/code&gt; の&lt;a href=&#34;http://rackt.org/redux/docs/basics/UsageWithReact.html&#34;&gt;解説&lt;/a&gt;にこう書いてある.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases you will only pass the first argument to connect(), which is a function we call a selector.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ほとんどの場合、第一引数しか使わないらしい.&lt;/p&gt;

&lt;p&gt;仕方ないので&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24&#34;&gt;Source code&lt;/a&gt;を読むと、 &lt;code&gt;mapDispatchToProps&lt;/code&gt; と呼ぶものらしい.&lt;/p&gt;

&lt;h1 id=&#34;mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h1&gt;

&lt;p&gt;もう少し &lt;code&gt;mapDispatchToProps&lt;/code&gt; を追ってみる.&lt;/p&gt;

&lt;h2 id=&#34;connect:5ffab360503358b5e43ebafcc74ab758&#34;&gt;connect&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24-L275&#34;&gt;ここ&lt;/a&gt;だが、簡単に言うと、4つの引数をとって、1つの引数をとる関数を返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default function connect(mapStateToProps, mapDispatchToProps, mergeProps, options = {}) {
  return function wrapWithConnect(WrappedComponent) {
    class Connect extends Component {
      render() {
        return createElement(WrappedComponent, this.mergeProps);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-1:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; なら &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされて、 &lt;code&gt;Object&lt;/code&gt; でないならそのままで、 &lt;code&gt;finalMapDispatchToProps&lt;/code&gt; に入る.
&lt;code&gt;mapDispatchToProps&lt;/code&gt; として何も渡さなかった場合は &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; がdefaultで入るようになっている. &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて、 &lt;code&gt;dispatch&lt;/code&gt; を受け取り &lt;code&gt;{ dispatch: dispatch }&lt;/code&gt; として返している.&lt;/p&gt;

&lt;h2 id=&#34;wrapactioncreators:5ffab360503358b5e43ebafcc74ab758&#34;&gt;wrapActionCreators&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt; が &lt;code&gt;Object&lt;/code&gt; だったときは &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされるが、 &lt;code&gt;wrapActionCreators&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/utils/wrapActionCreators.js#L3&#34;&gt;ここ&lt;/a&gt;にあり、 Reduxの &lt;code&gt;bindActionCreators&lt;/code&gt; を呼んでいる.
&lt;code&gt;bindActionCreators&lt;/code&gt; は引数が &lt;code&gt;Object&lt;/code&gt; の時は、その &lt;code&gt;values&lt;/code&gt; にたいして &lt;code&gt;bindActionCreator&lt;/code&gt; を &lt;code&gt;map&lt;/code&gt; している. &lt;code&gt;bindActionCreator&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function bindActionCreator(actionCreator, dispatch) {
  return (...args) =&amp;gt; dispatch(actionCreator(...args));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;actionCreator&lt;/code&gt;を与えられた引数で呼んで、 &lt;code&gt;dispatch&lt;/code&gt; する関数を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMapDispatchToProps&lt;/code&gt; は &lt;code&gt;computeDispatchProps&lt;/code&gt; の中で &lt;code&gt;dispatch&lt;/code&gt; を引数として呼ばれており、その返り値が &lt;code&gt;Connect#updateDispatchPropsIfNeeded&lt;/code&gt; の中で &lt;code&gt;this.dispatchProps&lt;/code&gt; に入る. この &lt;code&gt;this.dispatchProps&lt;/code&gt; は &lt;code&gt;Connect#updateMergedProps&lt;/code&gt; で &lt;code&gt;computeMergedProps&lt;/code&gt; を通して &lt;code&gt;this.mergedProps&lt;/code&gt; に入る.&lt;/p&gt;

&lt;h2 id=&#34;computemergedprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;computeMergedProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;computeMergedProps&lt;/code&gt; は &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、 &lt;code&gt;finalMergeProps&lt;/code&gt; にそれらを渡し、その返り値を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmergeprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMergeProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMergeProps&lt;/code&gt; は &lt;code&gt;connect&lt;/code&gt; の第三引数である &lt;code&gt;mergeProps&lt;/code&gt; が入っている. &lt;code&gt;connect&lt;/code&gt; に第三引数が指定されていない場合は &lt;code&gt;defaultMergeProps&lt;/code&gt; が入り、その定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMergeProps = (stateProps, dispatchProps, parentProps) =&amp;gt; ({
  ...parentProps,
  ...stateProps,
  ...dispatchProps
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、 &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、それらをexpandしてまとめて返している.
&lt;code&gt;Connect#updateMergedProps&lt;/code&gt; でこれが &lt;code&gt;this.mergedProps&lt;/code&gt; に入り、最終的に &lt;code&gt;connect&lt;/code&gt; の返す関数の引数として渡される &lt;code&gt;WrappedComponent&lt;/code&gt; に &lt;code&gt;createElement&lt;/code&gt; で渡される.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(WrappedComponent, this.mergedProps); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-again:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps again&lt;/h2&gt;

&lt;p&gt;結局 &lt;code&gt;mapDispatchToProps&lt;/code&gt; は何だったかと言うと、 &lt;code&gt;dispatch&lt;/code&gt; を &lt;code&gt;createElement&lt;/code&gt; にどのように渡すかを定義する引数だった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;@connect(null, { pushState })
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(Decrement, { pushState: (...args) =&amp;gt; { dispatch(pushState(..args)); } });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となって、 &lt;code&gt;class Decrement&lt;/code&gt; の中で &lt;code&gt;this.props.pushState&lt;/code&gt; が使えるようになる.&lt;/p&gt;

&lt;p&gt;さらに &lt;code&gt;mapDispatchToProps&lt;/code&gt; のdefaultが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;であったように、 &lt;code&gt;dispatch&lt;/code&gt; 自体もmappingしないと &lt;code&gt;this.props.dispatch&lt;/code&gt; は使えないので &lt;code&gt;this.props.dispatch&lt;/code&gt; が必要な際は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;functiton mapDispatchToProps(dispatch) {
  return {
    dispatch,
    pushState: bindActionCreators(pushState, dispatch)
  };
}
@connect(null, mapDispatchToProps)
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、 &lt;code&gt;dispatch&lt;/code&gt; もmappingするような関数 ( &lt;code&gt;mapDispatchToProps&lt;/code&gt; ) を作り、 &lt;code&gt;connect&lt;/code&gt; の第二引数として渡す.&lt;/p&gt;

&lt;p&gt;このように &lt;code&gt;dispatch&lt;/code&gt; を内部で呼び出すAPI作る際は、&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; を経由して、 &lt;code&gt;this.props&lt;/code&gt; に組み込まれるよう作る.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Router</title>
      <link>/post/redux-router/</link>
      <pubDate>Wed, 23 Dec 2015 00:01:34 +0900</pubDate>
      
      <guid>/post/redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの紹介.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の23日目の記事.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;でRedux Routerの記事を見かけた気がするが、他所は気にしない.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h1&gt;

&lt;h2 id=&#34;about:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;はReact.jsでde facto standardとなっているRouting libraryの
&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;React RouterのRedux bindingsはReact RounterもReduxも抱えているOrganizationの&lt;a href=&#34;https://github.com/rackt&#34;&gt;rackt&lt;/a&gt;が作っている
&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;もあるが、Redux Routerの方が現時点でGitHubのStar数は多い.
(名前の通り、redux-simple-routerの方がよりsimpleで、Redux Routerはfatでcomplexだが機能は多い.)&lt;/p&gt;

&lt;img src=&#34;/images//20151222/rackt.gif&#34; alt=&#34;/20151222/rackt.gif&#34;&gt;


&lt;p&gt;これは&lt;a href=&#34;http://rackt.org/&#34;&gt;rackt.org&lt;/a&gt;. サイトではもっと綺麗にうねうねしてる.&lt;/p&gt;

&lt;h2 id=&#34;why:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;ReduxはStateの管理を容易に (一様に) するが、単体でReact Routerを使用すると、
Application上の重要なStateであるURLがReduxでの管理からはずれてしまう.&lt;br /&gt;
Redux RouterによりURLのStateもReduxで管理できる.&lt;/p&gt;

&lt;h2 id=&#34;usage:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;とりあえずReduxでApplicationを作って、そこにReact Routerを導入、最後にRedux Routerを導入する手順で紹介する.&lt;/p&gt;

&lt;h3 id=&#34;redux:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { dispatch, counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(incrCounter()); }}&amp;gt;
          INCREMENT
        &amp;lt;/button&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(decrCounter()); }}&amp;gt;
          DECREMENT
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;App /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images//20151222/initial-impl.gif&#34; alt=&#34;/20151222/initial-impl.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;@connect&lt;/code&gt; して &lt;code&gt;state.counter&lt;/code&gt; を表示し、その &lt;code&gt;state.counter&lt;/code&gt; を増減させるボタンがあるだけのApplicationで、とくに解説することはない.&lt;/p&gt;

&lt;h3 id=&#34;react-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;React Router&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mport React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect()
class CounterButton extends Component {
  static propTypes = {
    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
  }

  render() {
    const { dispatch } = this.props;
    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.type === &#39;incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;Router routes={routes} /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;/images//20151222/second-impl.gif&#34; alt=&#34;/20151222/second-impl.gif&#34;&gt;


&lt;p&gt;React Routerを導入して &lt;code&gt;Increment&lt;/code&gt; と &lt;code&gt;Decrement&lt;/code&gt; をRoutingで分けただけ.&lt;br /&gt;
共通で &lt;code&gt;CounterButton&lt;/code&gt; をrenderしていて、 &lt;code&gt;this.props.type&lt;/code&gt; でボタンがクリックされた時に、
&lt;code&gt;incrCounter()&lt;/code&gt; か &lt;code&gt;decrCounter()&lt;/code&gt; のどちらを &lt;code&gt;dispatch&lt;/code&gt; するか分岐している.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.props.type&lt;/code&gt; ではなく、&lt;strong&gt;URLというApplicationが持つState&lt;/strong&gt;で分岐させたいとする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; @connect()
 class CounterButton extends Component {
-  static propTypes = {
-    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
+  static contextTypes = {
+    location: React.PropTypes.object.isRequired
   }
 
   render() {
     const { dispatch } = this.props;
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.props.type === &#39;incr&#39;) {
+          if(this.context.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Increment extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
           TO DECREMENT
         &amp;lt;/Link&amp;gt;
       &amp;lt;/div&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Decrement extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/&#39;&amp;gt;
           TO INCREMENT
         &amp;lt;/Link&amp;gt;
       &amp;lt;/div&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;static contextTypes&lt;/code&gt; を定義して、 &lt;code&gt;this.context.location&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application全体のState&lt;/strong&gt;の管理に一貫性がなくなった.&lt;/p&gt;

&lt;h3 id=&#34;redux-router-1:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h3&gt;

&lt;p&gt;一貫性を取り戻すためにRedux Routerを導入する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import createHistory from &#39;history/lib/createHashHistory&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; const reducer = combineReducers({
+  router: routerStateReducer,
   counter: handleCounter
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-@connect()
+@connect(state =&amp;gt; {
+  return {
+    location: state.router.location
+  }
+})
class CounterButton extends Component {
-  static contextTypes = {
-    location: React.PropTypes.object.isRequired
-  }

   render() {
     const { dispatch } = this.props;
 
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.context.location.pathname === &#39;/incr&#39;) {
+          if(this.props.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
         }} &amp;gt;
         {this.props.children}
       &amp;lt;/button&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-const store = createStore(reducer);
+const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
-        &amp;lt;Router routes={routes} /&amp;gt;
+        &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順に解説する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;色々 &lt;code&gt;import&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combineReducers&lt;/code&gt; で &lt;code&gt;router:&lt;/code&gt; を &lt;code&gt;routerStateReducer&lt;/code&gt; がhandleするようset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; を &lt;code&gt;this.props.location&lt;/code&gt; とできるよう、 &lt;code&gt;@connect&lt;/code&gt; で &lt;code&gt;location:&lt;/code&gt; に &lt;code&gt;state.router.location&lt;/code&gt; をset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; の代わりに &lt;code&gt;this.props.location&lt;/code&gt; を使用.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; でwrapして、 &lt;code&gt;router&lt;/code&gt; のStateを &lt;code&gt;store&lt;/code&gt; で管理するようにする.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createBrowserHistory&lt;/code&gt; を使用して、 &lt;code&gt;&amp;lt;Router history={history} /&amp;gt;&lt;/code&gt; をしていた場合は、 &lt;code&gt;createBrowserHistory&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; の第二引数に渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ReduxRouter history={history} /&amp;gt;&lt;/code&gt; とはしない.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Router routes={routes} /&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;ReduxRouter /&amp;gt;&lt;/code&gt; で置き換える.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでReduxでURLのStateも &lt;code&gt;router&lt;/code&gt; として管理できるようになった.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;秩序を取り戻した. ╭( ･ㅂ･)و&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Fetch Action</title>
      <link>/post/redux-fetch-action/</link>
      <pubDate>Tue, 15 Dec 2015 12:53:17 +0900</pubDate>
      
      <guid>/post/redux-fetch-action/</guid>
      <description>

&lt;p&gt;Redux Fetch ActionというReduxのFetch actionのutilityを作った.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の15日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/h1&gt;

&lt;h2 id=&#34;why:204c7e295a840c149fff4b9b8d704763&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;最近&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;を使っているが、DataのFetchが似たようなAction creatorとReducerのpatternになったので、
切り出してpublishした. (&lt;code&gt;POST&lt;/code&gt; もFetchかよって違和感はある.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FluxのActionには&lt;a href=&#34;https://github.com/acdlite/flux-standard-action&#34;&gt;非公式のCoding規約&lt;/a&gt;があるらしく、
それに則るため&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;をbaseとしている.&lt;/p&gt;

&lt;h2 id=&#34;api:204c7e295a840c149fff4b9b8d704763&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;APIは &lt;code&gt;createFetchAction&lt;/code&gt; と &lt;code&gt;handleFetchAction&lt;/code&gt; がある.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createFetchAction&lt;/code&gt; はAction creatorを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FETCH_DATA = &#39;FETCH_DATA&#39;;
const fetchAction = createFetchAction(FETCH_DATA, &#39;/data.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleFetchAction&lt;/code&gt; はReducerを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
const reducer = handleFetchAction(FETCH_DATA, {
  request: (state = {}, action) =&amp;gt; {
    return state;
  },
  receive: (state = {}, action) =&amp;gt; {
    return action.payload;
  },
  error: (satet = {}, action) =&amp;gt; {
    return state;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;h2 id=&#34;example:204c7e295a840c149fff4b9b8d704763&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;二つのAPIを合わせ、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;;
import thunk from &#39;redux-thunk&#39;;
import { handleActions } from &#39;redux-actions&#39;;
import { createFetchAction, handleFetchAction } from &#39;redux-fetch-action&#39;;
import { Server }from &#39;node-static&#39;;
import { createServer } from &#39;http&#39;;

const file = new Server();
createServer((request, response)  =&amp;gt; {
  request.addListener(&#39;end&#39;, () =&amp;gt; {
    file.serve(request, response);
  }).resume();
}).listen(8080);

const FETCH1 = &#39;FETCH1&#39;;
const FETCH2 = &#39;FETCH2&#39;;
const FETCH3 = &#39;FETCH3&#39;;

const reducer1 = handleFetchAction(FETCH1, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 1&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 1&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 1&#39;);
    return posts;
  }
});

const reducer2 = handleFetchAction(FETCH2, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 2&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 2&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 2&#39;);
    return posts;
  }
});

const reducer3 = handleFetchAction(FETCH3, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 3&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 3&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 3&#39;);
    return posts;
  }
});

const reducer = handleActions({
  FETCH1: reducer1,
  FETCH2: reducer2,
  FETCH3: reducer3
}, {});

const store = applyMiddleware(
  thunk
)(createStore)(reducer);

const fetchAction1 = createFetchAction(FETCH1, &#39;http://localhost:8080/data.json&#39;);
const fetchAction2 = createFetchAction(FETCH2, &#39;http://localhost:8080/sample.html&#39;);
const fetchAction3 = createFetchAction(FETCH3, &#39;http://localhost:8080/unknown.json&#39;);

store.dispatch(fetchAction1());
store.dispatch(fetchAction2());
store.dispatch(fetchAction3());

/*
REQUEST 1
REQUEST 2
REQUEST 3
ERROR 3
RECEIVED 1
{ posts:
   [ { id: 1, text: &#39;Sample text 1&#39; },
     { id: 2, text: &#39;Sample text 2&#39; } ] }
RECEIVED 2
&amp;lt;div&amp;gt;
  sample
&amp;lt;/div&amp;gt;
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにFetchのhandleができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasuhiro-okada-aktsk/items/a14f7f37262fb6cf0bf8&#34;&gt;Redux: Actionのコーディング規約 と redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Bootstrap Star Rating</title>
      <link>/post/react-bootstrap-star-rating/</link>
      <pubDate>Sun, 13 Dec 2015 23:00:37 +0900</pubDate>
      
      <guid>/post/react-bootstrap-star-rating/</guid>
      <description>

&lt;p&gt;React Bootstrap Star Ratingを作った.&lt;/p&gt;

&lt;p&gt;作ったので軽く紹介する.&lt;br /&gt;
GitHubは&lt;a href=&#34;https://github.com/Rudolph-Miller/react-bootstrap-star-rating&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-bootstrap-star-rating:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-bootstrap-star-rating:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;React Bootstrap Star Rating&lt;/h1&gt;

&lt;p&gt;作り始めた動機はあるプロジェクトでBowerでjQueryが使われており、
commitするにあたってそれらを殲滅しnpmとReactを導入しようと思ったが、
どうもReactには良い感じのStar rating libraryが無かったから.&lt;/p&gt;

&lt;h2 id=&#34;star-rating-in-react:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Star Rating in React&lt;/h2&gt;

&lt;p&gt;npmのdownload statsで一番だったのは&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;react-star-rating&lt;/a&gt; (939 downloads in the last month) で、
それ以外はほとんど使われていないようだった.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;react-star-rating&lt;/a&gt;はどうかというと、GitHubのcommitはa month agoで&lt;a href=&#34;http://cameronjroe.com/react-star-rating/&#34;&gt;Project page&lt;/a&gt;もあり、
ある程度は開発されていそうだったが、どうも件のProjectのowner曰くstyleがイケていないらしい.&lt;/p&gt;

&lt;img src=&#34;/images//20151213/react-star-rating.png&#34; alt=&#34;/20151213/react-star-rating.png&#34;&gt;


&lt;p&gt;ということで、件のProjectで使用していたjQuery pluginをReactでwrapして使うことした.
(&lt;a href=&#34;http://plugins.krajee.com/star-rating/demo&#34;&gt;DEMO&lt;/a&gt;をみる限り、色々customizableっぽい.)&lt;/p&gt;

&lt;img src=&#34;/images//20151213/bootstrap-star-rating.gif&#34; alt=&#34;/20151213/bootstrap-star-rating.gif&#34;&gt;


&lt;h2 id=&#34;wrap-jquery-plugin:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Wrap jQuery plugin&lt;/h2&gt;

&lt;p&gt;作ったといってもjQuery pluginをwrapしただけ (どうもnpmにpublishしていなかっただけで、package.jsonはあった.) なので、
wrapする際の常套patternを軽く紹介する.&lt;/p&gt;

&lt;h3 id=&#34;dom-node:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;DOM node&lt;/h3&gt;

&lt;p&gt;jQuery pluginなのでDOM nodeに対して操作を行う.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#rating&#39;).rating();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをReactで実装する際は &lt;code&gt;ref&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class StarRating extends Component {
  componentDidMount() {
    $node.rating();
  }

  render() {
    return (
      &amp;lt;input
        ref={node =&amp;gt; { this.$node = $(node); }} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-api:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Export API&lt;/h3&gt;

&lt;p&gt;今回の&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;bootstrap-star-rating&lt;/a&gt;は強制にvalueをupdateするAPIがあった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#rating&#39;).rating(&#39;update&#39;, 5);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをReactで実装する際は &lt;code&gt;method&lt;/code&gt; として定義して、 &lt;code&gt;ref&lt;/code&gt; を通して呼び出す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class StarRating extends Component {
  componentDidMount() {
    $node.rating();
  }

  render() {
    return (
      &amp;lt;input
        ref={node =&amp;gt; { this.$node = $(node); }} /&amp;gt;
    );
  }

  update(value) {
    $node.rating(&#39;update&#39;, value);
  }
}

class App extends Component {
  componentDidMount() {
    setTimeout(() =&amp;gt; {
      this.starRating.update(5);
    }, 1000);
  }

  render() {
    return (
      &amp;lt;StarRating
        ref={ref =&amp;gt; { this.starRating = ref; }} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;result:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;簡単にwrapして別のLibraryとして切り出しただけなのでjQueryを無くせたわけでは無いが、&lt;br /&gt;
直接の依存からはremoveできるようになったので心のざわつきは無くせたかな.&lt;/p&gt;

&lt;h1 id=&#34;see-also:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react-bootstrap-star-rating&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plugins.krajee.com/star-rating&#34;&gt;Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kartik-v/bootstrap-star-rating&#34;&gt;bootstrap-star-rating&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Redux Rails</title>
      <link>/post/react-redux-rails/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:06 +0900</pubDate>
      
      <guid>/post/react-redux-rails/</guid>
      <description>

&lt;p&gt;React.js &amp;amp; Redux &amp;amp; Ruby on Railsでserver-side rendering.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;の10日目の記事であり、&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の10日目の記事です. (欲張り.)&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/h1&gt;

&lt;h2 id=&#34;react-js:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React.js&lt;/h2&gt;

&lt;p&gt;React.jsはFacebook製のJavaScriptのUI Library.&lt;br /&gt;
Viewの状態管理をさぼれる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/reactjs&#34;&gt;一人React.js Advent Calendar 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;redux:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Redux&lt;/h2&gt;

&lt;p&gt;Reduxは今一番熱いFlux architecture frameworkで状態管理をatomitにする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amagitakayosi.hatenablog.com/entry/2015/07/30/000000&#34;&gt;人気のFluxフレームワークReduxをさわってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;react-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;react-rails&lt;/h2&gt;

&lt;p&gt;Ruby on RailsにはReact.jsのserver-side renderingを容易にするGemがある.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, name: &#39;John&#39;) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにViewにReact.jsのComponentを埋め込むことができる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react_component&lt;/code&gt; の3つ目の引数として &lt;code&gt;{prerender: true}&lt;/code&gt; を渡すだけで、server-side renderingができる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, {name: &#39;John&#39;}, {prerender: true}) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Hello, John!&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/joe-re/items/96f12dda4a62470d1d7c&#34;&gt;react-railsを使ってReactのTutorialをやってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;try:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Try&lt;/h2&gt;

&lt;p&gt;これらを合わせて、Reduxで状態管理をして、ReactでComponentを組み立て、Ruby on Railsでserver-side renderingをしてみた.&lt;/p&gt;

&lt;p&gt;BaseのAppはReduxのBasic tutorialになっている&lt;a href=&#34;http://rackt.org/redux/docs/basics/ExampleTodoList.html&#34;&gt;tiny todo app&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;Root&#39;, {presetTodos: @todos}, {prerender: true}) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/views/todos/index.html.erb#L1&#34;&gt;app/views/todos/index.html.erb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;とRuby on RailsのViewに埋め込むことにより、初回は server-side renderingで &lt;code&gt;@todos&lt;/code&gt; を &lt;code&gt;props&lt;/code&gt; に渡して &lt;code&gt;componentDidMount&lt;/code&gt; でDataをsetし、
それ以外で &lt;code&gt;Root&lt;/code&gt; をrenderした時は &lt;code&gt;componentDidMount&lt;/code&gt; でDataをfetchする.&lt;br /&gt;
(今回のExampleではこの遷移は実装していないが、 &lt;code&gt;{presetTodos: @todos}&lt;/code&gt; をはずぜばこの挙動となる.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;componentDidMount() {
	const { dispatch, presetTodos } = this.props;
	if (presetTodos) {
		dispatch(setTodos(presetTodos));
	} else {
		dispatch(fetchTodos());
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/containers/App.js#L38-L45&#34;&gt;app/assets/javascripts/containers/App.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;軽くポイントを掻い摘む.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScriptのLibrary管理はnpmでbrowserify-railsを使ってBabelでbuildした.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application.js&lt;/code&gt; は &lt;code&gt;//= require react_ujs&lt;/code&gt; と &lt;code&gt;//= require components&lt;/code&gt; のみ. (&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/c07553236da0464393fccf75ecb6a3d61f48b4e2/app/assets/javascripts/application.js#L1-L2&#34;&gt;app/assets/javascripts/application.js&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Babel 6だとDecorationが未supportだったため、Babel 5を使用した. (&lt;a href=&#34;http://phabricator.babeljs.io/T2645&#34;&gt;Implement new decorator proposal when finalized&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReduxでAsync.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rackt.org/redux/docs/advanced/AsyncActions.html&#34;&gt;Async Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/actions/index.js#L34-L54&#34;&gt;app/assets/javascripts/actions/index.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくはSourceに.
質問があればTwitterで &lt;a href=&#34;https://twitter.com/Rudolph_Miller&#34;&gt;#Rudolph_Miller&lt;/a&gt; に聞いて下さい.&lt;/p&gt;

&lt;p&gt;意外とすんなり書け、すんなり動いたので、どこかで実戦投入したいと思う.&lt;/p&gt;

&lt;h1 id=&#34;see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/flux&#34;&gt;Flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;browserify-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Native on Android device</title>
      <link>/post/react-native-on-android-device/</link>
      <pubDate>Wed, 16 Sep 2015 10:06:16 +0900</pubDate>
      
      <guid>/post/react-native-on-android-device/</guid>
      <description>

&lt;p&gt;React Native for Androidを実機で動かす.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#run-on-device:60c6196952e7045685a1de9e62046e9b&#34;&gt;Run on device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:60c6196952e7045685a1de9e62046e9b&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;run-on-device:60c6196952e7045685a1de9e62046e9b&#34;&gt;Run on device&lt;/h2&gt;

&lt;p&gt;まずUSB Debugging ModeをONにする.&lt;/p&gt;

&lt;p&gt;するとAndroid端末を開発機にUSBで接続して、&lt;code&gt;react-native run-android&lt;/code&gt;を実行すると、
端末にApplicationのインストールが可能と起動が可能となる.&lt;/p&gt;

&lt;p&gt;そしてこの真っ赤なエラー画面に遭遇して面食らう.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/20150916/error.png&#34; alt=&#34;Error on device&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なにが起こっているか.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.android.bundle&lt;/code&gt;を&lt;code&gt;localhost:8081&lt;/code&gt;から取ってこようとして、接続できなくエラーとなっている.
つまりbundleしたJavaScriptファイルを開発機から取ってこようとして失敗したと.&lt;/p&gt;

&lt;p&gt;そのため開発サーバーに接続すれば良く、とりあえず2通りの方法がある.&lt;/p&gt;

&lt;h3 id=&#34;using-adb-reverse:60c6196952e7045685a1de9e62046e9b&#34;&gt;Using adb reverse&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;adb reverse&lt;/code&gt;を使用して、端末の&lt;code&gt;tcp:8081&lt;/code&gt;で開発機の&lt;code&gt;tpc:8081&lt;/code&gt;を参照できるようにする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb reverse tcp:8081 tcp:8081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで他の設定を変更することなく端末上で&lt;code&gt;Reload JS&lt;/code&gt;などの開発オプションが使用できるようになる.&lt;/p&gt;

&lt;h3 id=&#34;configure-device-to-connect-to-the-dev-server-via-wi-fi:60c6196952e7045685a1de9e62046e9b&#34;&gt;Configure device to connect to the dev server via Wi-Fi&lt;/h3&gt;

&lt;p&gt;端末の&lt;code&gt;Dev Settings&lt;/code&gt;で&lt;code&gt;Debug server host&lt;/code&gt;の設定を変更する.
この方法で開発機に接続するためには端末と開発機が同じWi-Fiに接続している必要がある.&lt;/p&gt;

&lt;p&gt;Applicationで&lt;code&gt;menu&lt;/code&gt;を表示する.
(端末のメニューボタンを押すかApplicationを開いた状態で端末を振ると表示される.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dev Settings&lt;/code&gt;、&lt;code&gt;Debug server host for device&lt;/code&gt;と遷移し、開発機のIPアドレスを入力する.&lt;br /&gt;
(OS XのIPアドレスは&lt;code&gt;システム環境設定&lt;/code&gt;、&lt;code&gt;ネットワーク&lt;/code&gt;と遷移して、接続中のネットワークのタブで確認できる.)&lt;/p&gt;

&lt;p&gt;すると端末上で&lt;code&gt;Reload JS&lt;/code&gt;などの開発オプションが使用できるようになる.&lt;/p&gt;

&lt;h2 id=&#34;see-also:60c6196952e7045685a1de9e62046e9b&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/running-on-device-android.html&#34;&gt;Running On Device(Android)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/tools/device.html&#34;&gt;Using Handware Devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup React Native for Android</title>
      <link>/post/setup-react-native-for-android/</link>
      <pubDate>Tue, 15 Sep 2015 10:39:31 +0900</pubDate>
      
      <guid>/post/setup-react-native-for-android/</guid>
      <description>

&lt;p&gt;OS XでのReact Native for Androidのセットアップを紹介.&lt;/p&gt;

&lt;p&gt;ようやくReact Native for Androidが公開されたので、
まずはOS Xでのセットアップを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#install-and-configure-sdk:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and configure SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-and-run-android-stock-emulator:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and run Android stock emulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;install-and-configure-sdk:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and configure SDK&lt;/h2&gt;

&lt;p&gt;SDKのインストールと設定をする.&lt;/p&gt;

&lt;p&gt;まずは&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;JDK&lt;/a&gt;の最新版をインストール.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;android-sdk&lt;/code&gt;を&lt;code&gt;brew&lt;/code&gt;でインストールします.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install android-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ANDROID_HOME=/usr/local/opt/android-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を&lt;code&gt;~/.zshrc&lt;/code&gt;又は&lt;code&gt;~/.bashrc&lt;/code&gt;に追加し再読み込み.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source ~/.zshrc
# source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Android SDK Manager&lt;/code&gt;を起動.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Android SDK Build-tools version 23.0.1&lt;/li&gt;
&lt;li&gt;Android 6.0 (API 23)&lt;/li&gt;
&lt;li&gt;Android Support Repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にチェックを入れて&lt;code&gt;Install Packages&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;install-and-run-android-stock-emulator:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and run Android stock emulator&lt;/h2&gt;

&lt;p&gt;Android emulatorをインストールして起動する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;Android SDK Manager&lt;/code&gt;を起動して&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intel x86 Atom System Image (for Android 5.1.1 - API 22)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Android 5.1.1 (API 22)&lt;/code&gt;のタブ中にあるので注意.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intel x86 Emulator Accelerator (HAXM installer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にチェックを入れて&lt;code&gt;Install Packages&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configure-haxm:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Configure HAXM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/tools/devices/emulator.html#vm-mac&#34;&gt;HAXM&lt;/a&gt;の設定をする.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open /usr/local/Cellar/android-sdk/24.3.4/extras/intel/Hardware_Accelerated_Execution_Manager/IntelHAXM_1.1.4.dmg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IntelHAXM_1.1.4.mpkg&lt;/code&gt;をダブルクリックし、画面の指示に従ってインストールする.&lt;/p&gt;

&lt;p&gt;インストール終了後、新しい&lt;code&gt;kernel extension&lt;/code&gt;が正しく処理されていることを確認するため、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kextstat | grep intel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行し&lt;code&gt;com.intel.kext.intelhaxm&lt;/code&gt;が表示されることを確認する.&lt;/p&gt;

&lt;p&gt;これでHAXMの設定は完了.&lt;/p&gt;

&lt;h3 id=&#34;run-android-emulator:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Run Android emulator&lt;/h3&gt;

&lt;p&gt;Android emulatorを起動する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android avd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でAVD Managerを立ち上げ&lt;code&gt;Create...&lt;/code&gt;でAVDを作成し&lt;code&gt;Start...&lt;/code&gt;でEmulatorを立ち上げる.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/20150915/CreateAVD.png&#34; alt=&#34;Create AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;又はすでに&lt;code&gt;~/.android/avd/&lt;/code&gt;に&lt;code&gt;.avd&lt;/code&gt;ファイルがあれば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ls ~/.android/avd/
# =&amp;gt; Nexus_5_API_23_x86.avd Nexus_5_API_23_x86.ini
emulator -avd Nexus_5_API_23_x86
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でファイル名を指定してEmulatorを起動できる.&lt;/p&gt;

&lt;h2 id=&#34;setup:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;最後にReact Native本体のセットアップをする.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;NVM&lt;/a&gt;や&lt;a href=&#34;https://github.com/wfarr/nodenv&#34;&gt;nodenv&lt;/a&gt;
などで&lt;code&gt;io.js 1.0 or newer&lt;/code&gt;を準備する.&lt;br /&gt;
(今回はnodenvとNode.js v4.0.0を使用.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nodenv install v4.0.0
# nodenv global v4.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;npmでコマンドラインインターフェースの&lt;code&gt;react-native-cli&lt;/code&gt;をインストールする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g react-native-cli
# nodenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると&lt;code&gt;react-native&lt;/code&gt;コマンドが使用可能になるので、適当なディレクトリで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;react-native init AwesomeProject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると、iOS用に&lt;code&gt;AwesomeProject/iOS/AwesomeProject.xcodeproj&lt;/code&gt;と&lt;br /&gt;
Android用に&lt;code&gt;AwesomeProject/android/app&lt;/code&gt;とが生成される.&lt;/p&gt;

&lt;p&gt;後は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd AwesomeProject
react-native run-android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でEmulator又は(接続してsetupしていれば)実機でApplicationが立ち上がる.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/20150915/welcome-to-react-native.png&#34; alt=&#34;Welcome to React Native&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;see-also:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/getting-started.html#content&#34;&gt;Getting Started - React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/android-setup.html&#34;&gt;Android Setup - React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/tutorial.html#content&#34;&gt;Tutorial - React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.facebook.com/posts/1189117404435352&#34;&gt;React Native for Android: How we built the first cross-platform React Native app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>