<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech Talk on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/tags/tech-talk/</link>
    <description>Recent content in Tech Talk on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2015 Rudolph Miller</copyright>
    <lastBuildDate>Sun, 01 Nov 2015 22:38:10 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/tags/tech-talk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tech Talk About Lisp</title>
      <link>http://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/</link>
      <pubDate>Sun, 01 Nov 2015 22:38:10 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/</guid>
      <description>&lt;p&gt;社内のTech Talk #4でLispについて発表した.&lt;/p&gt;

&lt;p&gt;LispやS-expressionについての軽い話をした.&lt;br /&gt;
LispとCommin Lispをごっちゃに扱っているのはワザと.&lt;br /&gt;
たぶんTalkがないとよくわからない部分が多いだろうけど公開しておく.
&lt;iframe
  class=&#34;iframe-slide&#34;
  src=&#34;http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/&#34;
  width=&#34;100%&#34;
  style=&#34;border-width: 1px&#34;&gt;
&lt;/iframe&gt;
&lt;script&gt;
  (function () {
    function init () {
      var slides = document.getElementsByClassName(&#39;iframe-slide&#39;);
      for (var index = 0, len = slides.length; index &lt; len; index++) {
        var slide = slides[index];
        var width = slide.offsetWidth;
        var height = width * 3 / 4;
        slide.height = height;
      }
    }
    init();
    window.addEventListener(&#39;resize&#39;, init);
  })()
&lt;/script&gt;
&lt;a href=&#34;http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/&#34; target=&#34;_blank&#34;&gt;Slide&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Lisp</title>
      <link>http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</link>
      <pubDate>Thu, 29 Oct 2015 00:34:45 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</guid>
      <description>

&lt;p&gt;layout: true
name: center
class: middle, center&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
name: lisp
class: center, middle, lisp&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;tech-talk-4:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Tech Talk #4&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;rudolph-miller:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;@Rudolph-Miller&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/favicon.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( &lt;a href=&#34;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&#34;&gt;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&lt;/a&gt; )&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;common-lisper:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Common Lisper&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp??&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false&lt;/p&gt;

&lt;p&gt;.center[&lt;/p&gt;

&lt;h2 id=&#34;search-on-google-ja:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Search on google (ja)&lt;/h2&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/search.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;ｌｉｓｐ-は超至近距離アイドル:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「ＬＩＳＰ」は超至近距離アイドル&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;キミとセツゾク-が合言葉:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「キミとセツゾク」が合言葉&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-idle.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/polnareff.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-alien.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- 1958
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- John McCarthy
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Dynamic and strong typing
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Multiparadigm
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- S-expression and Polish Notation
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Coherence
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Code is made up of first-class object
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-2:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
.red[
- 1958
]
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;1958:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;1958&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages1.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages2.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages3.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages4.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/languages5.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;class: bottom, center&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/languages6.png )&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h3 id=&#34;only-fortran-is-older:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;only FORTRAN is older&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-3:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
.red[
- John McCarthy
]
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;john-mccarthy:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;John McCarthy&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;h1 id=&#34;the-father-of-ai:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;the father of AI&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;h1 id=&#34;invented-garbage-collection:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;invented Garbage Collection&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-4:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
.red[
- Dynamic and strong typing
]
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false
template: lisp&lt;/p&gt;

&lt;h1 id=&#34;dynamic-and-strong-typing:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Dynamic and strong typing&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing1.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing2.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-5:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
.red[
- Multiparadigm
]
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;multiparadigm:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Multiparadigm&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;imperative:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Imperative&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;object-oriented:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Object-oriented&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;functional:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Functional&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-6:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
.red[
- S-expression and Polish Notation
]
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;s-expression-and-polish-notation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression and Polish Notation&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;h2 id=&#34;red-l-ots-of-red-i-rritating-red-s-uperfluous-red-p-arentheses:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;.red[L]ots of .red[I]rritating .red[S]uperfluous .red[P]arentheses&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-keyboard.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;s-expression-is-ast:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression is AST.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
template: center&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;1 + 3 * 2
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/ast.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(+ 1 (* 3 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;wait:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Wait!&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ast-is-for-program:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;AST is for program,&lt;/h2&gt;

&lt;h2 id=&#34;not-for-human:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;not for human.&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;we-are-human:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;We are human,&lt;/h2&gt;

&lt;h2 id=&#34;and-think-in-natural-language:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;and think in natural language.&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;really:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Really??&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;when-you-think-of-algorithm:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;When you think of algorithm,&lt;/h2&gt;

&lt;h2 id=&#34;do-you-really-think-in-natural-language:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;do you really think in natural language ?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;no:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;in-the-more-abstract:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;In the more abstract&lt;/h1&gt;

&lt;h2 id=&#34;like-tree-or-graph:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;like tree or graph.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;s-expression-is:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression is&lt;/h2&gt;

&lt;h2 id=&#34;the-more-appropriate-method:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;the more appropriate method.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bnf&#34;&gt;&amp;lt;S-exp&amp;gt; ::= &amp;lt;List&amp;gt; | &amp;lt;Atom&amp;gt; 
&amp;lt;List&amp;gt;  ::= (&amp;lt;S-exp&amp;gt;*) 
&amp;lt;Atom&amp;gt;  ::= &amp;lt;Symbol&amp;gt; | &amp;lt;Number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun add1 (num1 num2)
  (+ num1 num2))

(add1 (add1 1 2) 3)
;; =&amp;gt; 6

(reduce #&#39;add1 (list 1 2 3))
;; =&amp;gt; 6

(defun add2 (&amp;amp;rest args)
  (reduce #&#39;add args))

(add2 1 2 3)
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false&lt;/p&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-7:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
.red[
- Coherence
]
]
.right-column[
- Code is made up of first-class object
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Coherence&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;no-difference-between-statement-and-expression:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No difference between Statement and Expression.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun sample (bool)
  (if (if (null bool) false true)
    (print true)
    (print false)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-8:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
.red[
- Code is made up of first-class object
]
]
.right-column[
- The whole language is always available
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;code-is-made-up-of-first-class-object:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Code is made up of first-class object&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Code
(defun add1 (num1 num2)
  (+ num1 num2))

;; Data
(list &#39;defun &#39;add1 (list &#39;num1 num2)
  (list &#39;+ &#39;num1 &#39;num2))

&#39;(defun add1 (num1 num2)
  (+ num1 num2))

;; REPL
(eval
 &#39;(defun add1 (num1 num2)
    (+ num1 num2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-9:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]
.right-column[
- 1958
]
.right-column[
- John McCarthy
]
.right-column[
- Dynamic and strong typing
]
.right-column[
- Multiparadigm
]
.right-column[
- S-expression and Polish Notation
]
.right-column[
- Coherence
]
.right-column[
- Code is made up of first-class object
]
.right-column[
.red[
- The whole language is always available
]
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;the-whole-language-is-always-available:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;The whole language is always available&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;you-can-compile-or-run-code-while-reading-read-or-run-code-while-compiling-and-read-or-compile-code-at-runtime:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.&lt;/h2&gt;

&lt;p&gt;quoted from &amp;ldquo;&lt;a href=&#34;http://www.paulgraham.com/diff.html&#34;&gt;What Made Lisp Different&lt;/a&gt;&amp;rdquo; by Paul Graham&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
template: center&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while reading
(defun char-code-a-p (int)
  (= int #.(char-code #\a)))

(defun char-code-a-p (int)
  (= int 97))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while compiling
(defun include-p-1 (string char)
  (when (find char string) t))

(defmacro include-p-2 (string char)
  (let ((hash (make-hash-table)))
    (loop for c across string
      (setf (gethash c hash) t))
    `(gethash ,char ,hash)))

(defun time-of-include-p-1 ()
  (time (loop repeat 10000000 do (include-p-1 &amp;quot;sample&amp;quot; #\a))))

(defun time-of-include-p-2 ()
  (time (loop repeat 10000000 do (include-p-2 &amp;quot;sample&amp;quot; #\a))))

(time-of-include-p-1)
;; 0.495 seconds of real time
;; 1,336,787,055 processor cycles

(time-of-include-p-2)
;; 0.003 seconds of real time
;; 8,880,960 processor cycles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; compile code at runtime
(defun define-add-some (some)
  (eval
   `(defun add-some (int)
      (+ int ,some))))

(define-add-some 10)
;; add-some

(add-some 2)
;; =&amp;gt; 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;layout: true
template: lisp&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;finally:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Finally,&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;why-lisp-why-s-expression:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Why Lisp?? Why S-expression??&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;because:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Because&amp;hellip;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;simple-and-coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Simple and Coherence.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;no-translation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Translation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;no-limitation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;No Limitation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;and:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;and&amp;hellip;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;god-wrote-in-lisp-code:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;God wrote in Lisp code&lt;/h1&gt;

&lt;h1 id=&#34;every-creature-great-and-small:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Every creature great and small.&lt;/h1&gt;

&lt;p&gt;quoted from &lt;a href=&#34;http://www.gnu.org/fun/jokes/eternal-flame.html&#34;&gt;Eternal Flame&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;think-in-lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Think in Lisp,&lt;/h1&gt;

&lt;h1 id=&#34;think-as-transcendence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Think as Transcendence.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;human-is-freed-from:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Human is freed from&lt;/h1&gt;

&lt;h1 id=&#34;all-the-limitations:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;all the limitations.&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;so:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;so&amp;hellip;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lisp-is-s-expression-is:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp is (S-expression is)&lt;/h1&gt;

&lt;h1 id=&#34;a-method-of-salvation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;a method of salvation.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: center&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/angel7.jpg )&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>