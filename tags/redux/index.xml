<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redux on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/tags/redux/</link>
    <description>Recent content in Redux on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; Copyright 2015 Rudolph Miller</copyright>
    <lastBuildDate>Fri, 25 Dec 2015 12:34:52 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/tags/redux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pushState in Redux Router</title>
      <link>http://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/</link>
      <pubDate>Fri, 25 Dec 2015 12:34:52 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; の使い方と、 &lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; について、
&lt;code&gt;connect&lt;/code&gt; のSource codeを追いながら解説.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;は&lt;a href=&#34;htpp://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;前回&lt;/a&gt;で紹介した通り、
React.jsでde facto standardとなっているRouting libraryの&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;h1 id=&#34;pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; はReact RouterでURLを遷移するAPIで、元はBrowserのHistory API.
Redux Routeの &lt;code&gt;pushState&lt;/code&gt; はこれをwrapしたもの.&lt;/p&gt;

&lt;h1 id=&#34;usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/redux-router&#34;&gt;前回&lt;/a&gt;で使ったApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  router: routerStateReducer,
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect(state =&amp;gt; {
  return {
    location: state.router.location
  }
})
class CounterButton extends Component {
  render() {
    const { dispatch } = this.props;

    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.location.pathname === &#39;/incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;http://blog.rudolph-miller.com/images//20151225/without-push-state.gif&#34; alt=&#34;/20151225/without-push-state.gif&#34;&gt;


&lt;p&gt;これに &lt;code&gt;pushState&lt;/code&gt; で、 &lt;code&gt;/decr&lt;/code&gt; を1秒後に &lt;code&gt;/incr&lt;/code&gt; にredirectするという無駄な機能をつける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter, pushState } from &#39;redux-router&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+@connect(null, { pushState })
class Decrement extends Component {
+  componentDidMount() {
+    const { pushState } = this.props;
+
+    setTimeout(() =&amp;gt; {
+      pushState(null, &#39;/incr&#39;);
+    }, 1000)
+  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;http://blog.rudolph-miller.com/images//20151225/with-push-state.gif&#34; alt=&#34;/20151225/with-push-state.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; をRedux Routerから &lt;code&gt;import&lt;/code&gt; し、 &lt;code&gt;pushState&lt;/code&gt; を &lt;code&gt;connect&lt;/code&gt; の第二引数に &lt;code&gt;{ pushState: pushState }&lt;/code&gt; の形で渡し、
&lt;code&gt;componentDidMount&lt;/code&gt; の中で &lt;code&gt;setTimeout&lt;/code&gt; を使って &lt;code&gt;this.props.pushState&lt;/code&gt; を呼んでいる.&lt;/p&gt;

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; は &lt;a href=&#34;https://github.com/acdlite/redux-router/blob/master/src/actionCreators.js#L56&#34;&gt;ここ&lt;/a&gt;で定義されていて、どうもAction creatorのようだ.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の第二引数って何だろう.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;react-redux&lt;/a&gt;のTutorialの &lt;code&gt;connect&lt;/code&gt; の解説にこう書いてある.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases you will only pass the first argument to connect(), which is a function we call a selector.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ほとんどの場合、第一引数しか使わないらしい.&lt;/p&gt;

&lt;p&gt;仕方ないので&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24&#34;&gt;Source code&lt;/a&gt;を読むと、 &lt;code&gt;mapDispatchToProps&lt;/code&gt; と呼ぶものらしい.&lt;/p&gt;

&lt;h1 id=&#34;mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h1&gt;

&lt;p&gt;もう少し &lt;code&gt;mapDispatchToProps&lt;/code&gt; を追ってみる.&lt;/p&gt;

&lt;h2 id=&#34;connect:5ffab360503358b5e43ebafcc74ab758&#34;&gt;connect&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24-L275&#34;&gt;ここ&lt;/a&gt;だが、簡単に言うと、4つの引数をとって、1つの引数をとる関数を返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default function connect(mapStateToProps, mapDispatchToProps, mergeProps, options = {}) {
  return function wrapWithConnect(WrappedComponent) {
    class Connect extends Component {
      render() {
        return createElement(WrappedComponent, this.mergeProps);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-1:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; なら &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされて、 &lt;code&gt;Object&lt;/code&gt; でないならそのままで、 &lt;code&gt;finalMapDispatchToProps&lt;/code&gt; に入る.
&lt;code&gt;mapDispatchToProps&lt;/code&gt; として何も渡さなかった場合は &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; がdefaultで入るようになっている. &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて、 &lt;code&gt;dispatch&lt;/code&gt; を受け取り &lt;code&gt;{ dispatch: dispatch }&lt;/code&gt; として返している.&lt;/p&gt;

&lt;h2 id=&#34;wrapactioncreators:5ffab360503358b5e43ebafcc74ab758&#34;&gt;wrapActionCreators&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt; が &lt;code&gt;Object&lt;/code&gt; だったときは &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされるが、 &lt;code&gt;wrapActionCreators&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/utils/wrapActionCreators.js#L3&#34;&gt;ここ&lt;/a&gt;にあり、 Reduxの &lt;code&gt;bindActionCreators&lt;/code&gt; を呼んでいる.
&lt;code&gt;bindActionCreators&lt;/code&gt; は引数が &lt;code&gt;Object&lt;/code&gt; の時は、その &lt;code&gt;values&lt;/code&gt; にたいして &lt;code&gt;bindActionCreator&lt;/code&gt; を &lt;code&gt;map&lt;/code&gt; している. &lt;code&gt;bindActionCreator&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function bindActionCreator(actionCreator, dispatch) {
  return (...args) =&amp;gt; dispatch(actionCreator(...args));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;actionCreator&lt;/code&gt;を与えられた引数で呼んで、 &lt;code&gt;dispatch&lt;/code&gt; する関数を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMapDispatchToProps&lt;/code&gt; は &lt;code&gt;computeDispatchProps&lt;/code&gt; の中で &lt;code&gt;dispatch&lt;/code&gt; を引数として呼ばれており、その返り値が &lt;code&gt;Connect#updateDispatchPropsIfNeeded&lt;/code&gt; の中で &lt;code&gt;this.dispatchProps&lt;/code&gt; に入る. この &lt;code&gt;this.dispatchProps&lt;/code&gt; は &lt;code&gt;Connect#updateMergedProps&lt;/code&gt; で &lt;code&gt;computeMergedProps&lt;/code&gt; を通して &lt;code&gt;this.mergedProps&lt;/code&gt; に入る.&lt;/p&gt;

&lt;h2 id=&#34;computemergedprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;computeMergedProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;computeMergedProps&lt;/code&gt; は &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、 &lt;code&gt;finalMergeProps&lt;/code&gt; にそれらを渡し、その返り値を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmergeprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMergeProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMergeProps&lt;/code&gt; は &lt;code&gt;connect&lt;/code&gt; の第三引数である &lt;code&gt;mergeProps&lt;/code&gt; が入っている. &lt;code&gt;connect&lt;/code&gt; に第三引数が指定されていない場合は &lt;code&gt;defaultMergeProps&lt;/code&gt; が入り、その定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMergeProps = (stateProps, dispatchProps, parentProps) =&amp;gt; ({
  ...parentProps,
  ...stateProps,
  ...dispatchProps
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、 &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、それらをexpandしてまとめて返している.
&lt;code&gt;Connect#updateMergedProps&lt;/code&gt; でこれが &lt;code&gt;this.mergedProps&lt;/code&gt; に入り、最終的に &lt;code&gt;connect&lt;/code&gt; の返す関数の引数として渡される &lt;code&gt;WrappedComponent&lt;/code&gt; に &lt;code&gt;createElement&lt;/code&gt; で渡される.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(WrappedComponent, this.mergedProps); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-again:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps again&lt;/h2&gt;

&lt;p&gt;結局 &lt;code&gt;mapDispatchToProps&lt;/code&gt; は何だったかと言うと、 &lt;code&gt;dispatch&lt;/code&gt; を &lt;code&gt;createElement&lt;/code&gt; にどのように渡すかを定義する引数だった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;@connect(null, { pushState })
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(Decrement, { pushState: (...args) =&amp;gt; { dispatch(pushState(..args)); } });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となって、 &lt;code&gt;class Decrement&lt;/code&gt; の中で &lt;code&gt;this.props.pushState&lt;/code&gt; が使えるようになる.&lt;/p&gt;

&lt;p&gt;さらに &lt;code&gt;mapDispatchToProps&lt;/code&gt; のdefaultが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;であったように、 &lt;code&gt;dispatch&lt;/code&gt; 自体もmappingしないと &lt;code&gt;this.props.dispatch&lt;/code&gt; は使えないので &lt;code&gt;this.props.dispatch&lt;/code&gt; が必要な際は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;functiton mapDispatchToProps(dispatch) {
  return {
    dispatch,
    pushState: bindActionCreators(pushState, dispatch)
  };
}
@connect(null, mapDispatchToProps)
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、 &lt;code&gt;dispatch&lt;/code&gt; もmappingするような関数 ( &lt;code&gt;mapDispatchToProps&lt;/code&gt; ) を作り、 &lt;code&gt;connect&lt;/code&gt; の第二引数として渡す.&lt;/p&gt;

&lt;p&gt;このように &lt;code&gt;dispatch&lt;/code&gt; を内部で呼び出すAPI作る際は、&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; を経由して、 &lt;code&gt;this.props&lt;/code&gt; に組み込まれるよう作る.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Router</title>
      <link>http://blog.rudolph-miller.com/2015/12/23/redux-router/</link>
      <pubDate>Wed, 23 Dec 2015 00:01:34 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/12/23/redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの紹介.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の23日目の記事.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;でRedux Routerの記事を見かけた気がするが、他所は気にしない.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h1&gt;

&lt;h2 id=&#34;about:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;はReact.jsでde facto standardとなっているRouting libraryの
&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;React RouterのRedux bindingsはReact RounterもReduxも抱えているOrganizationの&lt;a href=&#34;https://github.com/rackt&#34;&gt;rackt&lt;/a&gt;が作っている
&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;もあるが、Redux Routerの方が現時点でGitHubのStar数は多い.
(名前の通り、redux-simple-routerの方がよりsimpleで、Redux Routerはfatでcomplexだが機能は多い.)&lt;/p&gt;

&lt;img src=&#34;http://blog.rudolph-miller.com/images//20151222/rackt.gif&#34; alt=&#34;/20151222/rackt.gif&#34;&gt;


&lt;p&gt;これは&lt;a href=&#34;http://rackt.org/&#34;&gt;rackt.org&lt;/a&gt;. サイトではもっと綺麗にうねうねしてる.&lt;/p&gt;

&lt;h2 id=&#34;why:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;ReduxはStateの管理を容易に (一様に) するが、単体でReact Routerを使用すると、
Application上の重要なStateであるURLがReduxでの管理からはずれてしまう.&lt;br /&gt;
Redux RouterによりURLのStateもReduxで管理できる.&lt;/p&gt;

&lt;h2 id=&#34;usage:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;とりあえずReduxでApplicationを作って、そこにReact Routerを導入、最後にRedux Routerを導入する手順で紹介する.&lt;/p&gt;

&lt;h3 id=&#34;redux:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { dispatch, counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(incrCounter()); }}&amp;gt;
          INCREMENT
        &amp;lt;/button&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(decrCounter()); }}&amp;gt;
          DECREMENT
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;App /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;http://blog.rudolph-miller.com/images//20151222/initial-impl.gif&#34; alt=&#34;/20151222/initial-impl.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;@connect&lt;/code&gt; して &lt;code&gt;state.counter&lt;/code&gt; を表示し、その &lt;code&gt;state.counter&lt;/code&gt; を増減させるボタンがあるだけのApplicationで、とくに解説することはない.&lt;/p&gt;

&lt;h3 id=&#34;react-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;React Router&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mport React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect()
class CounterButton extends Component {
  static propTypes = {
    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
  }

  render() {
    const { dispatch } = this.props;
    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.type === &#39;incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;Router routes={routes} /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;http://blog.rudolph-miller.com/images//20151222/second-impl.gif&#34; alt=&#34;/20151222/second-impl.gif&#34;&gt;


&lt;p&gt;React Routerを導入して &lt;code&gt;Increment&lt;/code&gt; と &lt;code&gt;Decrement&lt;/code&gt; をRoutingで分けただけ.&lt;br /&gt;
共通で &lt;code&gt;CounterButton&lt;/code&gt; をrenderしていて、 &lt;code&gt;this.props.type&lt;/code&gt; でボタンがクリックされた時に、
&lt;code&gt;incrCounter()&lt;/code&gt; か &lt;code&gt;decrCounter()&lt;/code&gt; のどちらを &lt;code&gt;dispatch&lt;/code&gt; するか分岐している.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.props.type&lt;/code&gt; ではなく、&lt;strong&gt;URLというApplicationが持つState&lt;/strong&gt;で分岐させたいとする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; @connect()
 class CounterButton extends Component {
-  static propTypes = {
-    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
+  static contextTypes = {
+    location: React.PropTypes.object.isRequired
   }
 
   render() {
     const { dispatch } = this.props;
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.props.type === &#39;incr&#39;) {
+          if(this.context.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;class Increment extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
           TO DECREMENT
         &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;class Decrement extends Component {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/&#39;&amp;gt;
           TO INCREMENT
         &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;static contextTypes&lt;/code&gt; を定義して、 &lt;code&gt;this.context.location&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application全体のState&lt;/strong&gt;の管理に一貫性がなくなった.&lt;/p&gt;

&lt;h3 id=&#34;redux-router-1:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h3&gt;

&lt;p&gt;一貫性を取り戻すためにRedux Routerを導入する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import createHistory from &#39;history/lib/createHashHistory&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; const reducer = combineReducers({
+  router: routerStateReducer,
   counter: handleCounter
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-@connect()
+@connect(state =&amp;gt; {
+  return {
+    location: state.router.location
+  }
+})
class CounterButton extends Component {
-  static contextTypes = {
-    location: React.PropTypes.object.isRequired
-  }

   render() {
     const { dispatch } = this.props;
 
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.context.location.pathname === &#39;/incr&#39;) {
+          if(this.props.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-const store = createStore(reducer);
+const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
-        &amp;lt;Router routes={routes} /&amp;gt;
+        &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順に解説する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;色々 &lt;code&gt;import&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combineReducers&lt;/code&gt; で &lt;code&gt;router:&lt;/code&gt; を &lt;code&gt;routerStateReducer&lt;/code&gt; がhandleするようset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; を &lt;code&gt;this.props.location&lt;/code&gt; とできるよう、 &lt;code&gt;@connect&lt;/code&gt; で &lt;code&gt;location:&lt;/code&gt; に &lt;code&gt;state.router.location&lt;/code&gt; をset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; の代わりに &lt;code&gt;this.props.location&lt;/code&gt; を使用.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; でwrapして、 &lt;code&gt;router&lt;/code&gt; のStateを &lt;code&gt;store&lt;/code&gt; で管理するようにする.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createBrowserHistory&lt;/code&gt; を使用して、 &lt;code&gt;&amp;lt;Router history={history} /&amp;gt;&lt;/code&gt; をしていた場合は、 &lt;code&gt;createBrowserHistory&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; の第二引数に渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ReduxRouter history={history} /&amp;gt;&lt;/code&gt; とはしない.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Router routes={routes} /&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;ReduxRouter /&amp;gt;&lt;/code&gt; で置き換える.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでReduxでURLのStateも &lt;code&gt;router&lt;/code&gt; として管理できるようになった.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;秩序を取り戻した. ╭( ･ㅂ･)و&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Fetch Action</title>
      <link>http://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</link>
      <pubDate>Tue, 15 Dec 2015 12:53:17 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</guid>
      <description>

&lt;p&gt;Redux Fetch ActionというReduxのFetch actionのutilityを作った.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の15日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/h1&gt;

&lt;h2 id=&#34;why:204c7e295a840c149fff4b9b8d704763&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;最近&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;を使っているが、DataのFetchが似たようなAction creatorとReducerのpatternになったので、
切り出してpublishした. (&lt;code&gt;POST&lt;/code&gt; もFetchかよって違和感はある.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FluxのActionには&lt;a href=&#34;https://github.com/acdlite/flux-standard-action&#34;&gt;非公式のCoding規約&lt;/a&gt;があるらしく、
それに則るため&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;をbaseとしている.&lt;/p&gt;

&lt;h2 id=&#34;api:204c7e295a840c149fff4b9b8d704763&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;APIは &lt;code&gt;createFetchAction&lt;/code&gt; と &lt;code&gt;handleFetchAction&lt;/code&gt; がある.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createFetchAction&lt;/code&gt; はAction creatorを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FETCH_DATA = &#39;FETCH_DATA&#39;;
const fetchAction = createFetchAction(FETCH_DATA, &#39;/data.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleFetchAction&lt;/code&gt; はReducerを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
const reducer = handleFetchAction(FETCH_DATA, {
  request: (state = {}, action) =&amp;gt; {
    return state;
  },
  receive: (state = {}, action) =&amp;gt; {
    return action.payload;
  },
  error: (satet = {}, action) =&amp;gt; {
    return state;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;h2 id=&#34;example:204c7e295a840c149fff4b9b8d704763&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;二つのAPIを合わせ、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;;
import thunk from &#39;redux-thunk&#39;;
import { handleActions } from &#39;redux-actions&#39;;
import { createFetchAction, handleFetchAction } from &#39;redux-fetch-action&#39;;
import { Server }from &#39;node-static&#39;;
import { createServer } from &#39;http&#39;;

const file = new Server();
createServer((request, response)  =&amp;gt; {
  request.addListener(&#39;end&#39;, () =&amp;gt; {
    file.serve(request, response);
  }).resume();
}).listen(8080);

const FETCH1 = &#39;FETCH1&#39;;
const FETCH2 = &#39;FETCH2&#39;;
const FETCH3 = &#39;FETCH3&#39;;

const reducer1 = handleFetchAction(FETCH1, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 1&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 1&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 1&#39;);
    return posts;
  }
});

const reducer2 = handleFetchAction(FETCH2, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 2&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 2&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 2&#39;);
    return posts;
  }
});

const reducer3 = handleFetchAction(FETCH3, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 3&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 3&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 3&#39;);
    return posts;
  }
});

const reducer = handleActions({
  FETCH1: reducer1,
  FETCH2: reducer2,
  FETCH3: reducer3
}, {});

const store = applyMiddleware(
  thunk
)(createStore)(reducer);

const fetchAction1 = createFetchAction(FETCH1, &#39;http://localhost:8080/data.json&#39;);
const fetchAction2 = createFetchAction(FETCH2, &#39;http://localhost:8080/sample.html&#39;);
const fetchAction3 = createFetchAction(FETCH3, &#39;http://localhost:8080/unknown.json&#39;);

store.dispatch(fetchAction1());
store.dispatch(fetchAction2());
store.dispatch(fetchAction3());

/*
REQUEST 1
REQUEST 2
REQUEST 3
ERROR 3
RECEIVED 1
{ posts:
   [ { id: 1, text: &#39;Sample text 1&#39; },
     { id: 2, text: &#39;Sample text 2&#39; } ] }
RECEIVED 2
&amp;lt;div&amp;gt;
  sample
&amp;lt;/div&amp;gt;
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにFetchのhandleができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasuhiro-okada-aktsk/items/a14f7f37262fb6cf0bf8&#34;&gt;Redux: Actionのコーディング規約 と redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Redux Rails</title>
      <link>http://blog.rudolph-miller.com/2015/12/11/react-redux-rails/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:06 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/12/11/react-redux-rails/</guid>
      <description>

&lt;p&gt;React.js &amp;amp; Redux &amp;amp; Ruby on Railsでserver-side rendering.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;の10日目の記事であり、&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の10日目の記事です. (欲張り.)&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/h1&gt;

&lt;h2 id=&#34;react-js:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React.js&lt;/h2&gt;

&lt;p&gt;React.jsはFacebook製のJavaScriptのUI Library.&lt;br /&gt;
Viewの状態管理をさぼれる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/reactjs&#34;&gt;一人React.js Advent Calendar 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;redux:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Redux&lt;/h2&gt;

&lt;p&gt;Reduxは今一番熱いFlux architecture frameworkで状態管理をatomitにする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amagitakayosi.hatenablog.com/entry/2015/07/30/000000&#34;&gt;人気のFluxフレームワークReduxをさわってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;react-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;react-rails&lt;/h2&gt;

&lt;p&gt;Ruby on RailsにはReact.jsのserver-side renderingを容易にするGemがある.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, name: &#39;John&#39;) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにViewにReact.jsのComponentを埋め込むことができる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react_component&lt;/code&gt; の3つ目の引数として &lt;code&gt;{prerender: true}&lt;/code&gt; を渡すだけで、server-side renderingができる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, {name: &#39;John&#39;}, {prerender: true}) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Hello, John!&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/joe-re/items/96f12dda4a62470d1d7c&#34;&gt;react-railsを使ってReactのTutorialをやってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;try:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Try&lt;/h2&gt;

&lt;p&gt;これらを合わせて、Reduxで状態管理をして、ReactでComponentを組み立て、Ruby on Railsでserver-side renderingをしてみた.&lt;/p&gt;

&lt;p&gt;BaseのAppはReduxのBasic tutorialになっている&lt;a href=&#34;http://rackt.org/redux/docs/basics/ExampleTodoList.html&#34;&gt;tiny todo app&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;Root&#39;, {presetTodos: @todos}, {prerender: true}) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/views/todos/index.html.erb#L1&#34;&gt;app/views/todos/index.html.erb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;とRuby on RailsのViewに埋め込むことにより、初回は server-side renderingで &lt;code&gt;@todos&lt;/code&gt; を &lt;code&gt;props&lt;/code&gt; に渡して &lt;code&gt;componentDidMount&lt;/code&gt; でDataをsetし、
それ以外で &lt;code&gt;Root&lt;/code&gt; をrenderした時は &lt;code&gt;componentDidMount&lt;/code&gt; でDataをfetchする.&lt;br /&gt;
(今回のExampleではこの遷移は実装していないが、 &lt;code&gt;{presetTodos: @todos}&lt;/code&gt; をはずぜばこの挙動となる.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;componentDidMount() {
	const { dispatch, presetTodos } = this.props;
	if (presetTodos) {
		dispatch(setTodos(presetTodos));
	} else {
		dispatch(fetchTodos());
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/containers/App.js#L38-L45&#34;&gt;app/assets/javascripts/containers/App.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;軽くポイントを掻い摘む.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScriptのLibrary管理はnpmでbrowserify-railsを使ってBabelでbuildした.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application.js&lt;/code&gt; は &lt;code&gt;//= require react_ujs&lt;/code&gt; と &lt;code&gt;//= require components&lt;/code&gt; のみ. (&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/c07553236da0464393fccf75ecb6a3d61f48b4e2/app/assets/javascripts/application.js#L1-L2&#34;&gt;app/assets/javascripts/application.js&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Babel 6だとDecorationが未supportだったため、Babel 5を使用した. (&lt;a href=&#34;http://phabricator.babeljs.io/T2645&#34;&gt;Implement new decorator proposal when finalized&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReduxでAsync.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rackt.org/redux/docs/advanced/AsyncActions.html&#34;&gt;Async Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/actions/index.js#L34-L54&#34;&gt;app/assets/javascripts/actions/index.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくはSourceに.
質問があればTwitterで &lt;a href=&#34;https://twitter.com/Rudolph_Miller&#34;&gt;#Rudolph_Miller&lt;/a&gt; に聞いて下さい.&lt;/p&gt;

&lt;p&gt;意外とすんなり書け、すんなり動いたので、どこかで実戦投入したいと思う.&lt;/p&gt;

&lt;h1 id=&#34;see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/flux&#34;&gt;Flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;browserify-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>