<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redux on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/tags/redux/</link>
    <description>Recent content in Redux on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; Copyright 2015 Rudolph Miller</copyright>
    <lastBuildDate>Tue, 15 Dec 2015 12:53:17 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/tags/redux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Redux Fetch Action</title>
      <link>http://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</link>
      <pubDate>Tue, 15 Dec 2015 12:53:17 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</guid>
      <description>

&lt;p&gt;Redux Fetch ActionというReduxのFetch actionのutilityを作った.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の15日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/h1&gt;

&lt;h2 id=&#34;why:204c7e295a840c149fff4b9b8d704763&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;最近&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;を使っているが、DataのFetchが似たようなAction creatorとReducerのpatternになったので、
切り出してpublishした. (&lt;code&gt;POST&lt;/code&gt; もFetchかよって違和感はある.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FluxのActionには&lt;a href=&#34;https://github.com/acdlite/flux-standard-action&#34;&gt;非公式のCoding規約&lt;/a&gt;があるらしく、
それに則るため&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;をbaseとしている.&lt;/p&gt;

&lt;h2 id=&#34;api:204c7e295a840c149fff4b9b8d704763&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;APIは &lt;code&gt;createFetchAction&lt;/code&gt; と &lt;code&gt;handleFetchAction&lt;/code&gt; がある.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createFetchAction&lt;/code&gt; はAction creatorを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FETCH_DATA = &#39;FETCH_DATA&#39;;
const fetchAction = createFetchAction(FETCH_DATA, &#39;/data.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleFetchAction&lt;/code&gt; はReducerを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
const reducer = handleFetchAction(FETCH_DATA, {
  request: (state = {}, action) =&amp;gt; {
    return state;
  },
  receive: (state = {}, action) =&amp;gt; {
    return action.payload;
  },
  error: (satet = {}, action) =&amp;gt; {
    return state;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;h2 id=&#34;example:204c7e295a840c149fff4b9b8d704763&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;二つのAPIを合わせ、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;;
import thunk from &#39;redux-thunk&#39;;
import { handleActions } from &#39;redux-actions&#39;;
import { createFetchAction, handleFetchAction } from &#39;redux-fetch-action&#39;;
import { Server }from &#39;node-static&#39;;
import { createServer } from &#39;http&#39;;

const file = new Server();
createServer((request, response)  =&amp;gt; {
  request.addListener(&#39;end&#39;, () =&amp;gt; {
    file.serve(request, response);
  }).resume();
}).listen(8080);

const FETCH1 = &#39;FETCH1&#39;;
const FETCH2 = &#39;FETCH2&#39;;
const FETCH3 = &#39;FETCH3&#39;;

const reducer1 = handleFetchAction(FETCH1, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 1&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 1&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 1&#39;);
    return posts;
  }
});

const reducer2 = handleFetchAction(FETCH2, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 2&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 2&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 2&#39;);
    return posts;
  }
});

const reducer3 = handleFetchAction(FETCH3, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 3&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 3&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 3&#39;);
    return posts;
  }
});

const reducer = handleActions({
  FETCH1: reducer1,
  FETCH2: reducer2,
  FETCH3: reducer3
}, {});

const store = applyMiddleware(
  thunk
)(createStore)(reducer);

const fetchAction1 = createFetchAction(FETCH1, &#39;http://localhost:8080/data.json&#39;);
const fetchAction2 = createFetchAction(FETCH2, &#39;http://localhost:8080/sample.html&#39;);
const fetchAction3 = createFetchAction(FETCH3, &#39;http://localhost:8080/unknown.json&#39;);

store.dispatch(fetchAction1());
store.dispatch(fetchAction2());
store.dispatch(fetchAction3());

/*
REQUEST 1
REQUEST 2
REQUEST 3
ERROR 3
RECEIVED 1
{ posts:
   [ { id: 1, text: &#39;Sample text 1&#39; },
     { id: 2, text: &#39;Sample text 2&#39; } ] }
RECEIVED 2
&amp;lt;div&amp;gt;
  sample
&amp;lt;/div&amp;gt;
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにFetchのhandleができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasuhiro-okada-aktsk/items/a14f7f37262fb6cf0bf8&#34;&gt;Redux: Actionのコーディング規約 と redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Redux Rails</title>
      <link>http://blog.rudolph-miller.com/2015/12/11/react-redux-rails/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:06 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/12/11/react-redux-rails/</guid>
      <description>

&lt;p&gt;React.js &amp;amp; Redux &amp;amp; Ruby on Railsでserver-side rendering.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;の10日目の記事であり、&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の10日目の記事です. (欲張り.)&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/h1&gt;

&lt;h2 id=&#34;react-js:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React.js&lt;/h2&gt;

&lt;p&gt;React.jsはFacebook製のJavaScriptのUI Library.&lt;br /&gt;
Viewの状態管理をさぼれる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/reactjs&#34;&gt;一人React.js Advent Calendar 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;redux:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Redux&lt;/h2&gt;

&lt;p&gt;Reduxは今一番熱いFlux architecture frameworkで状態管理をatomitにする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amagitakayosi.hatenablog.com/entry/2015/07/30/000000&#34;&gt;人気のFluxフレームワークReduxをさわってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;react-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;react-rails&lt;/h2&gt;

&lt;p&gt;Ruby on RailsにはReact.jsのserver-side renderingを容易にするGemがある.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, name: &#39;John&#39;) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにViewにReact.jsのComponentを埋め込むことができる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react_component&lt;/code&gt; の3つ目の引数として &lt;code&gt;{prerender: true}&lt;/code&gt; を渡すだけで、server-side renderingができる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, {name: &#39;John&#39;}, {prerender: true}) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Hello, John!&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/joe-re/items/96f12dda4a62470d1d7c&#34;&gt;react-railsを使ってReactのTutorialをやってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;try:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Try&lt;/h2&gt;

&lt;p&gt;これらを合わせて、Reduxで状態管理をして、ReactでComponentを組み立て、Ruby on Railsでserver-side renderingをしてみた.&lt;/p&gt;

&lt;p&gt;BaseのAppはReduxのBasic tutorialになっている&lt;a href=&#34;http://rackt.org/redux/docs/basics/ExampleTodoList.html&#34;&gt;tiny todo app&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;Root&#39;, {presetTodos: @todos}, {prerender: true}) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/views/todos/index.html.erb#L1&#34;&gt;app/views/todos/index.html.erb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;とRuby on RailsのViewに埋め込むことにより、初回は server-side renderingで &lt;code&gt;@todos&lt;/code&gt; を &lt;code&gt;props&lt;/code&gt; に渡して &lt;code&gt;componentDidMount&lt;/code&gt; でDataをsetし、
それ以外で &lt;code&gt;Root&lt;/code&gt; をrenderした時は &lt;code&gt;componentDidMount&lt;/code&gt; でDataをfetchする.&lt;br /&gt;
(今回のExampleではこの遷移は実装していないが、 &lt;code&gt;{presetTodos: @todos}&lt;/code&gt; をはずぜばこの挙動となる.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;componentDidMount() {
	const { dispatch, presetTodos } = this.props;
	if (presetTodos) {
		dispatch(setTodos(presetTodos));
	} else {
		dispatch(fetchTodos());
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/containers/App.js#L38-L45&#34;&gt;app/assets/javascripts/containers/App.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;軽くポイントを掻い摘む.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScriptのLibrary管理はnpmでbrowserify-railsを使ってBabelでbuildした.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application.js&lt;/code&gt; は &lt;code&gt;//= require react_ujs&lt;/code&gt; と &lt;code&gt;//= require components&lt;/code&gt; のみ. (&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/c07553236da0464393fccf75ecb6a3d61f48b4e2/app/assets/javascripts/application.js#L1-L2&#34;&gt;app/assets/javascripts/application.js&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Babel 6だとDecorationが未supportだったため、Babel 5を使用した. (&lt;a href=&#34;http://phabricator.babeljs.io/T2645&#34;&gt;Implement new decorator proposal when finalized&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReduxでAsync.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rackt.org/redux/docs/advanced/AsyncActions.html&#34;&gt;Async Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/actions/index.js#L34-L54&#34;&gt;app/assets/javascripts/actions/index.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくはSourceに.
質問があればTwitterで &lt;a href=&#34;https://twitter.com/Rudolph_Miller&#34;&gt;#Rudolph_Miller&lt;/a&gt; に聞いて下さい.&lt;/p&gt;

&lt;p&gt;意外とすんなり書け、すんなり動いたので、どこかで実戦投入したいと思う.&lt;/p&gt;

&lt;h1 id=&#34;see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/flux&#34;&gt;Flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;browserify-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>