<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/post/</link>
    <description>Recent content in Posts on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; Copyright 2015 Rudolph Miller</copyright>
    <lastBuildDate>Mon, 16 Nov 2015 15:33:08 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jonathan unescapes Unicode Escape Sequence</title>
      <link>http://blog.rudolph-miller.com/2015/11/16/jonathan-unescapes-unicode-escape-sequence/</link>
      <pubDate>Mon, 16 Nov 2015 15:33:08 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/11/16/jonathan-unescapes-unicode-escape-sequence/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;にUnicode Escape Sequenceをunescapeする機能を入れた.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-escape-sequence:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;Unicode Escape Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;unicode-escape-sequence:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;Unicode Escape Sequence&lt;/h1&gt;

&lt;p&gt;先日&lt;a href=&#34;http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/&#34;&gt;Daily Log in Slack&lt;/a&gt;で報告した&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo&#34;&gt;Slack Nippo&lt;/a&gt;を作っている時に、
SlackのAPIのResponseにUnicode Escape Sequenceがあり、&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;がこれをusescapeしていなかったことを知った.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hanshuebner.github.io/yason/&#34;&gt;YASON&lt;/a&gt;も&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;ももちろん対応しているので、
&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;にUnicode Escape Sequenceをunescapeする機能を入れた.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(jonathan:parse &amp;quot;\&amp;quot;\\u30b8\\u30e7\\u30ca\\u30b5\\u30f3\&amp;quot;&amp;quot;)
;; =&amp;gt; &amp;quot;ジョナサン&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろんSurrogate pairも対応している.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(jonathan:parse &amp;quot;\&amp;quot;\\uD840\\uDC0B\&amp;quot;&amp;quot;)
;; =&amp;gt; &amp;quot;𠀋&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;はSurrogate pairを投げると文字化けする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-input-from-string (stream &amp;quot;\&amp;quot;\\uD840\\uDC0B\&amp;quot;&amp;quot;)
  (cl-json:decode-json stream))
;; =&amp;gt; &amp;quot;��&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不具合があれば&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan/issues&#34;&gt;Issues&lt;/a&gt;にreportもらえれば対応します.&lt;/p&gt;

&lt;h1 id=&#34;see-also:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/&#34;&gt;Daily Log in Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hanshuebner.github.io/yason/&#34;&gt;YASON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Daily Log in Slack</title>
      <link>http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/</link>
      <pubDate>Sat, 14 Nov 2015 23:02:13 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/</guid>
      <description>

&lt;p&gt;Slackでの社内Twitterを日報にするToolを作っている.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#slackで社内twitter:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slackで社内Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slack-nippo:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;slackで社内twitter:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slackで社内Twitter&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://c16e.com/1511101558&#34;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ 〜 Problemが10分で解決するチャットを作ろう&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先日こんな記事があり、Kaizen Platform社内Slackにも&lt;strong&gt;技術顧問の先導&lt;/strong&gt;により &lt;code&gt;#times_${username}&lt;/code&gt; channelが開設された.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.rudolph-miller.com/images/20151114/channel.png&#34; alt=&#34;channel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やってみて感じたことと、これに関してのToolを作っているので報告する.&lt;/p&gt;

&lt;p&gt;毎日日報を&lt;a href=&#34;http://kobito.qiita.com/&#34;&gt;Kobito&lt;/a&gt;で書いて、&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿しているのだが、二つ不満があった.&lt;/p&gt;

&lt;p&gt;一つは、普段Vimを使っているので、別にApplicationとしてEditorを立ち上げたくないとこ.&lt;/p&gt;

&lt;p&gt;もう一つは、上の記事にも書かれていたが、&amp;rdquo;チームとしてのスピード感がでない&amp;rdquo;とこ.&lt;br /&gt;
ある程度の粒度の課題なら別で&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿するが、
小粒な課題や粒度の見えない課題を発見して、日報に書き、投稿後にコメントをもらったときには解決していたりする.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#times_${username]&lt;/code&gt; を始めてみると、余分にApplicationを立ち上げる必要がなく、
リアルタイムにコミュニケーションが発生し、いままでの日報の不満は解決された.&lt;/p&gt;

&lt;p&gt;それだけではなく、&lt;strong&gt;不思議としっくりくる感じ&lt;/strong&gt;があった.&lt;br /&gt;
考えてみるとこれは&lt;strong&gt;社内でのコミュニケーションに近い&lt;/strong&gt;のだ.&lt;/p&gt;

&lt;p&gt;席にいるかが一目で分かり、悩んでいると声をかけられ、話していると他の人が乱入してくる.&lt;br /&gt;
リモートワークを取り入れている会社にとって、&lt;strong&gt;この空気&lt;/strong&gt;を生み出せるのは重要だと思う.&lt;/p&gt;

&lt;p&gt;デメリットもある.
だたのチャットなので&lt;strong&gt;流れる&lt;/strong&gt;.
後で&lt;strong&gt;&amp;ldquo;あの時の課題はどうやって解決したっけ&amp;rdquo;&lt;/strong&gt;みたいなのがぱっとでてこない.&lt;/p&gt;

&lt;h1 id=&#34;slack-nippo:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slack Nippo&lt;/h1&gt;

&lt;p&gt;ということで、一日の終わりにこの &lt;code&gt;#times_${username}&lt;/code&gt; をまとめて日報とするToolを作っている.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.rudolph-miller.com/images/20151114/daily_log.png&#34; alt=&#34;daily log&#34; /&gt;&lt;/p&gt;

&lt;p&gt;タスク管理はTrelloを使用しており、そのログを &lt;code&gt;#times_${username}&lt;/code&gt; に流すようにした.&lt;br /&gt;
今はこのMarkdownを&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿している.&lt;/p&gt;

&lt;p&gt;まだ実験段階なのでローカルで叩いてMarkdownを吐き出すだけだが、&lt;br /&gt;
フォーマットと機能がまとまってきたら、Serverとして起動して生成したMarkdownをSlackに投稿したり、
&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に直接投稿できる機能をつける.&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo/&#34;&gt;Slack Nippo - GitHub&lt;/a&gt;にある.&lt;br /&gt;
とりあえず日報をだしたかったので、かなり雑な部分があるのは認識している.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/api-gateway/&#34;&gt;Amazon API Gateway&lt;/a&gt;と&lt;a href=&#34;https://aws.amazon.com/jp/lambda/&#34;&gt;AWS Lambda&lt;/a&gt;でやろうと考えていたのだが、
気がつくと&lt;strong&gt;Common Lisp&lt;/strong&gt;を書いていた. 心地よかった.&lt;br /&gt;
Serverとして機能をつけたらDocker Imageも&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;に上げてローカルで簡単に立ち上げられるようにする.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c16e.com/1511101558&#34;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ 〜 Problemが10分で解決するチャットを作ろう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo/&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tech Talk About Lisp</title>
      <link>http://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/</link>
      <pubDate>Sun, 01 Nov 2015 22:38:10 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/</guid>
      <description>&lt;p&gt;社内のTech Talk #4でLispについて発表した.&lt;/p&gt;

&lt;p&gt;LispやS-expressionについての軽い話をした.&lt;br /&gt;
LispとCommin Lispをごっちゃに扱っているのはワザと.&lt;br /&gt;
たぶんTalkがないとよくわからない部分が多いだろうけど公開しておく.
&lt;iframe
  class=&#34;iframe-slide&#34;
  src=&#34;http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/&#34;
  width=&#34;100%&#34;
  style=&#34;border-width: 1px&#34;&gt;
&lt;/iframe&gt;
&lt;script&gt;
  (function () {
    function init () {
      var slides = document.getElementsByClassName(&#39;iframe-slide&#39;);
      for (var index = 0, len = slides.length; index &lt; len; index++) {
        var slide = slides[index];
        var width = slide.offsetWidth;
        var height = width * 3 / 4;
        slide.height = height;
      }
    }
    init();
    window.addEventListener(&#39;resize&#39;, init);
  })()
&lt;/script&gt;
&lt;a href=&#34;http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/&#34; target=&#34;_blank&#34;&gt;Slide&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native on Android device</title>
      <link>http://blog.rudolph-miller.com/2015/09/16/react-native-on-android-device/</link>
      <pubDate>Wed, 16 Sep 2015 10:06:16 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/09/16/react-native-on-android-device/</guid>
      <description>

&lt;p&gt;React Native for Androidを実機で動かす.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#run-on-device:60c6196952e7045685a1de9e62046e9b&#34;&gt;Run on device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:60c6196952e7045685a1de9e62046e9b&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;run-on-device:60c6196952e7045685a1de9e62046e9b&#34;&gt;Run on device&lt;/h2&gt;

&lt;p&gt;まずUSB Debugging ModeをONにする.&lt;/p&gt;

&lt;p&gt;するとAndroid端末を開発機にUSBで接続して、&lt;code&gt;react-native run-android&lt;/code&gt;を実行すると、
端末にApplicationのインストールが可能と起動が可能となる.&lt;/p&gt;

&lt;p&gt;そしてこの真っ赤なエラー画面に遭遇して面食らう.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.rudolph-miller.com/images/20150916/error.png&#34; alt=&#34;Error on device&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なにが起こっているか.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.android.bundle&lt;/code&gt;を&lt;code&gt;localhost:8081&lt;/code&gt;から取ってこようとして、接続できなくエラーとなっている.
つまりbundleしたJavaScriptファイルを開発機から取ってこようとして失敗したと.&lt;/p&gt;

&lt;p&gt;そのため開発サーバーに接続すれば良く、とりあえず2通りの方法がある.&lt;/p&gt;

&lt;h3 id=&#34;using-adb-reverse:60c6196952e7045685a1de9e62046e9b&#34;&gt;Using adb reverse&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;adb reverse&lt;/code&gt;を使用して、端末の&lt;code&gt;tcp:8081&lt;/code&gt;で開発機の&lt;code&gt;tpc:8081&lt;/code&gt;を参照できるようにする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb reverse tcp:8081 tcp:8081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで他の設定を変更することなく端末上で&lt;code&gt;Reload JS&lt;/code&gt;などの開発オプションが使用できるようになる.&lt;/p&gt;

&lt;h3 id=&#34;configure-device-to-connect-to-the-dev-server-via-wi-fi:60c6196952e7045685a1de9e62046e9b&#34;&gt;Configure device to connect to the dev server via Wi-Fi&lt;/h3&gt;

&lt;p&gt;端末の&lt;code&gt;Dev Settings&lt;/code&gt;で&lt;code&gt;Debug server host&lt;/code&gt;の設定を変更する.
この方法で開発機に接続するためには端末と開発機が同じWi-Fiに接続している必要がある.&lt;/p&gt;

&lt;p&gt;Applicationで&lt;code&gt;menu&lt;/code&gt;を表示する.
(端末のメニューボタンを押すかApplicationを開いた状態で端末を振ると表示される.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dev Settings&lt;/code&gt;、&lt;code&gt;Debug server host for device&lt;/code&gt;と遷移し、開発機のIPアドレスを入力する.&lt;br /&gt;
(OS XのIPアドレスは&lt;code&gt;システム環境設定&lt;/code&gt;、&lt;code&gt;ネットワーク&lt;/code&gt;と遷移して、接続中のネットワークのタブで確認できる.)&lt;/p&gt;

&lt;p&gt;すると端末上で&lt;code&gt;Reload JS&lt;/code&gt;などの開発オプションが使用できるようになる.&lt;/p&gt;

&lt;h2 id=&#34;see-also:60c6196952e7045685a1de9e62046e9b&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/running-on-device-android.html&#34;&gt;Running On Device(Android)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/tools/device.html&#34;&gt;Using Handware Devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Setup React Native for Android</title>
      <link>http://blog.rudolph-miller.com/2015/09/15/setup-react-native-for-android/</link>
      <pubDate>Tue, 15 Sep 2015 10:39:31 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/09/15/setup-react-native-for-android/</guid>
      <description>

&lt;p&gt;OS XでのReact Native for Androidのセットアップを紹介.&lt;/p&gt;

&lt;p&gt;ようやくReact Native for Androidが公開されたので、
まずはOS Xでのセットアップを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#install-and-configure-sdk:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and configure SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install-and-run-android-stock-emulator:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and run Android stock emulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;install-and-configure-sdk:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and configure SDK&lt;/h2&gt;

&lt;p&gt;SDKのインストールと設定をする.&lt;/p&gt;

&lt;p&gt;まずは&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;JDK&lt;/a&gt;の最新版をインストール.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;android-sdk&lt;/code&gt;を&lt;code&gt;brew&lt;/code&gt;でインストールします.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install android-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ANDROID_HOME=/usr/local/opt/android-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を&lt;code&gt;~/.zshrc&lt;/code&gt;又は&lt;code&gt;~/.bashrc&lt;/code&gt;に追加し再読み込み.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source ~/.zshrc
# source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Android SDK Manager&lt;/code&gt;を起動.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Android SDK Build-tools version 23.0.1&lt;/li&gt;
&lt;li&gt;Android 6.0 (API 23)&lt;/li&gt;
&lt;li&gt;Android Support Repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にチェックを入れて&lt;code&gt;Install Packages&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;install-and-run-android-stock-emulator:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Install and run Android stock emulator&lt;/h2&gt;

&lt;p&gt;Android emulatorをインストールして起動する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;Android SDK Manager&lt;/code&gt;を起動して&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intel x86 Atom System Image (for Android 5.1.1 - API 22)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Android 5.1.1 (API 22)&lt;/code&gt;のタブ中にあるので注意.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intel x86 Emulator Accelerator (HAXM installer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にチェックを入れて&lt;code&gt;Install Packages&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configure-haxm:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Configure HAXM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/tools/devices/emulator.html#vm-mac&#34;&gt;HAXM&lt;/a&gt;の設定をする.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open /usr/local/Cellar/android-sdk/24.3.4/extras/intel/Hardware_Accelerated_Execution_Manager/IntelHAXM_1.1.4.dmg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IntelHAXM_1.1.4.mpkg&lt;/code&gt;をダブルクリックし、画面の指示に従ってインストールする.&lt;/p&gt;

&lt;p&gt;インストール終了後、新しい&lt;code&gt;kernel extension&lt;/code&gt;が正しく処理されていることを確認するため、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kextstat | grep intel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行し&lt;code&gt;com.intel.kext.intelhaxm&lt;/code&gt;が表示されることを確認する.&lt;/p&gt;

&lt;p&gt;これでHAXMの設定は完了.&lt;/p&gt;

&lt;h3 id=&#34;run-android-emulator:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Run Android emulator&lt;/h3&gt;

&lt;p&gt;Android emulatorを起動する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android avd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でAVD Managerを立ち上げ&lt;code&gt;Create...&lt;/code&gt;でAVDを作成し&lt;code&gt;Start...&lt;/code&gt;でEmulatorを立ち上げる.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.rudolph-miller.com/images/20150915/CreateAVD.png&#34; alt=&#34;Create AVD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;又はすでに&lt;code&gt;~/.android/avd/&lt;/code&gt;に&lt;code&gt;.avd&lt;/code&gt;ファイルがあれば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ls ~/.android/avd/
# =&amp;gt; Nexus_5_API_23_x86.avd Nexus_5_API_23_x86.ini
emulator -avd Nexus_5_API_23_x86
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でファイル名を指定してEmulatorを起動できる.&lt;/p&gt;

&lt;h2 id=&#34;setup:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;最後にReact Native本体のセットアップをする.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;NVM&lt;/a&gt;や&lt;a href=&#34;https://github.com/wfarr/nodenv&#34;&gt;nodenv&lt;/a&gt;
などで&lt;code&gt;io.js 1.0 or newer&lt;/code&gt;を準備する.&lt;br /&gt;
(今回はnodenvとNode.js v4.0.0を使用.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nodenv install v4.0.0
# nodenv global v4.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;npmでコマンドラインインターフェースの&lt;code&gt;react-native-cli&lt;/code&gt;をインストールする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g react-native-cli
# nodenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると&lt;code&gt;react-native&lt;/code&gt;コマンドが使用可能になるので、適当なディレクトリで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;react-native init AwesomeProject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると、iOS用に&lt;code&gt;AwesomeProject/iOS/AwesomeProject.xcodeproj&lt;/code&gt;と&lt;br /&gt;
Android用に&lt;code&gt;AwesomeProject/android/app&lt;/code&gt;とが生成される.&lt;/p&gt;

&lt;p&gt;後は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd AwesomeProject
react-native run-android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でEmulator又は(接続してsetupしていれば)実機でApplicationが立ち上がる.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.rudolph-miller.com/images/20150915/welcome-to-react-native.png&#34; alt=&#34;Welcome to React Native&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;see-also:f4f600c0da5570cdeafda90b8b2d1724&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/getting-started.html#content&#34;&gt;Getting Started - React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/android-setup.html&#34;&gt;Android Setup - React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://facebook.github.io/react-native/docs/tutorial.html#content&#34;&gt;Tutorial - React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.facebook.com/posts/1189117404435352&#34;&gt;React Native for Android: How we built the first cross-platform React Native app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Volt - Isomorphic in Ruby</title>
      <link>http://blog.rudolph-miller.com/2015/08/27/volt/</link>
      <pubDate>Thu, 27 Aug 2015 11:32:17 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/27/volt/</guid>
      <description>

&lt;p&gt;Isomorphic in RubyなFramework &lt;a href=&#34;https://github.com/voltrb/volt/&#34;&gt;Volt&lt;/a&gt;を紹介.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same code runs on the client and the server&lt;/li&gt;
&lt;li&gt;Automatic Data Syncing&lt;/li&gt;
&lt;li&gt;Reactive Data Bindings&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VoltはClient, Server共にRubyで記述する&lt;strong&gt;Isomorphic&lt;/strong&gt;で&lt;strong&gt;Reactive&lt;/strong&gt;なWeb Application Frameworkで上のような特徴を持つ.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#same-code-runs-on-the-client-and-the-server:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Same code runs on the client and the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#automatic-data-syncing:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Automatic Data Syncing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reactive-data-bindings:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Reactive Data Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#components:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-started:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Getting Started&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install volt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;volt new sample_app
cd sample_app
bundle exec volt server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでServerが起動する.&lt;/p&gt;

&lt;p&gt;ファイルが変更されたときには、Voltは自動的にそのファイルをreloadし、Clientに変更をpushする.&lt;/p&gt;

&lt;h2 id=&#34;same-code-runs-on-the-client-and-the-server:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Same code runs on the client and the server&lt;/h2&gt;

&lt;p&gt;ClientとServerをRubyでIsomorphicに書ける.&lt;/p&gt;

&lt;p&gt;First RequestはServer Sideで実行されるが、それ以降はClient Sideで実行され、HTTP Requestが発生しない.&lt;/p&gt;

&lt;p&gt;データはModelClassで表現され、それの同期はautomaticallyにWebSocketかそれと同等のSocket通信でなされる.&lt;/p&gt;

&lt;h2 id=&#34;automatic-data-syncing:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Automatic Data Syncing&lt;/h2&gt;

&lt;p&gt;ある1つのクライアント上でデータが更新されたときには、
データベース、および他のリスニング中のクライアント上でも更新が行われる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- @ app/main/views/index.html --&amp;gt;
&amp;lt;:Body&amp;gt;
  {{ store._memos.each_with_index do |memo, index| }}
    &amp;lt;div&amp;gt;
      &amp;lt;label&amp;gt;{{ index + 1 }}&amp;lt;/label&amp;gt;
      &amp;lt;span&amp;gt;{{ memo._text }}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  {{ end }}
  &amp;lt;form e-submit=&amp;quot;add_memo&amp;quot;&amp;gt;
    &amp;lt;label&amp;gt;memo: &amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; value=&amp;quot;{{ page._new_text }}&amp;quot; /&amp;gt;
  &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# @ app/main/controllers/main_controller.rb
module Main
  class MainController &amp;lt; Volt::ModelController
    def add_memo
      store._memos &amp;lt;&amp;lt; { text: page._new_text }
      page._new_text = &#39;&#39;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Viewでは&lt;code&gt;each&lt;/code&gt;バインディングでイテレーションができる.&lt;/li&gt;
&lt;li&gt;Viewでは&lt;code&gt;e-{イベント名}&lt;/code&gt;の属性でイベントをバインドして、Controllerのメソッドを呼び出すことができる.&lt;/li&gt;
&lt;li&gt;Viewでは&lt;code&gt;{{&lt;/code&gt;と&lt;code&gt;}}&lt;/code&gt;で囲った中のRubyのCodeを実行し、その返り血をrenderできる.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;はControllerのインスタンスなので&lt;code&gt;{{ add_memo }}&lt;/code&gt;で&lt;code&gt;main_controller.rb&lt;/code&gt;の&lt;code&gt;add_memo&lt;/code&gt;が実行される.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;(&lt;strong&gt;Underscore Accessors&lt;/strong&gt;)によって事前に定義せずにPropertyにgetとsetができる.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page&lt;/code&gt;は&lt;strong&gt;Page Collection&lt;/strong&gt;と呼ばれるもので、一時的にデータを保存するためのもの.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value=&amp;quot;{{ page._new_text }}&amp;quot;&lt;/code&gt;で双方向バインドが可能.

&lt;ul&gt;
&lt;li&gt;Controllerでもpage._nex_textにget, setが可能.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt;は&lt;strong&gt;Store Collection&lt;/strong&gt;と呼ばれるもので、データベースにデータを保存するためのもの.&lt;/li&gt;
&lt;li&gt;Voltは複数形の属性を自動的に空の&lt;code&gt;Volt::ArrayModel&lt;/code&gt;に初期化する.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Volt::ArrayModel&lt;/code&gt;にハッシュを追加した場合、自動的にVoltのモデルに変換される.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これだけで&lt;code&gt;memo:&lt;/code&gt;のText Inputに入力してEnterすると、Memoの追加ができる.&lt;/p&gt;

&lt;p&gt;これを複数Clientsで操作をするとリアルタイムで同期しているのが確認できる.&lt;/p&gt;

&lt;h2 id=&#34;reactive-data-bindings:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Reactive Data Bindings&lt;/h2&gt;

&lt;p&gt;DOM (および値が変更されたことを検知したい他のすべてのコード)に対して、
自動的に、かつ正確に変更を伝えるために、データフロー／リアクティブプログラミングを利用する.&lt;/p&gt;

&lt;p&gt;DOMに何らかの変更があった場合に、Voltは変更が必要なノードだけを更新する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;!-- @ app/main/views/index.html --&amp;gt;
 &amp;lt;:Body&amp;gt;
   {{ store._memos.each_with_index do |memo, index| }}
     &amp;lt;div&amp;gt;
       &amp;lt;label&amp;gt;{{ index + 1 }}&amp;lt;/label&amp;gt;
       &amp;lt;span&amp;gt;{{ memo._text }}&amp;lt;/span&amp;gt;
     &amp;lt;/div&amp;gt;
   {{ end }}
   &amp;lt;form e-submit=&amp;quot;add_memo&amp;quot;&amp;gt;
     &amp;lt;label&amp;gt;memo&amp;lt;/label&amp;gt;
     &amp;lt;input type=&amp;quot;text&amp;quot; value=&amp;quot;{{ page._new_text }}&amp;quot; /&amp;gt;
   &amp;lt;/form&amp;gt;
+  {{ if too_much_memos }}&amp;lt;div&amp;gt;Are you crazy??&amp;lt;/div&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; # @ app/main/controllers/main_controller.rb
 module Main
   class MainController &amp;lt; Volt::ModelController
     def add_memo
       store._memos &amp;lt;&amp;lt; { text: page._new_text }
       page._new_text = &#39;&#39;
     end
+
+    def too_much_memos
+      store._memos.size.then do |size|
+        size &amp;gt; 10
+      end
+    end
   end
 end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt;の&lt;code&gt;ArrayModel&lt;/code&gt;に対するメソッド実行は&lt;code&gt;promise&lt;/code&gt;を返す.

&lt;ul&gt;
&lt;li&gt;結果を処理するときは&lt;code&gt;.then&lt;/code&gt;を使う.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://opalrb.org/blog/2014/05/07/promises-in-opal/&#34;&gt;Promises in Opal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ロジックを&lt;strong&gt;宣言的に&lt;/strong&gt;記述すると、Userの操作に&lt;strong&gt;reactive&lt;/strong&gt;にDOMが更新される.&lt;/p&gt;

&lt;h2 id=&#34;components:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;Components&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ApplicationはComponentから成り立っている.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/&lt;/code&gt;以下のすべてのdirectoryはComponentである.&lt;/li&gt;
&lt;li&gt;ComponentはGemにすることも可能.&lt;/li&gt;
&lt;li&gt;Componentの依存が可能.&lt;/li&gt;
&lt;li&gt;ClientとServerでコードを共有できることによって、Full StackなComponentの提供を実現する.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Componentに分割することにより、コードを再利用可能で疎結合でテストを容易なものにする.&lt;/p&gt;

&lt;h2 id=&#34;see-also:8c63057b999b8f8f5d0ebcbc905bc390&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/voltrb/volt/&#34;&gt;Volt GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://voltframework.com/docs&#34;&gt;Volt Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/opal/opal&#34;&gt;Opal GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fiveteesixone.lackland.io/2015/08/03/10-minutes-volt-chat-application-tutorial/&#34;&gt;Volt を使って10分でリアルタイムチャットアプリケーションを作るチュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/todo_example_volt&#34;&gt;Todo-Example-Volt GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Integral-Rest</title>
      <link>http://blog.rudolph-miller.com/2015/08/21/integral-rest/</link>
      <pubDate>Fri, 21 Aug 2015 11:20:54 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/21/integral-rest/</guid>
      <description>

&lt;p&gt;稚拙のIntegral-Restを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#integral-rest:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;Integral-Rest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;integral-rest:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;Integral-Rest&lt;/h2&gt;

&lt;p&gt;Integral-RestはIntegralのDAO tableからREST APIを簡単に作るLibrary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defpackage sample
  (:use :cl
        :integral
        :integral-rest))
(in-package :sample)

(connect-toplevel :sqlite3 :database-name &amp;quot;:memory:&amp;quot;)

(defclass user ()
  ((id :initarg :id
       :type integer
       :primary-key t
       :accessor user-id)
   (name :initarg :name
         :type string
         :accessor user-name))
  (:metaclass integral:&amp;lt;dao-table-class&amp;gt;))

(ensure-table-exists (find-class &#39;user))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:metaclass&lt;/code&gt;として&lt;code&gt;integral:&amp;lt;dao-table-class&amp;gt;&lt;/code&gt;を指定し、&lt;code&gt;user&lt;/code&gt;を&lt;code&gt;defclass&lt;/code&gt;する.&lt;br /&gt;
後は&lt;code&gt;(set-rest-app)&lt;/code&gt;をすると&lt;code&gt;*rest-app*&lt;/code&gt;がREST API appに束縛されので、&lt;br /&gt;
&lt;code&gt;*rest-app*&lt;/code&gt;は&lt;code&gt;ningle:&amp;lt;app&amp;gt;&lt;/code&gt;の&lt;code&gt;instance&lt;/code&gt;なので、これをそのまま&lt;code&gt;clack:clackup&lt;/code&gt;できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(set-rest-app)

(clack:clackup *rest-app*)
;; =&amp;gt; Listening on localhost:5000.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでREST API ServerがPort 5000で立ち上がる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;)
;; =&amp;gt; #&amp;lt;USER id: 1&amp;gt;

(dex:get &amp;quot;http://localhost:5000/api/users&amp;quot;)
;; =&amp;gt; &amp;quot;[{\&amp;quot;id\&amp;quot;:1,\&amp;quot;name\&amp;quot;:\&amp;quot;Rudolph\&amp;quot;}]&amp;quot;

(dex:get &amp;quot;http://localhost:5000/api/users/1&amp;quot;)
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:1,\&amp;quot;name\&amp;quot;:\&amp;quot;Rudolph\&amp;quot;}&amp;quot;

(dex:post &amp;quot;http://localhost:5000/api/users&amp;quot; :contest &#39;((&amp;quot;name&amp;quot; . &amp;quot;Miller&amp;quot;)))
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Miller\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; #&amp;lt;USER id: 2 name: &amp;quot;Miller&amp;quot;&amp;gt;

(dex:put &amp;quot;http://localhost:5000/api/users/2&amp;quot; :contest &#39;((&amp;quot;name&amp;quot; . &amp;quot;Tom&amp;quot;)))
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Tom\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; #&amp;lt;USER id: 2 name: &amp;quot;Tom&amp;quot;&amp;gt;

(dex:delete &amp;quot;http://localhost:5000/api/users/2&amp;quot;)
;; =&amp;gt; &amp;quot;{\&amp;quot;id\&amp;quot;:2,\&amp;quot;name\&amp;quot;:\&amp;quot;Tom\&amp;quot;}&amp;quot;

(find-dao &#39;user 2)
;; =&amp;gt; NIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっとしたAPI Serverだと&lt;code&gt;app.lisp&lt;/code&gt;に十数行で書ける.&lt;/p&gt;

&lt;h2 id=&#34;see-also:1b7c182b77a3e5cf7ce9ca5c9ca33b73&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/integral-rest&#34;&gt;Integral-Rest GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/integral-rest/overview.html&#34;&gt;Integral-Rest Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker image for Clack Application</title>
      <link>http://blog.rudolph-miller.com/2015/08/20/docker-image-for-clack-application/</link>
      <pubDate>Thu, 20 Aug 2015 10:10:48 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/20/docker-image-for-clack-application/</guid>
      <description>

&lt;p&gt;Clack Application用のDocker base imageを作成したので紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;How to use.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-to-use:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;How to use.&lt;/h2&gt;

&lt;p&gt;簡単な&lt;code&gt;app.lisp&lt;/code&gt;を用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defvar *app*
  (lambda (env)
    (declare (ignore env))
    &#39;(200 (:content-type &amp;quot;text/plain&amp;quot;) (&amp;quot;Hello, World&amp;quot;))))

(lack:builder
 :session
 *app*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt;として&lt;code&gt;rudolphm/clack&lt;/code&gt;を指定してDockerfileを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FROM rudolphm/clack:latest
MAINTAINER Rudolph Miller


ADD app.lisp /usr/local/src/clack-test/

CMD clackup --port 5000 --server woo /usr/local/src/clack-test/app.lisp
EXPOSE 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfileでやっているのは上の&lt;code&gt;app.lisp&lt;/code&gt;を配置して、
&lt;code&gt;ENTRYPOINT&lt;/code&gt;として&lt;code&gt;clackup --port 5000 --server woo app.lisp&lt;/code&gt;を指定しているだけだ.
後はDockerで&lt;code&gt;build&lt;/code&gt;して&lt;code&gt;run&lt;/code&gt;するとClack Applicationが動く.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t clack-sample ./
docker run -d -p 5000:5000 clack-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common Lispもようやくここまで来たかって所感.&lt;/p&gt;

&lt;h2 id=&#34;see-also:cea2b2dc75a3d671d3ebef79d9a355b3&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/dockerfile-clack&#34;&gt;Dockerfile-Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/woo&#34;&gt;Woo GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snmsts/roswell&#34;&gt;Roswell GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Itamae</title>
      <link>http://blog.rudolph-miller.com/2015/08/18/introduction-to-itamae/</link>
      <pubDate>Tue, 18 Aug 2015 22:19:36 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/18/introduction-to-itamae/</guid>
      <description>

&lt;p&gt;Itamaeを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#what-itamae-is:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;What Itamae is.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use-itamae:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;How to use Itamae.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-itamae-is:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;What Itamae is.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/itamae-kitchen/itamae&#34;&gt;Itamae&lt;/a&gt;はサーバーの構成管理ツールの一つ.&lt;/li&gt;
&lt;li&gt;Ruby DSLが使えるが、Chefほど色々覚えなくて良い.&lt;/li&gt;
&lt;li&gt;レシピをGemに閉じ込めることが可能.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本当に簡単に使え、Bundlerで依存管理が可能で、使い勝手が良かったので紹介する.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-itamae:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;How to use Itamae.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install itamae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でitamaeをinstallし、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;package &#39;sl&#39; do
  action :install
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;sl.rb&lt;/code&gt;に書き込む.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;itamae local sl.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でlocalに&lt;code&gt;sl&lt;/code&gt;をinstallできる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install &#39;docker-api&#39;
itamae docker --image centos sl.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;centos&lt;/code&gt;をBaseに&lt;code&gt;sl&lt;/code&gt;コマンド入りのDocker imageを作成できる.&lt;br /&gt;
と言いたいとこだが、&lt;code&gt;No package sl available.&lt;/code&gt;だ.&lt;br /&gt;
仕方ないので、&lt;code&gt;centos&lt;/code&gt;ではSourceからmakeするよう&lt;code&gt;sl.rb&lt;/code&gt;を変更する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;case node[:platform]
when &#39;darwin&#39;
  package &#39;sl&#39;
when &#39;redhat&#39;
  %w( git gcc make ncurses-devel ).each do |package|
    package package do
      action :install
    end
  end

  git &#39;/usr/local/src/sl&#39; do
    repository &#39;https://github.com/mtoyoda/sl&#39;
  end

  execute &#39;install sl&#39; do
    cwd &#39;/usr/local/src/sl&#39;
    command &amp;lt;&amp;lt;-&amp;quot;EOS&amp;quot;
    make
    cp ./sl /usr/local/bin/sl
    EOS
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;node[:platform]&lt;/code&gt;で分岐して&lt;code&gt;redhat&lt;/code&gt;なら&lt;a href=&#34;https://github.com/mtoyoda/sl&#34;&gt;Source&lt;/a&gt;をからbuildする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ itamae docker --image centos sl.rb
 INFO : Starting Itamae...
 INFO : Recipe: /Users/tomoya/ruby/sample.rb
 INFO :   package[git] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   package[gcc] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   package[make] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   package[ncurses-devel] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   git[/usr/local/src/sl] exist will change from &#39;false&#39; to &#39;true&#39;
 INFO :   execute[install sl] executed will change from &#39;false&#39; to &#39;true&#39;
 INFO : Image created: 7534d8550ce218cc9d111e92a28e1c56549730bf52d5e6c83363f8a9b2042825
$ docker run -it 7534d8550ce218cc9d111e92a28e1c56549730bf52d5e6c83363f8a9b2042825 sl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でdocker containerでSLが走る.&lt;/p&gt;

&lt;p&gt;GemとしてpublishされているRecipeを使用するのも簡単だ.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install itamae-plugin-recipe-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;nginx&lt;/code&gt;のRecipeをinstallし、
(登録されていないので実際にはinstallできない.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# To include recipe at lib/itamae/plugin/recipe/nginx.rb
include_recipe &#39;nginx&#39;

# To include recipe at lib/itamae/plugin/recipe/nginx/debug.rb
include_recipe &#39;nginx::debug&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くだけでRecipeのincludeができる.&lt;/p&gt;

&lt;h2 id=&#34;see-also:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/itamae-kitchen/itamae&#34;&gt;Itamae GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui&#34;&gt;Itamae - Infra as Code 現状確認会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mizzy/specinfra&#34;&gt;Specinfra GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Clipper</title>
      <link>http://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</link>
      <pubDate>Mon, 10 Aug 2015 13:53:10 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</guid>
      <description>

&lt;p&gt;稚作のClipperを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/h2&gt;

&lt;p&gt;例えばMicro Blogサービスを作るとしよう.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.models
  (:use :cl
        :integral))
(in-package :sample.models)

(defclass user ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :reader user-id)
   (name :col-type (:varchar 255)
         :initarg :name
         :accessor user-name))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defclass post ()
  ((id :type (:integer 11)
       :primary-key t
       :auto-increment t
       :not-null t
       :reader post-id)
   (content :type string
            :col-type (:varchar 255)
            :initarg :content
            :accessor post-content)
   (user-id :type integer
            :initarg :user-id
            :accessor post-user-id))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defun user-posts (user)
  (check-type user user)
  (select-dao &#39;post (where (:= :user_id (user-id user)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じに&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt;を使用しModelとして&lt;code&gt;user&lt;/code&gt;と&lt;code&gt;post&lt;/code&gt;を定義する.
とりあえずこれで&lt;code&gt;user&lt;/code&gt;に紐づく&lt;code&gt;post&lt;/code&gt;の投稿と&lt;code&gt;post&lt;/code&gt;の一覧機能ができる.&lt;/p&gt;

&lt;p&gt;次に&lt;code&gt;user&lt;/code&gt;が名前の表示だけじゃ物足りなく感じ、Iconを設定できるようにしてみる.
Iconを設定するためにはImage Filesを保存、管理しなくてはならない.&lt;/p&gt;

&lt;p&gt;開発を進めて行く内に、
「開発時はBrowserで確認するため&lt;code&gt;static/images/icons&lt;/code&gt;に保存し、
test時は開発環境を壊したくないため&lt;code&gt;t/images/icons&lt;/code&gt;に保存したい.
その上、productionではS3のBucketに保存したい.」
となるのは当然だと思う.
(少なくとも僕はそれが必要になった.)&lt;/p&gt;

&lt;p&gt;これらの切り替えを簡単にするのが&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;Clipper&lt;/a&gt;だ.&lt;/p&gt;

&lt;p&gt;とりあえずIconのModelとして&lt;code&gt;icon&lt;/code&gt;を用意して、&lt;code&gt;user&lt;/code&gt;と紐づける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defclass icon ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :initarg :id)
   (user-id :type integer)
   (image-file-name :col-type (:varchar 255)
                    :initarg :image-file-name)
   (image-content-type :col-type (:varchar 255)
                       :initarg :image-content-type)
   (image-file-size :col-type (:integer 11)
                    :initarg :image-file-size)
   (url :type string
        :initarg :url))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))


(defun user-icon (user)
  (check-type user user)
  (car
   (select-dao &#39;icon
               (where (:= :user_id (user-id user)))
               (limit 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数でのconfigの切り替えに&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt;を使用し、
&lt;code&gt;clipper:setup-clipper&lt;/code&gt;の引数をenvごとに管理する.
又、切り替えのための&lt;code&gt;sample.models::setup-clipper&lt;/code&gt;も定義しておく.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.config
  (:use :cl)
  (:import-from :envy
                :config-env-var
                :defconfig))
(in-package :sample.config)

(setf (config-env-var) &amp;quot;APP_ENV&amp;quot;)

(defconfig |development|
    `(:clipper (:store-type :local
                :image-directory #P&amp;quot;/home/user/app/images/icons&amp;quot;
                :relative #P&amp;quot;/home/user/app/&amp;quot;
                :prefix &amp;quot;http://localhost:3000/&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defconfig |production|
    `(:clipper (:store-type :s3
                :aws-access-key (uiop:getenv &amp;quot;AWS_ACCESS_KEY&amp;quot;)
                :aws-secret-key (uiop:getenv &amp;quot;AWS_SECRET_KEY&amp;quot;)
                :s3-endpoint &amp;quot;s3-ap-northeast-1.amazonaws.com&amp;quot;
                :s3-bucket-name &amp;quot;sample-app&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defun config ()
  (envy:config #.(package-name *package*)))


(in-package :sample.models)

(defun setup-clipper ()
  (apply #&#39;clipper:setup-clipper
         (append (list :clipper-class (find-class &#39;icon))
                 (getf (sample.config::config) :clipper))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると環境変数&lt;code&gt;APP_ENV&lt;/code&gt;によってImage Filesの保存先を切り替えられる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(in-package :sample.models)

(ql:quickload :osicat)

(defvar *url* &amp;quot;http://www.lisperati.com/lisplogo_alien_256.png&amp;quot;)

;; APP_ENV=development
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;development&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;http://localhost:3000/images/icons/1/lisplogo_alien_256.png&amp;quot;


;; APP_ENV=production
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;production&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;John&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;https://s3-ap-northeast-1.amazonaws.com/sample-app/2/lisplogo_alien_256.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;便利.&lt;/p&gt;

&lt;h2 id=&#34;see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/clipper/overview.html&#34;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/clipper/&#34;&gt;Quickdocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt; - An object relational mapper for Common Lisp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt; - Configuration switcher by an environment variable inspired by Config::ENV.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xach.com/lisp/zs3/&#34;&gt;ZS3&lt;/a&gt; - Amazon S3 and CloudFront from Common Lisp.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>