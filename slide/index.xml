<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/slide/</link>
    <description>Recent content in Slides on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; Copyright 2015 Rudolph Miller</copyright>
    <lastBuildDate>Thu, 29 Oct 2015 00:34:45 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/slide/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About Lisp</title>
      <link>http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</link>
      <pubDate>Thu, 29 Oct 2015 00:34:45 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/</guid>
      <description>

&lt;p&gt;name: lisp
layout: true&lt;/p&gt;

&lt;h2 id=&#34;class-center-middle-lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;class: center, middle, lisp&lt;/h2&gt;

&lt;h1 id=&#34;tech-talk-4:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Tech Talk #4&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;rudolph-miller:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;@Rudolph-Miller&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/favicon.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( &lt;a href=&#34;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&#34;&gt;http://somewrite.com/wp-content/uploads/2015/04/somelogo1.png&lt;/a&gt; )&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;common-lisper:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Common Lisper&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;lisp:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp??&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/search.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;ｌｉｓｐ-は超至近距離アイドル:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「ＬＩＳＰ」は超至近距離アイドル&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;キミとセツゾク-が合言葉:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;「キミとセツゾク」が合言葉&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-idle.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;toc_7:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;???&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-alien.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;lisp-1:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lisp&lt;/h1&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- 1958年
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- John McCarthy
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Dynamic and strong typing
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Multiparadigm
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- S-expression and Polish Notation
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Syntactic coherence
]&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;p&gt;.right-column[
- Code is made up of first-class object
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;1958:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;1958&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;class: bottom, center&lt;/p&gt;

&lt;p&gt;background-image: url( /images/20151029/programming-languages.png )&lt;/p&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h3 id=&#34;only-fortran-is-older:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;only FORTRAN is older&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;john-mccarthy:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;John McCarthy&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;class: middle, center
layout: true&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;the-father-of-ai:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;the father of AI&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;invented-garbage-collection:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;invented Garbage Collection&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false
template: lisp&lt;/p&gt;

&lt;h1 id=&#34;dynamic-and-strong-typing:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Dynamic and strong typing&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing1.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/typing2.png )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;multiparadigm:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Multiparadigm&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;imperative:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Imperative&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;object-oriented:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Object-oriented&lt;/h1&gt;

&lt;p&gt;&amp;ndash;&lt;/p&gt;

&lt;h1 id=&#34;functional:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Functional&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;s-expression-and-polish-notation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression and Polish Notation&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url( /images/20151029/lisp-keyboard.jpg )&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;lots-of-irritating-superfluous-parentheses:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Lots of Irritating Superfluous Parentheses&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bnf&#34;&gt;&amp;lt;S-exp&amp;gt; ::= &amp;lt;List&amp;gt; | &amp;lt;Atom&amp;gt; 
&amp;lt;List&amp;gt;  ::= (&amp;lt;S-exp&amp;gt;*) 
&amp;lt;Atom&amp;gt;  ::= &amp;lt;Symbol&amp;gt; | &amp;lt;Number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun add1 (num1 num2)
  (+ num1 num2))

(add1 (add1 1 2) 3)
;; =&amp;gt; 6

(reduce #&#39;add1 (list 1 2 3))
;; =&amp;gt; 6

(defun add2 (&amp;amp;rest args)
  (reduce #&#39;add args))

(add2 1 2 3)
;; =&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;syntactic-coherence:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Syntactic coherence&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;code-is-made-up-of-first-class-object:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Code is made up of first-class object&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Code
(defun add1 (num1 num2)
  (+ num1 num2))

;; Data
(list &#39;defun &#39;add1 (list &#39;num1 num2)
  (list &#39;+ &#39;num1 &#39;num2))

&#39;(defun add1 (num1 num2)
  (+ num1 num2))

;; REPL
(eval
 &#39;(defun add1 (num1 num2)
    (+ num1 num2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;you-can-compile-or-run-code-while-reading-read-or-run-code-while-compiling-and-read-or-compile-code-at-runtime:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.&lt;/h2&gt;

&lt;p&gt;quated from &amp;ldquo;&lt;a href=&#34;http://www.paulgraham.com/diff.html&#34;&gt;What Made Lisp Different&lt;/a&gt;&amp;rdquo; by Paul Graham&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while reading
(defun char-code-a-p (int)
  (= int #.(char-code #\a)))

(defun char-code-a-p (int)
  (= int 97))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; run code while compiling
(defun include-p-1 (string char)
  (when (find char string) t))

(defmacro include-p-2 (string char)
  (let ((hash (make-hash-table)))
    (loop for c across string
      (setf (gethash c hash) t))
    `(gethash ,char ,hash)))

(defun time-of-include-p-1 ()
  (time (loop repeat 10000000 do (include-p-1 &amp;quot;sample&amp;quot; #\a))))

(defun time-of-include-p-2 ()
  (time (loop repeat 10000000 do (include-p-2 &amp;quot;sample&amp;quot; #\a))))

(time-of-include-p-1)
;; 0.495 seconds of real time
;; 1,336,787,055 processor cycles

(time-of-include-p-2)
;; 0.003 seconds of real time
;; 8,880,960 processor cycles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left[&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; compile code at runtime
(defun define-add-some (some)
  (eval
   `(defun add-some (int)
      (+ int ,some))))

(define-add-some 10)
;; add-some

(add-some 2)
;; =&amp;gt; 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;the-whole-language-always-available:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;The whole language always available.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;what-is-s-expression-for-us:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;What is S-expression for us??&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h2 id=&#34;need-not-think-of-how-to-express-thought:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;Need not think of how to express thought,&lt;/h2&gt;

&lt;h2 id=&#34;just-express-thought:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;just express thought.&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;template: lisp&lt;/p&gt;

&lt;h1 id=&#34;s-expression-is-a-method-of-salvation:2bcfea0b21f928ca7a28c561fd91b8fa&#34;&gt;S-expression is a method of salvation.&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Ruby on Rails</title>
      <link>http://blog.rudolph-miller.com/slide/2015/10/16/upgrade_ruby_on_rails/</link>
      <pubDate>Fri, 16 Oct 2015 12:01:40 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/slide/2015/10/16/upgrade_ruby_on_rails/</guid>
      <description>

&lt;p&gt;name: inverse
layout: true&lt;/p&gt;

&lt;h2 id=&#34;class-center-middle-inverse:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;class: center, middle, inverse&lt;/h2&gt;

&lt;h1 id=&#34;kaizen-week-1:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;Kaizen Week #1&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;rudolph-miller:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;@Rudolph-Miller&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;3-2-to-4-2:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;3.2 to 4.2&lt;/h1&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;upgrade-ruby-on-rails:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;Upgrade Ruby on Rails&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;layout: false
.left-column[&lt;/p&gt;

&lt;h1 id=&#34;手順:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;手順&lt;/h1&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;.right-column[
1. リリースノート.
  - リリースノートで変更を頭に入れておく.
2. Gemのupgrade.
  - RailsのUpgrade.
  - 依存解決.
3. 作業.
  - 壊れたところを直す.
4. 2 -&amp;gt; 3を繰り返す.
  - RailsのVersionは徐々にあげる.
  - 3.2 -&amp;gt; 4.0 -&amp;gt; 4.1 -&amp;gt; 4.2
]&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;リリースノートはnew-railsの説明書:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;リリースノートはNew Railsの説明書&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/4_0_release_notes.html&#34;&gt;Ruby on Rails 4.0 リリースノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/4_1_release_notes.html&#34;&gt;Ruby on Rails 4.1 リリースノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://railsguides.jp/4_2_release_notes.html&#34;&gt;Ruby on Rails 4.2 リリースノート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;template: inverse&lt;/p&gt;

&lt;h1 id=&#34;説明書は読まないタイプ:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;説明書は読まないタイプ.&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h1 id=&#34;作業:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;作業&lt;/h1&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;.right-column[
1. Railsのupdate.
2. &lt;code&gt;bundle upgate rails&lt;/code&gt;
  - 依存解決に失敗したら頑張る.
  - &lt;code&gt;bundle update&lt;/code&gt;
3. &lt;code&gt;bundle exec rake rails:update&lt;/code&gt;
  - config fileのupdate.
4. &lt;code&gt;bundle exec rake spec&lt;/code&gt;
  - 起動するまで頑張る.
  - 起動してからも頑張る.
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;template: inverse&lt;/p&gt;

&lt;h1 id=&#34;障害:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;障害&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h2 id=&#34;api変更:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;API変更&lt;/h2&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;.right-column[
- scopeの書き方.
  - 心を無にして対応.
- relationの定義のincludeがdeprecated.
  - 心を無にして(ry.
- joinsしてそのtableの条件を使用する時はreferencesを明示する.
  - 心を(ry.
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h2 id=&#34;gem:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;Gem&lt;/h2&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;.right-column[
- メンテ停止したGem達.
- 別Versionでの動作が保証されていないpatchが多数.
]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;.left-column[&lt;/p&gt;

&lt;h2 id=&#34;activerecord:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;ActiveRecord&lt;/h2&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;.right-column[&lt;/p&gt;

&lt;h3 id=&#34;失われた-bind-values:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;失われた&lt;code&gt;bind_values&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ActiveRecordをUpgrade.

&lt;ul&gt;
&lt;li&gt;4.0 -&amp;gt; 4.1&lt;/li&gt;
&lt;li&gt;4.1 -&amp;gt; 4.2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;existsがbroken.

&lt;ul&gt;
&lt;li&gt;とはいえ相関subqueryのPerformanceは.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;で書き直すか.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;subqueryがbroken.
]&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;template: inverse&lt;/p&gt;

&lt;h1 id=&#34;結果:01b2bdbc95643419b77b9948ad6b09f4&#34;&gt;結果&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;background-image: url(/images/20151016/to_be_continued.jpg)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>