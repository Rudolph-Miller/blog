<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on (rudolph-miller)</title>
    <link>https://blog.rudolph-miller.com/post/</link>
    <description>Recent content in Posts on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2015 - 2016 Rudolph Miller</copyright>
    <lastBuildDate>Sat, 11 Jun 2016 08:01:45 +0900</lastBuildDate>
    <atom:link href="https://blog.rudolph-miller.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create Regular Expression Engine</title>
      <link>https://blog.rudolph-miller.com/2016/06/11/create-regexp-engine/</link>
      <pubDate>Sat, 11 Jun 2016 08:01:45 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/06/11/create-regexp-engine/</guid>
      <description>

&lt;p&gt;正規表現エンジンの作り方 (と形式言語とオートマトン).&lt;br /&gt;
(数式多めなのでPCでの閲覧を推奨.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#regular-expression:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#history:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Math&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language-regular-expression:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;amp; Regular Expression&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ring:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#semi-ring:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Semi-ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#idempotent-semi-ring:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Idempotent semi-ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kleene-algebra:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Kleene algebra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pure-regular-expression:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Pure Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-expression-regular-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Expression =&amp;gt; Regular Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language-regular-expression-1:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language =&amp;gt; Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language-regular-expression-2:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;lt;=&amp;gt; Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language-finite-automaton:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;amp; Finite Automaton&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#abstract-machine:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Abstract machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finite-automaton:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Finite automaton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deterministic-finite-automaton:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Deterministic Finite Automaton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deterministic-vs-non-deterministic:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Deterministic vs. Non-deterministic&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#dfa-nfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;DFA =&amp;gt; NFA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nfa-dfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;NFA =&amp;gt; DFA&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#記号列遷移の1記号遷移化:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;記号列遷移の1記号遷移化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#epsilon-遷移の除去:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;$\epsilon$ 遷移の除去&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subset-construction-により-dfa-の構成:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Subset construction により DFA の構成&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dfa-nfa-1:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;DFA &amp;lt;=&amp;gt; NFA&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fa-s-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&amp;rsquo;s Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language-fa-s-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language =&amp;gt; FA&amp;rsquo;s Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fa-s-language-regular-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&amp;rsquo;s Language =&amp;gt; Regular Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#regular-language-fa-s-language-1:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;lt;=&amp;gt; FA&amp;rsquo;s Language&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#result:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Implementation:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Implementation&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ast:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;AST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parser:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;NFA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#match:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Match&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wrap-up:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Wrap-up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;そういえば正規表現エンジン作ったことないやと思ったので作ってみた.&lt;br /&gt;
正規表現、形式言語、オートマトンの関係 (の数学的定義と証明) をついでにまとめてみた.&lt;/p&gt;

&lt;h1 id=&#34;regular-expression:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Expression&lt;/h1&gt;

&lt;p&gt;Regular expression (正規表現) は文字列のパターンの表現.&lt;/p&gt;

&lt;p&gt;regular (正規) に深い意味はないらしい.
というか &amp;ldquo;regular&amp;rdquo; に &amp;ldquo;正規&amp;rdquo; って訳語は違和感しかない.
数学では &amp;ldquo;正則&amp;rdquo; が定訳なはず.&lt;/p&gt;

&lt;h1 id=&#34;history:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;History&lt;/h1&gt;

&lt;p&gt;1943年、Waren McCullochとWalter Pittsが
&lt;a href=&#34;http://cns-classes.bu.edu/cn550/Readings/mcculloch-pitts-43.pdf&#34;&gt;A Logical Calculus of the Ideas Immanent in Nervous Activity&lt;/a&gt;
で神経細胞の振る舞いを計算モデル化した Formal neurons (形式ニューロン) を提案した.&lt;br /&gt;
Formal neurons は論理回路で言うところのORゲート、ANDゲート、NOTゲートを持っていたので任意の論理回路を表現することができた.
(Formal neurons は記憶領域が無いため、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E5%AE%8C%E5%85%A8&#34;&gt;チューリング完全&lt;/a&gt;ではない.)&lt;br /&gt;
さらに彼らは同論文の中で Formal neurons の独自の記法を導入した.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160608/formal_neurons.png&#34; alt=&#34;20160608/formal_neurons.png&#34;&gt;


&lt;p&gt;1951年、Kleeneが
&lt;a href=&#34;https://www.rand.org/content/dam/rand/pubs/research_memoranda/2008/RM704.pdf&#34;&gt;Representation of Events in Nerve Nets and Finite Automata&lt;/a&gt;
で Formal neurons の表現として Regular expression を提案し、
さらに同論文の中で Finite automaton (有限オートマトン) という計算モデルの導入を行い、
Formal neurons が Finite automatonに変換できることを示した.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160608/regexp.png&#34; alt=&#34;20160608/regexp.png&#34;&gt;


&lt;p&gt;1959年、M.O.RabinとD.Scottが
&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/AUTOMATA/rs.pdf&#34;&gt;Finite Automata and Their Decision Problems&lt;/a&gt;
で Non-deterministic finite automaton (NFA, 非決定性有限オートマトン) を導入し、決定性と非決定性の等価性を照明した.&lt;/p&gt;

&lt;p&gt;1968年、 Kenneth Thompsonが
&lt;a href=&#34;http://www.fing.edu.uy/inco/cursos/intropln/material/p419-thompson.pdf&#34;&gt;Regular Expression Search Algorithm&lt;/a&gt;
で正規表現を入力としてそれにマッチする文字列を検索する仕組みの提案と、その実装方法を示した.&lt;br /&gt;
それまでの検索アルゴリズムは部分的にマッチしたルートが途中でマッチに失敗したときに Backtracking (直近の処理の分岐点に戻ること) をしていた.&lt;br /&gt;
このアルゴリズムは直近の分岐点の保存のため多量の storage を必要とし、さらにとても遅かった.&lt;br /&gt;
そこで記憶領域を使用しない計算モデルである NFA を使用し、それらの問題を解決した.&lt;br /&gt;
この論文では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regular expression から NFA を構築する方法 (Thompson&amp;rsquo;s construction algorithm, Thompsonの構成法)&lt;/li&gt;
&lt;li&gt;NFA を効率よくシミュレートする方法 (Thompson NFA)&lt;/li&gt;
&lt;li&gt;シミュレーションを実行するIBM 7094 codeを直接生成する方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を示した.&lt;br /&gt;
最後のはつまり Regular expression のJIT compiler. 世界初のRegular expressionの実装の論文にも関わらず、
JIT compilerまで実装して発表していた.&lt;/p&gt;

&lt;h1 id=&#34;math:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Math&lt;/h1&gt;

&lt;p&gt;Regular expression と Finite automaton の関係について Regular language を経由して述べる.&lt;/p&gt;

&lt;h2 id=&#34;regular-language-regular-expression:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;amp; Regular Expression&lt;/h2&gt;

&lt;p&gt;まずは Regular Language の定義 (とその前提知識の定義) と、
Regular language と Regular Expression の関係.&lt;/p&gt;

&lt;h3 id=&#34;ring:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Ring&lt;/h3&gt;

&lt;p&gt;Ring (環) とは、&lt;/p&gt;

&lt;p&gt;Set (集合) $R$上の加法 $+: R \times R \to R$ と乗法 $\cdot: R \times R \to R$ の組 $(R, +, \cdot)$ で、
$(R, +)$ が Abelian group (アーベル群) で $(R, \cdot)$ が Monoid (モノイド) なもので以下の分配法則を満たすもの.&lt;/p&gt;

&lt;p&gt;$$
a, b, c \in R\ で\ a \cdot (b + c) = a \cdot b + a \cdot c \ が成立する.
$$&lt;/p&gt;

&lt;p&gt;$$
a, b, c \in R\ で\ (a + b) \cdot c = a \cdot c + b \cdot c \ が成立する.
$$&lt;/p&gt;

&lt;p&gt;アーベル群？モノイド？ ggrks.&lt;br /&gt;
というか環の定義ぐらいは前提として良かったかもしれない.&lt;/p&gt;

&lt;h3 id=&#34;semi-ring:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Semi-ring&lt;/h3&gt;

&lt;p&gt;Semi-ring (半環) は Ring で $(R, +)$ の要求をモノイドとしたもの.&lt;/p&gt;

&lt;h3 id=&#34;idempotent-semi-ring:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Idempotent semi-ring&lt;/h3&gt;

&lt;p&gt;Idempotent semi-ring (冪等半環) は Semi-ring の加法に以下のように冪等演算であることを要求したもの.&lt;/p&gt;

&lt;p&gt;$$
\forall a \in R,\ a + a = a
$$&lt;/p&gt;

&lt;h3 id=&#34;kleene-algebra:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Kleene algebra&lt;/h3&gt;

&lt;p&gt;Kleene algebra (クリーネ代数, クリーニ代数) は Idempotent semi-ring
に、以下の性質を持つ Kleene star $^*: R \to R$ を導入したもの.&lt;br /&gt;
(なお、演算の優先順は $^ *$ , $\cdot$ , $+$ である.)&lt;/p&gt;

&lt;p&gt;$$
a, b \in R\ で、a \leq b \iff a + b = b\ として以下が成立する. \\
1 + a \cdot a^* \leq a^* \\
1 + a^* \cdot a \leq a^* \\
a \cdot b \leq b \Rightarrow a^* \cdot b \leq b \\
b \cdot a \leq b \Rightarrow b \cdot a^* \leq b
$$&lt;/p&gt;

&lt;p&gt;Kleene star は&lt;/p&gt;

&lt;p&gt;$$
a^* = 1 + a + a \cdot a + a \cdot a \cdot a \cdots
$$&lt;/p&gt;

&lt;p&gt;のようにも表せる.&lt;/p&gt;

&lt;h3 id=&#34;language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Language&lt;/h3&gt;

&lt;p&gt;$$
\Sigma = \lbrace \sigma \mid \sigma = 文字 \rbrace
$$&lt;/p&gt;

&lt;p&gt;のように文字の Set を考える. 文字は有限なのでこれは Finite set (有限集合) となる.&lt;br /&gt;
$\Sigma$ 上に文字列の集合 $\Sigma^*$ を考える. これは文字列の長さは無限なので Infinite set (無限集合) となる.&lt;/p&gt;

&lt;p&gt;$$
\Sigma^* = \lbrace \langle \sigma_1, \sigma_2, \cdots \rangle \mid \sigma_i \in \Sigma \cup \lbrace \epsilon \rbrace
$$&lt;/p&gt;

&lt;p&gt;ただし $\epsilon$ は空文字列を表す.&lt;/p&gt;

&lt;p&gt;Formal language (形式言語) の理論において、 $\Sigma$ 上の Language (言語) とは $\Sigma^*$ の部分集合のことを指す.&lt;/p&gt;

&lt;p&gt;$$
L \subseteq \Sigma^*
$$&lt;/p&gt;

&lt;h3 id=&#34;regular-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language&lt;/h3&gt;

&lt;p&gt;$\Sigma$ 上の Language $L$ に Kleene algebra を展開する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$\emptyset \subseteq L$ ($\emptyset$ は空集合)&lt;/li&gt;
&lt;li&gt;$\lbrace \epsilon \rbrace \subseteq L$&lt;/li&gt;
&lt;li&gt;$\forall \sigma \in \Sigma$ について $\lbrace \sigma \rbrace \subseteq L$&lt;/li&gt;
&lt;li&gt;$A, B \subseteq L$ について

&lt;ul&gt;
&lt;li&gt;$A \cup B \subseteq L$&lt;/li&gt;
&lt;li&gt;$A \cdot B \subseteq L$&lt;/li&gt;
&lt;li&gt;$A^* \subseteq L$

&lt;ul&gt;
&lt;li&gt;$A^* = \lbrace \epsilon \rbrace \cup A \cup A \cdot A \cup \cdots$&lt;/li&gt;
&lt;li&gt;Kleene closure (クリーネ閉包) と呼ぶ.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらを満たす Language をRelugar language (正規言語, $L_{RL}$) と呼ぶ.&lt;/p&gt;

&lt;h3 id=&#34;pure-regular-expression:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Pure Regular Expression&lt;/h3&gt;

&lt;p&gt;pure な Regular expression は文字と3つの基本演算で定義される.&lt;br /&gt;
(ここで pure といってるのは、Repular expression engine の実装依存の拡張と区別するため.)&lt;/p&gt;

&lt;p&gt;3つの基本演算:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choice (選択): &lt;code&gt;a|b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Concatenation (連接): &lt;code&gt;ab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repetition (繰り返し): &lt;code&gt;a*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお演算の優先順は Repetition , Concatenation , Choice である.&lt;/p&gt;

&lt;p&gt;Regular expression ($E$) は次の Grammer (文法) に従う.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$\epsilon \subseteq E$&lt;/li&gt;
&lt;li&gt;$\forall \sigma \in \Sigma\ で\ \sigma \in E$&lt;/li&gt;
&lt;li&gt;$E_1, E_2 \subseteq E\ で\ E_1|E_2 \subseteq E$&lt;/li&gt;
&lt;li&gt;$E_1, E_2 \subseteq E\ で\ E_1E_2 \subseteq E$&lt;/li&gt;
&lt;li&gt;$E1 \subseteq E\ で\ E1* \subseteq E$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;regular-expression-regular-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Expression =&amp;gt; Regular Language&lt;/h3&gt;

&lt;p&gt;Regular expression ($E$) が定義する $\Sigma$ 上の Language ($L(E)$)を考える.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$E = \epsilon\ なら\ L(E) = \emptyset$&lt;/li&gt;
&lt;li&gt;$\forall \sigma \in \Sigma\ で\ E = \sigma\ なら\ L(E) = \lbrace \sigma \rbrace$&lt;/li&gt;
&lt;li&gt;$E_1, E_2 \subseteq E\ で\ E = E_1|E_2\ なら\ L(E) = L(E_1) \cup L(E_2)$&lt;/li&gt;
&lt;li&gt;$E_1, E_2 \subseteq E\ で\ E = E_1E_2\ なら\ L(E) = L(E_1) \cdot L(E_2)$&lt;/li&gt;
&lt;li&gt;$E_1 \subseteq E\ で\ E = E_1*\ なら\ L(E) = L(E1)^ *$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これが与える Language を $L_{RE}$ とすると、上の定義より $L _{RE} \subseteq L _{RL}$ がわかる.&lt;br /&gt;
つまり、 Regular expression が与えられると必ず対応する Regular language が存在することがわかる.&lt;/p&gt;

&lt;h3 id=&#34;regular-language-regular-expression-1:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language =&amp;gt; Regular Expression&lt;/h3&gt;

&lt;p&gt;与えられた Regular language ($L$) から、その Language を定義する
Regular expression ($E(L)$) の構成法を考える.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$L = \emptyset\ なら\ E(L) = E(\emptyset) = \epsilon$&lt;/li&gt;
&lt;li&gt;$\sigma \in \Sigma\ で\ L = \lbrace \sigma \rbrace\ なら\ E(L) = E(\lbrace \sigma \rbrace) = \sigma$&lt;/li&gt;
&lt;li&gt;$L_1, L_2 \subseteq L\ で\ L = L_1 \cup L_2\ なら\ E(L) = E(L_1)|E(L_2)$&lt;/li&gt;
&lt;li&gt;$L_1, L_2 \subseteq L\ で\ L = L_1 \cdot L_2\ なら\ E(L) = E(L_1)E(L_2)$&lt;/li&gt;
&lt;li&gt;$L_1 \subseteq L\ で\ L = L_1^*\ なら\ E(L) = E(L_1) *$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とすることにより、 Regular language に対応する Regular expression を構成可能である.&lt;br /&gt;
つまり、 $L _{RL} \subseteq L _{RE}$ .&lt;/p&gt;

&lt;h3 id=&#34;regular-language-regular-expression-2:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular language &amp;lt;=&amp;gt; Regular expression&lt;/h3&gt;

&lt;p&gt;$L _{RE} \subseteq L _{RL}$ かつ $L _{RL} \subseteq L _{RE}$ より $L _{RE} = L _{RL}$ .&lt;br /&gt;
つまり、 Regular expression が定義する Language と Regular language は同じ.&lt;/p&gt;

&lt;h2 id=&#34;regular-language-finite-automaton:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;amp; Finite Automaton&lt;/h2&gt;

&lt;p&gt;Finite automaton の定義 (とその前提知識の定義) と、
Regular language と Finite automaton の関係.&lt;/p&gt;

&lt;h3 id=&#34;abstract-machine:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Abstract machine&lt;/h3&gt;

&lt;p&gt;Abstract machine (抽象機械) は計算システムを形式的に扱うために考えられた数学的モデルで、
計算可能性などを分析するのに思考実験で利用される.&lt;/p&gt;

&lt;p&gt;この Machine は Finite control (有限制御機構) と External storage (外部記憶装置) から構成される.&lt;br /&gt;
制御機構が有限であるとは制御機構が備えている記憶容量が有限で、有限の状態しか取り得ないことを意味する.&lt;br /&gt;
外部記憶には形式的扱いが容易なテープが通常用いられる.&lt;/p&gt;

&lt;p&gt;Abstract machineには次のような種類がある.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種類&lt;/th&gt;
&lt;th&gt;構成&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Finite automaton&lt;/td&gt;
&lt;td&gt;制御機構、入力テープ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Push down automaton&lt;/td&gt;
&lt;td&gt;制御機構、入力テープ、制限付き作業テープ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Turing machine&lt;/td&gt;
&lt;td&gt;制御機構、入力テープ、作業テープ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;制御機構はあらかじめ定義された State (状態) のいずれかをとる.&lt;br /&gt;
この機械が取り得る状態の集合は $Q = \lbrace q_0, q_1, q_2, \cdots \rbrace$ と表される.&lt;br /&gt;
機械は一時に一状態しか取れない.&lt;br /&gt;
機械の動作は機械の状態と入力情報 (入力テープから読み込んだ記号) により状態を変化したり、テープを操作したりすること.&lt;br /&gt;
機械は一定の状態になるか次状態が定義されていないため動作が継続できなくなると停止し、停止時の状態やテープ構成により様々な判定が行われる.&lt;br /&gt;
動作が一意に決まるとき deterministic (決定的) といい、そうでない場合を non-deterministic (非決定的) という.&lt;/p&gt;

&lt;p&gt;以上より Abstract machine ($M$) は次の5つの組 $M = (Q, \Sigma, \delta, q_0, F)$ で定義される.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$Q$ は有限な状態の集合.&lt;/li&gt;
&lt;li&gt;$\Sigma$ は記号の集合.&lt;/li&gt;
&lt;li&gt;$\delta$ は State transition function (状態遷移関数) で deterministic machine の動作 step を定義する.

&lt;ul&gt;
&lt;li&gt;Non-deterministic machine の場合は $\Delta$ で表され、 State transition relation (状態遷移関係) と呼ばれる.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;$q_0 \in Q$ は Initial state (初期状態) .&lt;/li&gt;
&lt;li&gt;$F \subseteq Q$ は Final state set (終了状態集合) で $F$ の要素は Final state (終了状態) と呼ばれ、機械が停止した時の状態が Final state であれば、機械は入力を accept (受理) したという. そうでない場合を reject (拒否) したという.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;finite-automaton:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Finite automaton&lt;/h3&gt;

&lt;p&gt;Finite automaton (FA, 有限オートマトン, Finite State Machine, FSM, 有限状態機械) は Abstract machine の一つで、制御機構と入力テープの二つから構成される. 状態遷移は現状態と入力記号の2つにより決定される. つまり、状態遷移は現状態と入力記号と次状態の3要素の組の集合として定義される.&lt;/p&gt;

&lt;p&gt;deterministic な Finite automaton を Deterministic finite automaton (DFA, 決定性有限オートマトン)、 non-Deterministic なものを Non-deterministic finite automaton (NFA, 非決定性有限オートマトン) と呼ぶ.&lt;/p&gt;

&lt;h3 id=&#34;deterministic-finite-automaton:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Deterministic Finite Automaton&lt;/h3&gt;

&lt;p&gt;DFA は $(Q, \Sigma, \delta, q_0, F)$ により以下のように形式的に定義される.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$Q$ は有限な状態の集合.&lt;/li&gt;
&lt;li&gt;$\Sigma$ は記号の集合.&lt;/li&gt;
&lt;li&gt;$q, q&amp;rsquo; \in Q, \sigma \in \Sigma\ で\ \delta: (q, \sigma) \to q&amp;rsquo;$&lt;/li&gt;
&lt;li&gt;$q_0 \in Q$ は Initial state.&lt;/li&gt;
&lt;li&gt;$F \subseteq Q$ は Final state set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DFA が定義する Language は DFA が accept する記号列の集合.&lt;/p&gt;

&lt;p&gt;DFA の動作は Machine configulation (動作状態) とその Machine configulation の step を与える演算子により形式的に定義できる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DFA ($M$) の Machine configulation ($C$) は DFA の state とテープの state で定義できる.

&lt;ul&gt;
&lt;li&gt;$q \in Q, [p, x]: Tape configulation\ で\ C = (q, [p, x])$

&lt;ul&gt;
&lt;li&gt;$[p, x]$ は Tape configulation (テープ構成) と呼び、 $x$ がそのテープの記号列で $p$ がその記号列上の現在位置. $x(p)$ で $p$ の位置の記号を表す.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;$M$ の Machine configulation の集合を $C(M)$ で表す.

&lt;ul&gt;
&lt;li&gt;$C(M) = \lbrace (q, [p, x]) \mid q \in Q, x \in \Sigma^*, 1 \leq p \leq |x| + 1 \rbrace$&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DFA の Machine configulation の 1 step 進行を表す関係演算子を $\vdash_M: C(M) \to C(M)$ とする.

&lt;ul&gt;
&lt;li&gt;$C_1, C_2 \in C(M)\ で\ p_1 + 1 = p_2\ かつ\ \delta(q_1, x(p_1)) = q_2$ が成り立つとき $C_1 \vdash_M C_2$ と表す.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DFA は $C_h = (q, [p, x])$ で $\delta(q, x(p))$ が未定義なときに停止する.

&lt;ul&gt;
&lt;li&gt;$C_h = (q, [|x| + 1, x])$ を Final configulation (最終状態) と呼び、テープの最後に到達した状態を表す.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$C_i \subseteq C(M), 0 \leq i \leq n$ を一連の Machine configulation としたとき、&lt;/p&gt;

&lt;p&gt;$$
C _0 \vdash _M C _1, C _1 \vdash _M C _2, \cdots, C _{n-1} \vdash _M C _n
$$&lt;/p&gt;

&lt;p&gt;が成立するとき&lt;/p&gt;

&lt;p&gt;$$
C_0 \vdash_M^* C
$$&lt;/p&gt;

&lt;p&gt;のように表示する. この式は Computation (計算過程) を表す.&lt;/p&gt;

&lt;p&gt;DFA ($M$) で入力 ($x$) について、&lt;/p&gt;

&lt;p&gt;$$
f \in F\ で\ (q_0, [1, x]) \vdash _M^* (f, [|x| + 1, x])
$$&lt;/p&gt;

&lt;p&gt;が成立するとき $M$ は $x$ を accept するという.&lt;/p&gt;

&lt;h3 id=&#34;deterministic-vs-non-deterministic:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Deterministic vs. Non-deterministic&lt;/h3&gt;

&lt;p&gt;決定性と非決定性.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種類&lt;/th&gt;
&lt;th&gt;状態遷移&lt;/th&gt;
&lt;th&gt;入力&lt;/th&gt;
&lt;th&gt;次状態&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DFA&lt;/td&gt;
&lt;td&gt;関数&lt;/td&gt;
&lt;td&gt;現状態、1記号&lt;/td&gt;
&lt;td&gt;1状態&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NFA&lt;/td&gt;
&lt;td&gt;関係&lt;/td&gt;
&lt;td&gt;現状態、記号列($\epsilon$ を含む)&lt;/td&gt;
&lt;td&gt;複数の状態が可能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;DFA と NFA は状態遷移が異なるだけ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NFA は次状態が複数ある場合がある.&lt;/li&gt;
&lt;li&gt;DFA は常にテープが1つ進むが、NFA は記号列の長さ分一気にすすんだり、 $\epsilon$ が入力と成り得る場合は進まなかったりする.&lt;/li&gt;
&lt;li&gt;Non-deterministic な動作では可能なすべての状態遷移を試みる. 試みたすべての Machine configulation 中に1個でも accept な Machine configulation があれば全体で $x$ を accept とする. そうでなければ reject とする.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DFA が定義する Language ($L _{DFA}$) と NFA が定義する Language ($L _{NFA}$) の関係をみていく.&lt;/p&gt;

&lt;h4 id=&#34;dfa-nfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;DFA =&amp;gt; NFA&lt;/h4&gt;

&lt;p&gt;DFA が定義する Language を考えると、NFA の定義は DFA の定義を包含しているため&lt;/p&gt;

&lt;p&gt;$$
L _{DFA} \subseteq L _{NFA}
$$&lt;/p&gt;

&lt;p&gt;が成立する.&lt;/p&gt;

&lt;h4 id=&#34;nfa-dfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;NFA =&amp;gt; DFA&lt;/h4&gt;

&lt;p&gt;与えられた NFA に対して同一な Language を accept する DFA が以下の手順で構成できる.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#記号列遷移の1記号遷移化:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;記号列遷移の1記号遷移化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#epsilon-遷移の除去:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;$\epsilon$ 遷移の除去&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subset-construction-により-dfa-の構成:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Subset construction (部分集合構成法) により DFA の構成&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当初の NFA を $M = (Q, \Sigma, \Delta, q_0, F)$ とし、各段階で得られる NFA をそれぞれ $M_1$, $M_2$, $M_3$ とする.&lt;/p&gt;

&lt;h5 id=&#34;記号列遷移の1記号遷移化:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;記号列遷移の1記号遷移化&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;$M_1 = (Q_1, \Sigma, \Delta_1, q_0, F)$ として、 $Q_1$, $\Delta_1$ をそれぞれ $Q$, $\Delta$ と等しくする.&lt;/li&gt;
&lt;li&gt;$\forall (q, \sigma, q&amp;rsquo;) \in \Delta, |\sigma| \geq 1$ について

&lt;ul&gt;
&lt;li&gt;$\Delta_1$ から $(q, \sigma, q&amp;rsquo;)$ を取り除く.&lt;/li&gt;
&lt;li&gt;$|\sigma| = k$ として新規状態 $q_1, q_2, \cdots, q_k$ を $Q_1$ に追加する.&lt;/li&gt;
&lt;li&gt;$\Delta_1$ に遷移 $(q, \sigma(1), q_1), (q1, \sigma(2), q_2), \cdots, (q _{k-1}, \sigma(k), q&amp;rsquo;)$ を追加する.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを行うことによって、 $M$ と $M_1$ は同一となることは明らか.&lt;/p&gt;

&lt;h5 id=&#34;epsilon-遷移の除去:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;$\epsilon$ 遷移の除去&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;$M_2 = (Q_2, \Sigma, \Delta_2, q_0,F_2)$ として定義し $\Delta_2 = \emptyset$ とする.&lt;/li&gt;
&lt;li&gt;$\forall q \in Q_1, \forall a \in \Sigma\ で\ (q, [1, a]) \vdash _{M_1}^* (q&amp;rsquo;, [2, a])$ を満たす $(q, a, q&amp;rsquo;)$ により $\Delta_2 = \Delta_2 \cup \lbrace (q, a, q&amp;rsquo;) \rbrace$ とする.&lt;/li&gt;
&lt;li&gt;$Q_2$ を 2. で構築した $\Delta_2$ の下で $q_0$ から到達可能な状態の集合とする.&lt;/li&gt;
&lt;li&gt;$F_2 = \lbrace q \mid q \in Q_2, f \in F_1, (q, [1, \epsilon]) \vdash _m^* (f, [1, \epsilon]) \rbrace$ のように $F_2$ を定義する.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを行うことによって、 $M_1$ と $M_2$ は同一となることは明らか.&lt;/p&gt;

&lt;h5 id=&#34;subset-construction-により-dfa-の構成:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Subset construction により DFA の構成&lt;/h5&gt;

&lt;p&gt;$M_3 = (Q_3, \Sigma, \delta_3, \lbrace q_0 \rbrace, F)$ とする.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$Q_3$ は集合を要素とする集合で、 $Q_2$ の Power set (冪集合) の Subset (部分集合) .

&lt;ul&gt;
&lt;li&gt;$Q_3 \subseteq \mathcal{P}(Q_2)$&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Initial state は $\lbrace q_0 \rbrace$ .&lt;/li&gt;
&lt;li&gt;$F_3 = \lbrace Q&amp;rsquo; \mid Q&amp;rsquo; \subseteq Q_3, Q&amp;rsquo; \cap F2 \neq \emptyset \rbrace$ とする.&lt;/li&gt;
&lt;li&gt;$\delta_3$ を次のように構成する.

&lt;ul&gt;
&lt;li&gt;$Q_3$ のInital state $\lbrace q_0 \rbrace$ だけからなる遷移表を初期値として $\delta_3$ を構成する.&lt;/li&gt;
&lt;li&gt;$(q_0, a_i, q&amp;rsquo;) \in \Delta_2$ に対して $\delta_3$ の遷移 $(\lbrace q_0 \rbrace, a_i, Q&amp;rsquo;)$ の遷移先 $Q&amp;rsquo;$ に $q&amp;rsquo;$ を追加する.&lt;/li&gt;
&lt;li&gt;$Q&amp;rsquo;$ が $\delta_3$ に含まれていなければ、表に $Q&amp;rsquo;$ を追加する.&lt;/li&gt;
&lt;li&gt;追加された $Q&amp;rsquo;$ について、 $\forall q \in Q&amp;rsquo;, \forall a_i \in \Sigma$ について $(q, a_i, q&amp;rsquo;) \in \Delta_2$ を調べる、追加する.&lt;/li&gt;
&lt;li&gt;表に新規に追加される State が無くなれば $\delta_3$ は完成.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを行うことによって、 $M_2$ と $M_3$ は同一となることは明らか.&lt;/p&gt;

&lt;p&gt;これら 1 - 3 の操作により、&lt;/p&gt;

&lt;p&gt;$$
L _{NFA} \subseteq L _{DFA}
$$&lt;/p&gt;

&lt;p&gt;が成立する.&lt;/p&gt;

&lt;h4 id=&#34;dfa-nfa-1:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;DFA &amp;lt;=&amp;gt; NFA&lt;/h4&gt;

&lt;p&gt;$L _{DFA} \subseteq L _{NFA}$ かつ $L _{NFA} \subseteq L _{DFA}$ より $L _{DFA} = L _{NFA}$ .&lt;/p&gt;

&lt;h3 id=&#34;fa-s-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&amp;rsquo;s Language&lt;/h3&gt;

&lt;p&gt;Finite automaton が定義する Language の性質を調べる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2つの Finite automaton $M_1$, $M_2$ について、 $M _{\cup}$ を考える.

&lt;ul&gt;
&lt;li&gt;新たに Inital state と Final state を追加して、
追加した Initial state から $\epsilon$ で $M_1$, $M_2$ の Initial state に遷移し、
$M_1$, $M_2$ のすべての Final state から追加した Final state に $\epsilon$ で遷移するように構成し、
これを $M _{\cup}$ と呼ぶ.&lt;/li&gt;
&lt;li&gt;$M _{\cup}$ が accept する Language ($L(M _{\cup})$) は $L(M _{\cup}) = L(M_1) \cup L(M_2)$ である.

&lt;ul&gt;
&lt;li&gt;構成法よりこれが成立することは明らか.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;つまり、 $L_1, L_2 \in L _{FA}\ で\ L_1 \cup L_2 \in L _ {FA}$ が成立し、和演算について閉じている.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2つの Finite automaton $M_1$, $M_2$ について、 $M _{\circ}$ を考える.

&lt;ul&gt;
&lt;li&gt;新たに Initial state と Final state を追加して、
追加した Inital state から $\epsilon$ で $M_1$ の Initial state に遷移し、
$M_1$ のすべての Final state から $M_2$ の Initial state に $\epsilon$ で遷移し、
$M_2$ のすべての Final state から追加した Final state に $\epsilon$ で遷移するように構成し、
これを $M _{\circ}$ と呼ぶ.&lt;/li&gt;
&lt;li&gt;$M _{\circ}$ が accept する Language ($L(M _{\circ})$) は $L(M _{\circ}) = L(M_1) \circ L(M_2)$ である.

&lt;ul&gt;
&lt;li&gt;構成法よりこれが成立することは明らか.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;つまり、 $L_1, L_2 \in L _{FA}\ で\ L_1 \circ L_2 \in L _ {FA}$ が成立し、連結演算について閉じている.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2つの Finite automaton $M$ について、 $M _{^*}$ を考える.

&lt;ul&gt;
&lt;li&gt;新たに Initial state と Final state を追加して、
追加した Inital state から $\epsilon$ で $M$ の Initial state に遷移し、
$M$ のすべての Final state から追加した Final state に $\epsilon$ で遷移し、
追加した Inital state と Final state が互いに $\epsilon$ で遷移するように構成し、
これを $M _{^*}$ と呼ぶ.&lt;/li&gt;
&lt;li&gt;$M _{^*}$ が accept する Language ($L(M _{^ *})$) は $L(M _{^ *}) = L(M _1) ^ *$ である.

&lt;ul&gt;
&lt;li&gt;構成法よりこれが成立することは明らか.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;つまり、 $L \in L _{FA}\ で\ L^* \in L _ {FA}$ が成立し、 Kleene star 演算について閉じている.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;regular-language-fa-s-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language =&amp;gt; FA&amp;rsquo;s Language&lt;/h3&gt;

&lt;p&gt;任意の Regular language ($L$) からその Language を accept する Finite automaton ($M$) を構成する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$L = \emptyset$ なら $M_{\emptyset} = (\lbrace q_0, q_1 \rbrace, \Sigma, \emptyset, q_0, \lbrace q_1 \rbrace)$ が対応する.

&lt;ul&gt;
&lt;li&gt;$M_{\emptyset}$ は Final set への遷移をもたないので accept する記号列はない. つまり、空集合を accept する.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;$\sigma \in \Sigma\ で\ L = \lbrace \sigma \rbrace$ なら $M_1 = (\lbrace q_0, q_1 \rbrace, \Sigma, \lbrace (q_0, \sigma, q_1) \rbrace, q_0, \lbrace q_1 \rbrace)$ が対応する.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fa-s-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&amp;rsquo;s Language&lt;/a&gt; で述べた $L_{FA}$ の性質より、 Regular language $L_1$, $L_2$ が Finite automaton で定義可能なら、 $L_1 \cup L_2$, $L_1 \circ L_2$, $L_1^*$ も Finite automaton で定義可能. Regular language はこれらの操作のみで構成されるので、すべての Regular language について対応する Finite automaton が存在する.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よって、&lt;/p&gt;

&lt;p&gt;$$
L _{RL} \subseteq L _{FA}
$$&lt;/p&gt;

&lt;p&gt;が成立する.&lt;/p&gt;

&lt;h3 id=&#34;fa-s-language-regular-language:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&amp;rsquo;s Language =&amp;gt; Regular Language&lt;/h3&gt;

&lt;p&gt;Finite automaton ($M$) の accept する Language を Regular language ($L$) で表現する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$M$ に必要であれば Initial state と Final state を一つ追加し、それぞれもとの Initial state と Final state と $\epsilon$ 遷移で接続し、 $M$ の Inital state と Final state がそれぞれ唯一つとなるようにする.&lt;/li&gt;
&lt;li&gt;$M$ 上の $\delta$ のすべての要素 $(q, \sigma, q&amp;rsquo;)$ を Regular launguage $L = \lbrace \sigma \rbrace$ での遷移とみなし、 $(q, L, q&amp;rsquo;)$ と表記する.&lt;/li&gt;
&lt;li&gt;$M$ 上の Initial state と Final state 以外の状態 $q$ と $q$ を経由する遷移 $p \to q \to r$ について、以下の規則を適用して $q$ を取り除く.

&lt;ul&gt;
&lt;li&gt;$\lbrace (p, L_1, q), (q, L_2, r) \rbrace$ なら $\lbrace (p, L_1 \cdot L_2, r) \rbrace$ と変換.&lt;/li&gt;
&lt;li&gt;$\lbrace (p, L_1, q), (q, L_2, r), (q, L_3, q) \rbrace$ なら $\lbrace (p, L_1 \cdot L_3 ^* \cdot L_2, r) \rbrace$ と変換.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;$\lbrace (p, L_1, q), (p, L_2, q) \rbrace$ を $\lbrace (p, L_1 \cup L_2, q)$ と変換.&lt;/li&gt;
&lt;li&gt;これらの変換を Initial state と Final state がそれぞれ一つだけ残るまで繰り返す. これにより構成された $(q_0, L, f)$ の $L$ がこの Finite automaton の accept する Language を表現する Regular language である.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よって、&lt;/p&gt;

&lt;p&gt;$$
L _{FA} \subseteq L _{RL}
$$&lt;/p&gt;

&lt;p&gt;が成立する.&lt;/p&gt;

&lt;h3 id=&#34;regular-language-fa-s-language-1:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Regular Language &amp;lt;=&amp;gt; FA&amp;rsquo;s Language&lt;/h3&gt;

&lt;p&gt;$L _{RL} \subseteq L _{FA}$ かつ $L _{FA} \subseteq L _{RL}$ より $L _{RL} = L _{FA}$ .&lt;br /&gt;
よって、 Regular language と Finite automaton は対応する.&lt;/p&gt;

&lt;h2 id=&#34;result:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;以上により、 $L _{RE} = L _{RL} = L _{FA}$ が証明された.&lt;/p&gt;

&lt;p&gt;つまり、任意の Regular expression は Finite automaton で表現され、それにより計算可能と証明された.&lt;/p&gt;

&lt;p&gt;Kleene algebra と Regular language の理論により、 Regular expression が Finite automaton の理論と結びつき計算可能となった.&lt;/p&gt;

&lt;p&gt;この周辺分野には Pumping theorem (ポンピング補題)や、
Finite automaton 以外の Abstract machine などがあるが、
それは次回にしてそろそろ当初の目的 (Regular expression engine の実装) を終わらせようと思う.&lt;/p&gt;

&lt;p&gt;まぁ正直もう実装なんてしなくてもいいんじゃないかとすら思ってる. ;p&lt;/p&gt;

&lt;h1 id=&#34;implementation:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;任意の Regular expression が Finite automaton で計算可能なことがわかったので、心置きなく実装できる.&lt;/p&gt;

&lt;p&gt;Regular expression engine は Regular expression と記号列を入力として、
Regular expression に対応する Finite automaton を構築し、
その Finite automaton を記号列入力を入力テープとして動作させて、
その結果 (accept するかどうか) で Regular expression が記号列にマッチするかどうかを判定する.&lt;/p&gt;

&lt;h2 id=&#34;ast:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;AST&lt;/h2&gt;

&lt;p&gt;AST の node の Base class と Choice, Concatenation, Kleene star の Node class を定義する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defclass node () ())

(defclass binop (node)
  ((left :initarg :left
         :type node
         :reader node-left)
   (right :initarg :right
          :type node
          :reader node-right)))

(defclass uniop (node)
  ((operand :initarg :operand
            :type node
            :reader node-operand)))

(defclass choice (binop) ())

(defclass concatenation (binop) ())

(defclass kleene-star (uniop) ())
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;parser:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Parser&lt;/h2&gt;

&lt;p&gt;入力文字列を parse して AST を構築する.&lt;/p&gt;

&lt;p&gt;Parser は &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%83%E3%82%AF%E3%83%A9%E3%83%83%E3%83%88%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90&#34;&gt;Packrat parsing&lt;/a&gt; (パックラット構文解析) の Common lisp 実装である &lt;a href=&#34;http://nikodemus.github.io/esrap/&#34;&gt;Esrap&lt;/a&gt; を利用する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(use-package :esrap)

(defrule chracter (not (or &amp;quot;*&amp;quot; &amp;quot;|&amp;quot;))
  (:lambda (char) char))

(defrule choice (and regexp &amp;quot;|&amp;quot; regexp)
  (:destructure (left bar right)
    (declare (ignore bar))
    (make-instance &#39;choice :left left :right right)))

(defrule concatenation (and regexp regexp)
  (:destructure (left right)
    (make-instance &#39;concatenation :left left :right right)))

(defrule kleene-star (and regexp &amp;quot;*&amp;quot;)
  (:destructure (operand star)
    (declare (ignore star))
    (make-instance &#39;kleene-star :operand operand)))

(defrule regexp (or kleene-star choice concatenation character))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;FA&lt;/h2&gt;

&lt;p&gt;Finite automaton の Class を定義する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defclass state () ())

(defclass fa ()
  ((initial-state :type state
                  :initarg :inital-state
                  :reader fa-initial-state)
   (final-state-set :type list
                    :initarg :final-state-set
                    :reader fa-final-state-set)
   (transition-function-set :type list
                            :initarg :transition-function-set
                            :reader fa-transition-function-set)))

(defclass transition-function ()
  ((from :type state
         :initarg :from
         :reader transition-function-from)
   (character :type (or character nil)
              :initarg :character
              :reader transition-function-character)
   (to :type state
       :initarg :to
       :reader transition-function-to)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;NFA&lt;/h2&gt;

&lt;p&gt;AST を元にまずは NFA を構築する.&lt;br /&gt;
Thompson&amp;rsquo;s construction algorithm を使う.&lt;br /&gt;
疲れたから解説はしない. code 読めば分かる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defclass nfa (fa) ())

(defgeneric ast2nfa (node))

(defmethod ast2nfa ((character character))
  (let* ((initial-state (make-instance &#39;state))
         (final-state (make-instance &#39;state))
         (final-state-set (list final-state))
         (transition-function (make-instance &#39;transition-function
                                             :from initial-state
                                             :character character
                                             :to final-state))
         (transition-function-set (list transition-function)))
    (make-instance &#39;nfa
                   :inital-state initial-state
                   :final-state-set final-state-set
                   :transition-function-set transition-function-set)))

(defmethod ast2nfa ((choice choice))
  (let* ((left (ast2nfa (node-left choice)))
         (right (ast2nfa (node-right choice)))
         (initial-state (make-instance &#39;state))
         (final-state (make-instance &#39;state))
         (final-state-set (list final-state))
         (transition-function-set
           (append (fa-transition-function-set left)
                   (fa-transition-function-set right)
                   (mapcar #&#39;(lambda (state)
                               (make-instance &#39;transition-function
                                              :from initial-state
                                              :character nil
                                              :to state))
                           (mapcar #&#39;fa-initial-state (list left right)))
                   (mapcar #&#39;(lambda (state)
                               (make-instance &#39;transition-function
                                              :from state
                                              :character nil
                                              :to final-state))
                           (mapcan #&#39;fa-final-state-set (list left right))))))
    (make-instance &#39;fa
                   :inital-state initial-state
                   :final-state-set final-state-set
                   :transition-function-set transition-function-set)))

(defmethod ast2nfa ((concatenation concatenation))
  (let* ((left (ast2nfa (node-left concatenation)))
         (right (ast2nfa (node-right concatenation)))
         (initial-state (fa-initial-state left))
         (final-state-set (fa-final-state-set right))
         (transition-function-set
           (append (fa-transition-function-set left)
                   (fa-transition-function-set right)
                   (mapcar #&#39;(lambda (state)
                               (make-instance &#39;transition-function
                                              :from state
                                              :character nil
                                              :to (fa-initial-state right)))
                           (fa-final-state-set left)))))
    (make-instance &#39;fa
                   :inital-state initial-state
                   :final-state-set final-state-set
                   :transition-function-set transition-function-set)))

(defmethod ast2nfa ((kleene-star kleene-star))
  (let* ((operand (ast2nfa (node-operand kleene-star)))
         (initial-state (make-instance &#39;state))
         (final-state (make-instance &#39;state))
         (final-state-set (list final-state))
         (transition-function-set
           (append (list (make-instance &#39;transition-function
                                        :from initial-state
                                        :character nil
                                        :to final-state)
                         (make-instance &#39;transition-function
                                        :from initial-state
                                        :character nil
                                        :to (fa-initial-state operand)))
                   (mapcan #&#39;(lambda (state)
                               (list
                                (make-instance &#39;transition-function
                                               :from state
                                               :character nil
                                               :to final-state)
                                (make-instance &#39;transition-function
                                               :from state
                                               :character nil
                                               :to (fa-initial-state operand))))
                           (fa-final-state-set operand))
                   (fa-transition-function-set operand))))
    (make-instance &#39;fa
                   :inital-state initial-state
                   :final-state-set final-state-set
                   :transition-function-set transition-function-set)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Run&lt;/h2&gt;

&lt;p&gt;Finite automaton を動作させる.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun run (nfa string)
  (let ((length (length string))
        (j 0))
    (labels ((accept-p (state)
               (member state (fa-final-state-set nfa)))
             (current-char (i)
               (when (&amp;lt; i length)
                 (elt string i)))
             (reachable-states (state character)
               (mapcar #&#39;transition-function-to
                       (remove-if-not
                        #&#39;(lambda (tf)
                            (and (eq state (transition-function-from tf))
                                 (eql character (transition-function-character tf))))
                        (fa-transition-function-set nfa))))
             (exec (state i)
               (setq j i)
               (when (accept-p state)
                 (return-from run t))
               (when (current-char i)
                 (dolist (state (reachable-states state (current-char i)))
                   (exec state (1+ i))))
               (dolist (state (reachable-states state nil))
                 (exec state i))))
      (exec (fa-initial-state nfa) 0))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;match:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Match&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun match (regexp string)
  (run (ast2nfa (parse &#39;regexp regexp)) string))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際に実行すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(match &amp;quot;a&amp;quot; &amp;quot;a&amp;quot;)
=&amp;gt; T

(match &amp;quot;a&amp;quot; &amp;quot;b&amp;quot;)
=&amp;gt; NIL

(match &amp;quot;a|bc&amp;quot; &amp;quot;ac&amp;quot;)
=&amp;gt; T

(match &amp;quot;a|bc&amp;quot; &amp;quot;bc&amp;quot;)
=&amp;gt; T

(match &amp;quot;a|bc&amp;quot; &amp;quot;bd&amp;quot;)
=&amp;gt; NIL

(match &amp;quot;a*b&amp;quot; &amp;quot;aaaaab&amp;quot;)
=&amp;gt; T

(match &amp;quot;a*b&amp;quot; &amp;quot;aaaaac&amp;quot;)
=&amp;gt; T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でちゃんとうごいてるっぽい.&lt;/p&gt;

&lt;h1 id=&#34;wrap-up:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;Wrap-up&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Regular expression が Finite automaton で計算可能であることを証明した.&lt;/li&gt;
&lt;li&gt;実際に NFA でシミュレートを行った.

&lt;ul&gt;
&lt;li&gt;NFA だと計算効率が悪いから大抵の Engine は NFA =&amp;gt; DFA に変換している.&lt;/li&gt;
&lt;li&gt;変換方法は &lt;a href=&#34;#nfa-dfa:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;NFA =&amp;gt; DFA&lt;/a&gt; で述べたが、実装するならもうちょっと効率的な方法で実装する. ($\epsilon$ 遷移の除去のとことか.)&lt;/li&gt;
&lt;li&gt;Grouping は実装してない. 読者の宿題とする. ;p&lt;/li&gt;
&lt;li&gt;Pure regular expression という表現をしたが、 pure かどうかを見分けるのが Pumping theorem により可能となる.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今回は Finite automaton を構成する方法で実装するが、他にも Backtracking を利用した方法などがある.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;see-also:eace75608fd5b13965fa1c8e5f358f72&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cns-classes.bu.edu/cn550/Readings/mcculloch-pitts-43.pdf&#34;&gt;A Logical Calculus of the Ideas Immanent in Nervous Activity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rand.org/content/dam/rand/pubs/research_memoranda/2008/RM704.pdf&#34;&gt;Representation of Events in Nerve Nets and Finite Automata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~coquand/AUTOMATA/rs.pdf&#34;&gt;Finite Automata and Their Decision Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fing.edu.uy/inco/cursos/intropln/material/p419-thompson.pdf&#34;&gt;Regular Expression Search Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/0201407515/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=0201407515&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;Introduction To Commutative Algebra (Addison-Wesley Series in Mathematics)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4774172707/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4774172707&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;正規表現技術入門 ――最新エンジン実装と理論的背景 (WEB+DB PRESS plus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4781909906/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4781909906&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;形式言語とオートマトン (Information Science &amp;amp; Engineering)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kloundsec for SSL with Custom Domain on GitHub Pages</title>
      <link>https://blog.rudolph-miller.com/2016/03/11/kloudsec-for-ssl-with-custom-domain-on-gh-pages/</link>
      <pubDate>Fri, 11 Mar 2016 21:54:27 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/03/11/kloudsec-for-ssl-with-custom-domain-on-gh-pages/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://kloudsec.com/&#34;&gt;Kloudsec&lt;/a&gt; を使って3 stepsでCustom domainなGitHub PagesのSSL対応をする.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160311/eyecatch.png&#34; alt=&#34;/20160311/eyecatch.png&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#kloudsec:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;Kloudsec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-steps-integration:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;3 steps Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;kloudsec:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;Kloudsec&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://kloudsec.com/&#34;&gt;Kloudsec&lt;/a&gt; はDomainをKloudsecのCDNのIPに向けるだけで、サイトの問題点の分析と修正をしてくれるサービス.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/29/use-ssl-with-custom-domain-on-gh-pages/&#34;&gt;以前&lt;/a&gt;
にCloudFlareでCustom domainなGitHub PagesのSSL対応をする記事を書いたが、
CloudFlareを使おうとすると DNS server (Name server) をCloudFlareのDNS serverに切り替えないといけなく、
これが結構負担になった.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kloudsec.com/github-pages/new&#34;&gt;Kloudsec for GitHub Pages&lt;/a&gt; を使用すると、既存のDNS serverのままで、
DNS recordを変更するだけでCustom domainなGitHub PagesのSSL対応ができる.&lt;/p&gt;

&lt;h1 id=&#34;3-steps-integration:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;3 steps Integration&lt;/h1&gt;

&lt;p&gt;GitHub PageのKloudsecへの登録は &lt;strong&gt;3 steps&lt;/strong&gt; で完了する.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kloudsec.com/github-pages/new&#34;&gt;Kloudsec for GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;register-a-kloudsec-account:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;Register a Kloudsec account&lt;/h2&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160311/register_account.png&#34; alt=&#34;/20160311/register_account.png&#34;&gt;


&lt;p&gt;EmailとPasswordを入力.&lt;/p&gt;

&lt;h2 id=&#34;configure-your-github-page:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;Configure your Github Page&lt;/h2&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160311/configure_github_page.png&#34; alt=&#34;/20160311/configure_github_page.png&#34;&gt;


&lt;p&gt;登録するGitHub PageのRepositoryのURLと登録するCustom domainを入力.
登録するRepositioryに &lt;code&gt;CNAME&lt;/code&gt; fileを追加.
(&lt;a href=&#34;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&#34;&gt;Quick start: Setting up a custom domain&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;configure-your-dns-settings:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;Configure your DNS settings&lt;/h2&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160311/configure_dns.png&#34; alt=&#34;/20160311/configure_dns.png&#34;&gt;


&lt;p&gt;最後に表示されている設定を使用しているDNS serverに登録する.
FormのInput要素をClickするとClipboardにcopyされる.&lt;/p&gt;

&lt;p&gt;※Record 2の登録の際はSubdomainに注意. ↑の画像の場合、登録するSubdomainは &lt;code&gt;kloudsecurity****.gh-pages&lt;/code&gt; となる.&lt;/p&gt;

&lt;p&gt;最後に &lt;strong&gt;I&amp;rsquo;m done! Bring me to my dashboard.&lt;/strong&gt; をClickすれば完了.&lt;/p&gt;

&lt;p&gt;これだけでCDNの接続は完了.&lt;/p&gt;

&lt;p&gt;すこし待つと&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160311/ssl_certificate_ready.png&#34; alt=&#34;/20160311/ssl_certificate_ready.png&#34;&gt;


&lt;p&gt;の様なEmailが届きSSLの設定も完了.&lt;/p&gt;

&lt;p&gt;裏では &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; を使用しているらしい.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Kloudsecを使うととてつもなく簡単にCustom domainなGitHub PagesをSSL対応できた.&lt;/p&gt;

&lt;p&gt;Kloudsecはそれだけではなく、 &lt;strong&gt;Page Optimizer&lt;/strong&gt; (Page毎のPerformance analizingや、CDN cacheやImage optimizerによるPage optimizing.)
や &lt;strong&gt;Offline Protection&lt;/strong&gt; (Original pageの障害時にStatic backupを配信.) などの機能がPluginsとして用意されている.&lt;/p&gt;

&lt;p&gt;まだβらしいので、そのリスクは認識した上で使用して下さい.
(このBlogはKloudsecを使用.)&lt;/p&gt;

&lt;h1 id=&#34;see-also:e6ae5c71a14d7c514ac98a7919ffceb2&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kloudsec.com/&#34;&gt;Kloudsec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kloudsec.com/github-pages/new&#34;&gt;Kloudsec for GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning in Common Lisp</title>
      <link>https://blog.rudolph-miller.com/2016/02/26/deep-learning-in-common-lisp/</link>
      <pubDate>Fri, 26 Feb 2016 20:30:37 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/02/26/deep-learning-in-common-lisp/</guid>
      <description>

&lt;p&gt;Deep Learning をCommon Lispで実装してみた.&lt;/p&gt;

&lt;p&gt;そろそろ Deep Learning の実装ぐらい教養かなと思ったので、
&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B018K6C99A/ref=as_li_tf_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B018K6C99A&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;深層学習&lt;/a&gt;
という本を読みながら実装してみた.&lt;/p&gt;

&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B018K6C99A/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B018K6C99A&amp;linkCode=as2&amp;tag=rudolph-miller-22&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B018K6C99A&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=rudolph-miller-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=rudolph-miller-22&amp;l=as2&amp;o=9&amp;a=B018K6C99A&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回実装したのは順伝播型ニューラルネットワーク (Feed Forward Neural Network) で、
テストしたのは &lt;code&gt;Fisher&#39;s iris flower data set&lt;/code&gt; (統計の有名なデータセット) の多クラス分類 (Multi-class classification) .&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/cldl&#34;&gt;CLDL&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#deep-neural-network:99621a27901250e81c3c36481758f611&#34;&gt;Deep Neural Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math:99621a27901250e81c3c36481758f611&#34;&gt;Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#impl:99621a27901250e81c3c36481758f611&#34;&gt;Impl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#test:99621a27901250e81c3c36481758f611&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#todo:99621a27901250e81c3c36481758f611&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:99621a27901250e81c3c36481758f611&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;deep-neural-network:99621a27901250e81c3c36481758f611&#34;&gt;Deep Neural Network&lt;/h1&gt;

&lt;p&gt;Deep Learning は Deep Neural Network (Multi-layer perceptron, 多層構造のNeural Network) の機械学習の事.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160224/dnn.png&#34; alt=&#34;/20160224/dnn.png&#34;&gt;


&lt;p&gt;Input Layer (入力層)、多層の Hidden Layer (中間層)、Output Layer (出力層) で構成され、
それぞれの層は単数または複数のUnitで構成される.&lt;/p&gt;

&lt;p&gt;順伝播型ニューラルネットワークではすべてのUnitがその前後の層のすべてのUnitと結合している.&lt;/p&gt;

&lt;p&gt;学習というのは、ネットワークに与えたInputからのOutputを正解に近づけるようにParameterを調整すること.&lt;/p&gt;

&lt;h1 id=&#34;math:99621a27901250e81c3c36481758f611&#34;&gt;Math&lt;/h1&gt;

&lt;p&gt;とりあえず数式として俯瞰する.&lt;/p&gt;

&lt;h2 id=&#34;activation-function:99621a27901250e81c3c36481758f611&#34;&gt;Activation function&lt;/h2&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160224/math_1.png&#34; alt=&#34;/20160224/math_1.png&#34;&gt;


&lt;p&gt;連続した$p-1$層と$p$層を考える.&lt;/p&gt;

&lt;p&gt;$u$はUnitの入力、$z$はUnitの出力、$w$はUnit間のConnectionの重みを表す.&lt;/p&gt;

&lt;p&gt;これらの関係は&lt;/p&gt;

&lt;p&gt;$$
u_j^{(p)} = \sum _{i=0}^{I} w _{ji} z _{i}^{(p-1)} + b_j^{(p)} \tag{1}
$$&lt;/p&gt;

&lt;p&gt;$$
z_j^{(p)} = f(u_j^{(p)}) \tag{2}
$$&lt;/p&gt;

&lt;p&gt;のようにあらわせる.&lt;/p&gt;

&lt;p&gt;(1) における $b$ はBiasで、
UnitのInputは前層のOutputにConnectionの重みを掛けたものの和にBiasを足したものである.&lt;/p&gt;

&lt;p&gt;ここで&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160224/math_2.png&#34; alt=&#34;/20160224/math_2.png&#34;&gt;


&lt;p&gt;のようにBias Unitという特別なUnit (Outputが常に $1$) を導入して、&lt;/p&gt;

&lt;p&gt;$$
b_j^{(p)} = w _{j0} z _{0}^{(p-1)} \tag{3}
$$&lt;/p&gt;

&lt;p&gt;のように $b$ をあらわすと (1) は&lt;/p&gt;

&lt;p&gt;$$
u_j^{(p)} = \sum _{i=0}^{I} w _{ji} z _{i}^{(p-1)} \tag{4}
$$&lt;/p&gt;

&lt;p&gt;のように書ける.&lt;/p&gt;

&lt;p&gt;(2) における $f$ は &lt;strong&gt;Activation function (活性化関数)&lt;/strong&gt; と呼ばれる.
Activation functionはUnitへの入力から出力を計算する関数で
通常は単調増加する日線形関数を使用し、
一般にHidden LayerとOutput Layerで別の関数を使用する.&lt;/p&gt;

&lt;p&gt;今回はHidden Layerで&lt;/p&gt;

&lt;p&gt;$$
f(u) = \max(u, 0) \tag{5}
$$&lt;/p&gt;

&lt;p&gt;のRectified Linear Unit (正規化線形関数, ReLU, ランプ関数)を使用し、Output Layerで&lt;/p&gt;

&lt;p&gt;$$
f(u_k) = \frac{e^{u_k}}{\sum _{j=1}^{K} e^{u_j}} \tag{6}
$$&lt;/p&gt;

&lt;p&gt;のSoftmax functionを使用する. ( $K$ はOutput LayerのUnit数、 $k$ はOutput LayerのUnit番号.)&lt;/p&gt;

&lt;h2 id=&#34;error-function:99621a27901250e81c3c36481758f611&#34;&gt;Error function&lt;/h2&gt;

&lt;p&gt;順伝播型ニューラルネットワークはParameter $w$ を変えるとOutputが変化し、
良い $w$ を選ぶとネットワーク全体として望みの関数として振る舞うようになる.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Traiting data&lt;/strong&gt;を用いて $w$ を調整することを学習という.&lt;/p&gt;

&lt;p&gt;このときそれぞれのTraining sampleでのOutputと目標値の近さをあらわす関数を
&lt;strong&gt;Error function (誤差関数)&lt;/strong&gt; と呼ぶ&lt;/p&gt;

&lt;p&gt;Error functionはHidden LayerのActivation functionとセットで設計され、
それらは問題の種類ごとに異なる.&lt;/p&gt;

&lt;p&gt;今回は Multi-class classification なのでActivation functionにSoftmax functionを使用し、
Error functionには&lt;/p&gt;

&lt;p&gt;$$
E(W) = - \sum _{n=1}^{N} \sum _{k=1}^{K} d _{nk} \log y _{nk} \tag{7}
$$&lt;/p&gt;

&lt;p&gt;を使用する.
ここで $W$ はネットワークの全体の重みをまとめた行列で (3) によりBiasもここに入る、
$n$ はTrainig dataにおけるTraining sampleの番号、
$K$ はOutput LayerのUnit数、
$k$ はOutput LayerのUnit番号、
$d _{nk}$ は n 番目のTraining sampleの k 番目のUnitの目標値、
$y _{nk}$ は n 番目のTraining sampleの k 番目のUnitのOutput.&lt;/p&gt;

&lt;p&gt;今回はMulti-class classificationなので、 $d _{nk}$ は&lt;/p&gt;

&lt;p&gt;$$
\sum _{k=1}^{K} d _{k} = 1 \tag{8}
$$&lt;/p&gt;

&lt;p&gt;で、正解のclassに対応する一つのUnitのOutputが 1 で、残りのUnitのOutputが 0 となる.&lt;/p&gt;

&lt;h2 id=&#34;stochastic-gradient-descent:99621a27901250e81c3c36481758f611&#34;&gt;Stochastic Gradient Descent&lt;/h2&gt;

&lt;p&gt;ネットワークの目的はError functionの値を小さくすることだが、
Error functionは一般に凸関数ではなく、大域的な最小解を直接得ることは通常不可能.&lt;/p&gt;

&lt;p&gt;代わりに局所的な極小点を求める.
一般に $E(W)$ の極小点は複数存在するため、得た極小点が大域的な最小解となることはほぼ無いが、
それでもその極小点が十分小さい値ならば目的に貢献し得る.&lt;/p&gt;

&lt;p&gt;局所的な極小点の探索方法はいくつかあるが、最も簡単なのが &lt;strong&gt;Gradient Descent Method (勾配降下法)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Gradientというのは $W$ の成分数を $M$ として、&lt;/p&gt;

&lt;p&gt;$$
\nabla E = \frac{\partial W}{\partial E} = [\frac{\partial E}{\partial w_1} &amp;hellip; \frac{\partial E}{\partial w _M}]^{T} \tag{9}
$$&lt;/p&gt;

&lt;p&gt;というVectorで、
Gradient Descent Method は $W$ を $- \nabla E$ 方向に動かし、
これをなんども繰り返すことで局所的な極小点を探索する.&lt;/p&gt;

&lt;p&gt;現在の重みを $W^{(t)}$ 、動かした後の重みを $W^{(t+1)}$ とすると&lt;/p&gt;

&lt;p&gt;$$
W^{(t+1)} = W^{(t)} - \epsilon \nabla E \tag{10}
$$&lt;/p&gt;

&lt;p&gt;とあらわされる.&lt;/p&gt;

&lt;p&gt;このときの $\epsilon$ を &lt;strong&gt;Learning rate (学習係数)&lt;/strong&gt; と呼び、
一回の更新での $W$ の更新量を決める定数.
大きいと極小点に収束しない可能性があり、小さいと収束までの反復回数が多くなる.&lt;/p&gt;

&lt;p&gt;Learing rateの決定にも手法があるが、今回はとりあえず定数で指定することにする.&lt;/p&gt;

&lt;p&gt;Gradient Descent Method はTraining data全体に対してError functionの値を最小化する.&lt;/p&gt;

&lt;p&gt;$$
E(W) = \sum _{n=1}^{N} E_n(w) \tag{11}
$$&lt;/p&gt;

&lt;p&gt;これに対してTraining dataの一部を使って $W$ の更新を行う (さらに更新ごとにTraining samplesを取り替える) 手法を
&lt;strong&gt;Stochastic Gradient Descent (確率的勾配降下法)&lt;/strong&gt; と呼ぶ.&lt;/p&gt;

&lt;p&gt;Stochastic Gradient Descent を使うと、 Gradient Descent Method に潜在する
&lt;em&gt;相対的に小さくない局所的な極小解にはまるリスク&lt;/em&gt; を小さくできる.&lt;/p&gt;

&lt;h2 id=&#34;back-propagation:99621a27901250e81c3c36481758f611&#34;&gt;Back propagation&lt;/h2&gt;

&lt;p&gt;Gradient Descent Method を実行するには&lt;/p&gt;

&lt;p&gt;$$
\nabla E = \frac{\partial W}{\partial E} = [\frac{\partial E}{\partial w_1} &amp;hellip; \frac{\partial E}{\partial w _M}]^{T} \tag{9}
$$&lt;/p&gt;

&lt;p&gt;を計算する必要があるが、微分の連鎖規則のため、Output Layerから遠いLayerになると微分計算が困難になる.&lt;/p&gt;

&lt;p&gt;これを解決するのが &lt;strong&gt;Back propagation (誤差逆伝播法)&lt;/strong&gt;.
Back propagation はOutput LayerからInput Layerに向かって、連鎖的に勾配を計算していく方法.&lt;/p&gt;

&lt;p&gt;n 番目のTraining sampleのError functionの値 $E_n$ をLayer $p$ におけるParameter $w _{ji}^{(p)}$ に関して微分すると、
$w _{ji}^{(p)}$ は&lt;/p&gt;

&lt;p&gt;$$
u_j^{(p)} = \sum _{i=0}^{I} w _{ji} z _{i}^{(p-1)} \tag{4}
$$&lt;/p&gt;

&lt;p&gt;により $u_j^{(p)}$ の中にのみ存在するので、&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial E_n}{\partial w _{ji}^{(p)}} = \frac{\partial E_n}{\partial u _{j}^{(p)}} \frac{\partial u _{j}^{(p)}}{\partial w _{ji}^{(p)}} \tag{12}
$$&lt;/p&gt;

&lt;p&gt;となる.&lt;/p&gt;

&lt;p&gt;$u_j^{(p)}$ の変動が $E_n$ に与える影響は、
このUnit $j$からのOutput $z_j^{(p)}$ を通じて、$p+1$ LayerのOutputを変化させることによってのみ生じるので、
(12) の右辺第1項は&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial E_n}{\partial u _{j}^{(p)}} = \sum _k \frac{\partial E_n}{\partial u_k^{(p+1)}} \frac{\partial u_k^{(p+1)}}{\partial u_j^{(p)}} \tag{13}
$$&lt;/p&gt;

&lt;p&gt;となる.&lt;/p&gt;

&lt;p&gt;左辺の $\frac{\partial E_n}{\partial u _{j}^{(p)}}$ と右辺の $\frac{\partial E_n}{\partial u _{j}^{(p+1)}}$ に注目して、&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{p} = \frac{\partial E_n}{\partial u _{j}^{(p)}} \tag{14}
$$&lt;/p&gt;

&lt;p&gt;とおく.&lt;/p&gt;

&lt;p&gt;$$
u_k^{(p+1)} = \sum _j w _{kj}^{(p+1)} z_j^{(p)} = \sum _j w _{kj}^{(p+1)} f(u_j^{(p)}) \tag{15}
$$&lt;/p&gt;

&lt;p&gt;より、&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial u_k^{(p+1)}}{\partial u_j^{(p)}} = w _{kj}^{(p+1)} f&amp;rsquo;(u_j^{(p)}) \tag{16}
$$&lt;/p&gt;

&lt;p&gt;となるので、 (13) は&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{(p)} = \sum _k \delta _j^{(p+1)} (w _{kj}^{(p+1)} f&amp;rsquo;(u_j^{(p)})) \tag{17}
$$&lt;/p&gt;

&lt;p&gt;となる. これは $\delta _j^{(p)}$ が $\delta _k^{(p+1)} (k = 1, 2, &amp;hellip;)$ から計算できることを意味する.&lt;/p&gt;

&lt;p&gt;(12) の右辺第1項はこのように $\delta$ を計算することで得られる.
第2項は $u_j^{(p)} = \sum _i w _{ji}^{(p)} z_i^{(p-1)}$ から&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial u _{j}^{(p)}}{\partial w _{ji}^{(p)}} = z_i^{(p-1)} \tag{18}
$$&lt;/p&gt;

&lt;p&gt;が得られるので、目的の微分は&lt;/p&gt;

&lt;p&gt;$$
\frac{\partial E_n}{\partial w _{ji}^{(p)}} = \delta _j^{(p)} z_i{(p-1)} \tag{19}
$$&lt;/p&gt;

&lt;p&gt;となり、 $p-1$ Layerと $p$ LayerをつなぐConnectionの重み $w _{ji}^{(p)}$ に関する微分は、
Unit $j$ に関する $\delta _j^{(p)}$ と Unit $i$ のOutput $z_i^{(p-1)}$ のただの積で与えられる.
$\delta$ はOutput LayerからInput Layerに順に (17) を適用すれば求められる.
Output Layerでの $\delta$ は&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{(P)} = \frac{\partial E_n}{\partial u_j^{(P)}} \tag{20}
$$&lt;/p&gt;

&lt;p&gt;で計算できる.&lt;/p&gt;

&lt;p&gt;今回はOutput LayerのError functionは (7) を使用し
( n 番目のTrainig sampleに関しては $-\sum _{k=1}^{K} d _{nk} \log y _{nk}$)、
Activation functionにSoftmax functionを使用しているので、&lt;/p&gt;

&lt;p&gt;$$
E_n = - \sum _k d_k \log y_k = - \sum _k d_k log (\frac{e^{u_k^{(P)}}}{\sum _i e^{u_i^{(P)}}}) \tag{21}
$$&lt;/p&gt;

&lt;p&gt;となり、&lt;/p&gt;

&lt;p&gt;$$
\delta _j^{(P)} = - \sum _k d_k \frac{1}{y_k} \frac{\partial y_k}{\partial u_j^{(P)}}
= -d_j(1-y_j) - \sum _{k \neq j} d_k(-y_j)
= \sum _k d_k (y_j - d_j)
\tag{22}
$$&lt;/p&gt;

&lt;p&gt;で $\delta$ が求められる.&lt;/p&gt;

&lt;p&gt;(20) ( 今回は具体的には (22) ) と (17) により任意のLayerの $\delta$ が求められるので、 (19) により任意のConnectionの重み $w$ を更新できる.&lt;/p&gt;

&lt;h1 id=&#34;impl:99621a27901250e81c3c36481758f611&#34;&gt;Impl&lt;/h1&gt;

&lt;p&gt;順伝播型ニューラルネットワークのcoreなところを追ったところで実装.
数式の流れをちゃんと理解できてたら大したこと無い.&lt;/p&gt;

&lt;p&gt;※以下のCodeはそのままで動くようには書いてない.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160226/impl_1.png&#34; alt=&#34;/20160226/impl_1.png&#34;&gt;


&lt;p&gt;上の図を &lt;code&gt;CLOS&lt;/code&gt; に落とし込む.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defclass unit ()
  ((input-value ...)
   (output-value ...)
   (left-connections ...)
   (right-connections ...)
   (delta ...)))

(defclass bias-unit (unit) ())

(defclass connection ()
  ((left-unit ...)
   (right-unit ...)
   (weight ...)
   (weight-diff ...)))

(defclass layer ()
  ((bias-unit ...)
   (units ...)))

(defclass input-layer (layer) ())

(defclass hidden-layer (layer)
  ((bias-unit :initform (make-instance &#39;bias-unit))))

(defclass output-layer (layer)
  ((bias-unit :initform (make-instance &#39;bias-unit))))

(defclass dnn ()
  ((layers ...)
   (connections ...)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Input Layer以外のLayerのUnitのInputは (4) なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun calculate-unit-input-value (unit)
  (reduce #&#39;+
          (mapcar #&#39;(lambda (connection)
                      (* (unit-output-value (connection-left-unit connection))
                         (connection-weight connection)))
                  (unit-left-connections unit))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、OutputはBias Unit (Outputが1) 以外は (2) なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defgeneric calculate-unit-output-value (unit)
  (:method ((unit unit))
    (funcall activatinon-function (unit-input-value unit)))
  (:method ((unit bias-unit))
    (declare (ignore unit))
    1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように計算できる.&lt;/p&gt;

&lt;p&gt;これをInput LayerからOutput Layerまで繰り返してネットワークの出力を得る.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun predict (dnn input)
  (dolist (layer (dnn-layers dnn))
    (etypecase layer
      (input-layer
       (map nil
            #&#39;(lambda (input-unit value)
                (setf (unit-input-value input-unit) value
                      (unit-output-value input-unit) value))
            (layer-units layer)
            input))
      ((or hidden-layer output-layer)
       (let ((units (layer-units layer)))
         (dolist (unit units)
           (let ((input-value (calculate-unit-output-value unit)))
             (setf (unit-input-value unit) input-value
                   (unit-output-value unit)
                   (calculate-unit-output-value unit))))))))
  (mapcar #&#39;unit-output-value
          (layer-units (output-layer (dnn-layers dnn)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにError functionを適用する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun test (dnn data-set)
  (/ (reduce #&#39;+
             (mapcar #&#39;(lambda (data)
                         (funcall error-function
                                  (predict dnn (data-input data))
                                  (data-expected data)))
                     data-set))
     (length data-set)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは (20) と (17) で $\delta$ を計算し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defgeneric calculate-delta (layer unit)
  (:method ((layer output-layer) unit)
    ...)
  (:method ((layer hidden-layer) unit)
    ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back propagationで &lt;code&gt;connection&lt;/code&gt; の &lt;code&gt;weight&lt;/code&gt; を更新すれば学習ができる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun train (dnn data-set)
  (dolist (data data-set)
    (predict dnn (data-input data))
    (dolist (layer (reverse (cdr (dnn-layers dnn))))
      (dolist (unit (layer-units layer))
        (let ((delta (calculate-delta layer unit)))
          (setf (unit-delta unit) delta)
          (dolist (connection (unit-left-connections unit))
            (incf (connection-weight-diff connection)
                  (* delta
                     (unit-output-value
                      (connection-left-unit connection))))))))
    (dolist (outer-connections (dnn-connections dnn))
      (dolist (inner-connectios outer-connections)
        (dolist (connection inner-connectios)
          (decf (connection-weight connection)
                (* (dnn-learning-coefficient dnn)
                   (connection-weight-diff connection)))
          (setf (connection-weight-diff connection) 0))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけで順伝播型ニューラルネットワークが実装できる.&lt;br /&gt;
(実際は &lt;code&gt;connection&lt;/code&gt; の &lt;code&gt;weight&lt;/code&gt; を平均0で分散1の正規乱数で初期化や、
Inputの正規化や、Mini-batchで学習の実装もしている.)&lt;/p&gt;

&lt;h1 id=&#34;test:99621a27901250e81c3c36481758f611&#34;&gt;Test&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Fisher&#39;s iris flower data set&lt;/code&gt; (統計の有名なデータセット) の多クラス分類 (Multi-class classification) をやってみる.&lt;/p&gt;

&lt;p&gt;データセット自体は R で &lt;code&gt;iris&lt;/code&gt; とかやると出てくるもので、
&lt;code&gt;iris dataset&lt;/code&gt; とかで検索すれば手に入る.&lt;/p&gt;

&lt;p&gt;どういうデータかというと、4つのInputと1つのLabelの集まりで、Labelは3種類ある.
そのためテストではInput Layerは4 Units、Hidden Layerは10 Units、Output Layerは3 Units、学習係数は0.001で組んだ.
(Hidden LayerのLayer数やUnit数と学習係数は適当.)&lt;/p&gt;

&lt;p&gt;今回使ったデータセットは150サンプルあるので、それを15サンプルずつの10セットに分ける.
そのうち1セットをテストデータとして取り、残りを教師データとして学習に使用する.
教師データでの学習の度に学習データを &lt;code&gt;test&lt;/code&gt; にかけ Error function の値をとり、
それが一定以下になるか、指定の学習回数を経るとと学習を打ち切る.
学習のあとにテストデータで &lt;code&gt;predict&lt;/code&gt; を行って正解数を記録する.
それを10セット繰り返す.
最後に正解率を出す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(defun data-sets ()
  ...)

(defun main (&amp;amp;optional (training-count 0))
  (let* ((layers (make-layers (list (list &#39;input-layer 4)
                                    (list &#39;hidden-layer 10 &#39;rectified-linear-unit)
                                    (list &#39;output-layer 3 &#39;softmax))))
         (connections (connect layers))
         (dnn (make-instance &#39;dnn
                             :layers layers
                             :connections connections
                             :learning-coefficient 0.001))
         (data-sets (data-sets))
         (correc-count 0)
         (test-count 0))
    (dolist (test-data-set data-sets)
      (let ((train-data-set (apply #&#39;append (remove test-data-set data-sets))))
        (loop repeat training-count
              do (train dnn train-data-set)
              until (&amp;lt; (test dnn train-data-set) 0.01))
        (dolist (data test-data-set)
          (incf test-count)
          (let ((result (predict dnn (data-input data))))
            (when (= (position (apply #&#39;max result) result)
                     (data-expected data))
              (incf correc-count))))))
    (format t &amp;quot;Accuracy: ~,2f%~%&amp;quot; (* 100 (/ correc-count test-count)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;学習回数を0から10000で変えながら順に実行する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(dolist (times (list 0 10 100 1000 10000))
  (format t &amp;quot;TIMES: ~a~%&amp;quot; times)
  (loop repeat 3
        do (main times)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TIMES: 0
Accuracy: 33.33%
Accuracy: 33.33%
Accuracy: 33.33%
TIMES: 10
Accuracy: 50.00%
Accuracy: 54.00%
Accuracy: 60.00%
TIMES: 100
Accuracy: 89.33%
Accuracy: 82.00%
Accuracy: 86.67%
TIMES: 1000
Accuracy: 95.33%
Accuracy: 97.33%
Accuracy: 95.33%
TIMES: 10000
Accuracy: 97.33%
Accuracy: 97.33%
Accuracy: 96.67%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと学習できてるっぽい.&lt;/p&gt;

&lt;p&gt;Codeは &lt;a href=&#34;https://github.com/Rudolph-Miller/cldl&#34;&gt;CLDL&lt;/a&gt; に置いてるけど、
まぁとくに汎用的なLibraryにするつもりは無いし参考程度に.
(Common LispでDeep Learningしたいだけなら、もっとちゃんとしたLibraryがあるはず.)&lt;/p&gt;

&lt;h1 id=&#34;todo:99621a27901250e81c3c36481758f611&#34;&gt;TODO&lt;/h1&gt;

&lt;p&gt;まだ実装し残してることがあるのでリストアップする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convolution Layer (畳み込み層)&lt;/li&gt;
&lt;li&gt;Pooling Layer (プーリング層)&lt;/li&gt;
&lt;li&gt;MNISTの画像解析&lt;/li&gt;
&lt;li&gt;Recurrent Neural Network (再帰型ニューラルネットワーク)&lt;/li&gt;
&lt;li&gt;Autoencoder (自己符号化器)&lt;/li&gt;
&lt;li&gt;Automatic Differentiation (自動微分)&lt;/li&gt;
&lt;li&gt;学習係数の決定&lt;/li&gt;
&lt;li&gt;Regularization (正則化)

&lt;ul&gt;
&lt;li&gt;Weight restriction&lt;/li&gt;
&lt;li&gt;Weight decay&lt;/li&gt;
&lt;li&gt;Dropout&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当分やることには困らなそう.&lt;/p&gt;

&lt;h1 id=&#34;see-also:99621a27901250e81c3c36481758f611&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B018K6C99A/ref=as_li_tf_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=B018K6C99A&amp;amp;linkCode=as2&amp;amp;tag=rudolph-miller-22&#34;&gt;深層学習&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/cldl&#34;&gt;CLDL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Export HTML Slide as PDF</title>
      <link>https://blog.rudolph-miller.com/2016/02/13/export-html-slide-as-pdf/</link>
      <pubDate>Sat, 13 Feb 2016 01:17:33 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/02/13/export-html-slide-as-pdf/</guid>
      <description>

&lt;p&gt;HTMLなSlideをPDFにexportする.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#html-slide:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;HTML Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#export-html-slide:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;Export HTML Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;html-slide:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;HTML Slide&lt;/h1&gt;

&lt;p&gt;最近 &lt;a href=&#34;https://github.com/yusukebe/revealgo&#34;&gt;yusukebe/revealgo&lt;/a&gt; が話題となり
MarkdownでHTML Slideのgenerateが再燃(?)しているが、
HTML Slideで困るのがSlideの共有だ.&lt;/p&gt;

&lt;p&gt;普段Remark.jsを使ってMarkdownからHTML Slideをgenerateしているのだが、
以前Kaizen PlatformでのTech Talk #4で &lt;a href=&#34;https://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/&#34;&gt;Slide&lt;/a&gt;
を発表した際、共有のために &lt;code&gt;iframe&lt;/code&gt; でこのSlideを埋め込んだ
&lt;a href=&#34;https://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/&#34;&gt;Blog post&lt;/a&gt; を作り共有していた.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160213/share_lisp_1.gif&#34; alt=&#34;20160213/share_lisp_1.gif&#34;&gt;


&lt;p&gt;今更ながらふと、PhantomJSなどでScreenshotを撮り、それをPDFに変換し、
Speaker Deck や SlideShare にuploadして共有できないかと考えた.&lt;/p&gt;

&lt;h1 id=&#34;export-html-slide:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;Export HTML Slide&lt;/h1&gt;

&lt;p&gt;そんなTool作ろうとしたところで、とりあえず調べてみると
&lt;a href=&#34;https://github.com/astefanutti/decktape&#34;&gt;DeckTape&lt;/a&gt; というProjectが見つかった.&lt;/p&gt;

&lt;h2 id=&#34;about-decktape:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;About DeckTape&lt;/h2&gt;

&lt;p&gt;DeckTapeは&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DeckTape is a high-quality PDF exporter for HTML5 presentation frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;らしい.&lt;/p&gt;

&lt;p&gt;SupportしているFrameworkは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://leaverou.github.io/csss/&#34;&gt;CSSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://imakewebthings.com/deck.js/&#34;&gt;deck.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://paulrouget.com/dzslides/&#34;&gt;DZSlides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://flowtime-js.marcolago.com/&#34;&gt;flowtime.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/Talks/Tools/&#34;&gt;HTML Slidy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://impress.github.io/impress.js&#34;&gt;impress.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://remarkjs.com/&#34;&gt;remark.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lab.hakim.se/reveal-js&#34;&gt;reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shwr.me/&#34;&gt;Shower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、使用していた Remark.js もsupportされていた.&lt;/p&gt;

&lt;p&gt;とりあえずこれを使ってSpeaker Deckにuploadしてみる.&lt;/p&gt;

&lt;h2 id=&#34;install:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;DeckTapeのREADMEの &lt;a href=&#34;https://github.com/astefanutti/decktape#install&#34;&gt;Install&lt;/a&gt; sectionを見ると、PhantomJSのforked versionを使用しているとのこと.
これを見てやめようかと思ったが、READMEを少し読んでいくと &lt;a href=&#34;https://github.com/astefanutti/decktape#docker&#34;&gt;Docker&lt;/a&gt; なるsectionがあり、どうもDocker imageを配布しているようなので、Docker imageでInstallすることにする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker pull astefanutti/decktape
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単だ.&lt;/p&gt;

&lt;h2 id=&#34;run:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;Run&lt;/h2&gt;

&lt;p&gt;とりあえず&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run astefanutti/decktape -h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してみると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run astefanutti/decktape -h

Usage: phantomjs decktape.js [options] [command] &amp;lt;url&amp;gt; &amp;lt;filename&amp;gt;

command      one of: automatic, csss, deck, dzslides, flowtime, generic, impress, remark, reveal, shower, slidy
url          URL of the slides deck
filename     Filename of the output PDF file

Options:
   -s, --size                Size of the slides deck viewport: &amp;lt;width&amp;gt;x&amp;lt;height&amp;gt;  [1280x720]
   -p, --pause               Duration in milliseconds before each slide is exported  [1000]
   --screenshots             Capture each slide as an image  [false]
   --screenshots-directory   Screenshots output directory  [screenshots]
   --screenshots-size        Screenshots resolution, can be repeated
   --screenshots-format      Screenshots image format, one of [jpg, png]  [png]

Defaults to the automatic command.
Iterates over the available plugins, picks the compatible one for presentation at the 
specified &amp;lt;url&amp;gt; and uses it to export and write the PDF into the specified &amp;lt;filename&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示され、ちゃんと動いてることが分かった.&lt;/p&gt;

&lt;p&gt;Docker imageなので良い感じににcurrent directoryをmountして、さらにScreen sizeを指定して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run --rm -v `pwd`:/pwd astefanutti/decktape -s 1240x930 https://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/ /pwd/lisp.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Loading page https://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/ ...

Loading page finished with status: success
Remark JS DeckTape plugin activated
Printing slide #88      (1/88) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と読み込まれ、Remark.js製ということも判別でき、処理が始まったようだ.&lt;/p&gt;

&lt;p&gt;最後に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Printed 88 slides
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示されて、処理は終了. &lt;code&gt;lisp.pdf&lt;/code&gt; にPDFが生成されていた.&lt;/p&gt;

&lt;h2 id=&#34;upload:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;Upload&lt;/h2&gt;

&lt;p&gt;あとはこの生成された &lt;code&gt;lisp.pdf&lt;/code&gt; をSpeaker Deckにuploadすると、&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;77ce6ba2d6134d94a77e432f0246cd06&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;のようにちゃんと処理できていることが分かる.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;これでなんの気兼ねもなく、これからもMarkdownでSlideを作れる.&lt;/p&gt;

&lt;p&gt;めでたし.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;see-also:a5ea6a661ec970ab6e9fbdd82bb7f6a8&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/astefanutti/decktape&#34;&gt;DeckTape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yusukebe/revealgo&#34;&gt;yusukebe/revealgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/slide/2015/10/29/about-lisp/&#34;&gt;Tech Talk About Lisp - Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/&#34;&gt;Tech Talk About Lisp - Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>detect-js-changes</title>
      <link>https://blog.rudolph-miller.com/2016/01/31/detect-js-changes/</link>
      <pubDate>Sun, 31 Jan 2016 21:39:15 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/31/detect-js-changes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/detect-js-changes&#34;&gt;detect-js-changes&lt;/a&gt;という業務Toolを作ってKaizenの業務をKAIZENした話.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#background:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#detect-js-changes:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;detect-js-changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#go:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;background:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Background&lt;/h1&gt;

&lt;h2 id=&#34;javascript-file:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;JavaScript file&lt;/h2&gt;

&lt;p&gt;Kaizen PlatformではAB TestのJavaScript fileをBaseのfileにClient毎のDataを書き出して生成している.
生成後、JavaScript fileをClient毎のS3 ObjectにUploadしている.&lt;/p&gt;

&lt;h2 id=&#34;e2e:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;E2E&lt;/h2&gt;

&lt;p&gt;このAB TestのJavaScriptに対してPhantomJSやBrowserStack上でのE2E Testを行っている.&lt;/p&gt;

&lt;p&gt;DeployのタイミングでこのE2E Testを実施しているのだが、
そもそも生成されるJavaScript fileに変更がなかった場合Test結果は変わらないのでskipすることになっている.&lt;/p&gt;

&lt;h2 id=&#34;until-now:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Until now&lt;/h2&gt;

&lt;p&gt;このJavaScript fileに変更があるかないかの確認フローは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;今までは対象のJavaScript files (16 files) のURLに対して &lt;code&gt;wget&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Depoly.&lt;/li&gt;
&lt;li&gt;再度 &lt;code&gt;wget&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;末尾にJavaScript file生成日時のTimestampと、ClientのDataに書き出した日時のTimestampがあるので、それら意外に差分がないかを &lt;code&gt;diff&lt;/code&gt; で確認.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となっていて、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;何回も &lt;code&gt;wget&lt;/code&gt; する.

&lt;ul&gt;
&lt;li&gt;Deploy環境によってURLが変わる. (QA用やProduction用など.)&lt;/li&gt;
&lt;li&gt;Timestampの差分すら出なかった場合はS3の反映待ちだったりするので、再度 &lt;code&gt;wget&lt;/code&gt; する.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JavaScript fileはminifyしてあるので、&lt;code&gt;diff&lt;/code&gt; をとるにはunminifyしないといけない.&lt;/li&gt;
&lt;li&gt;Timestampの差分はでるので、 &lt;code&gt;diff&lt;/code&gt; の結果をTimestampの差分かどうか確認しないといけない.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりが面倒くさい.&lt;/p&gt;

&lt;p&gt;ひとつひとつのStepはScriptが用意されていたりするが、それでも面倒くさい.&lt;/p&gt;

&lt;p&gt;Depoly (基本は週2回) 毎にこれを誰かが実行している.&lt;/p&gt;

&lt;h1 id=&#34;detect-js-changes:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;detect-js-changes&lt;/h1&gt;

&lt;p&gt;この面倒くささを解消するために作ったのが &lt;code&gt;detect-js-changes&lt;/code&gt; だ.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/Rudolph-Miller/detect-js-changes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でinstallできる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;detect-js-changes&lt;/code&gt; を使うと上の確認フローが、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;detect-js-changes download&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Deploy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detect-js-changes download&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detect-js-changes detect&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となる.&lt;/p&gt;

&lt;p&gt;Deploy環境ごとのURLは &lt;code&gt;config.yml&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;qa:
  urls:
  - https://qa.kaizenplatform.com/file1.js
  - https://qa.kaizenplatform.com/file2.js
production:
  urls:
  - https://production.kaizenplatform.com/file1.js
  - https://production.kaizenplatform.com/file2.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とYAMLで記述し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;detect-js-changes -e qa -c config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と環境やConfig fileを指定できる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.yml&lt;/code&gt; でどういうKeywordをignoreするか
(今回は末尾のTimestampとClientのDataのTimestampを特定するKeyword)
も指定できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;default:
  ignore_keywords:
  - Timestamp
  - generated_at
qa:
  urls:
  - https://qa.kaizenplatform.com/file1.js
  - https://qa.kaizenplatform.com/file2.js
production:
  urls:
  - https://production.kaizenplatform.com/file1.js
  - https://production.kaizenplatform.com/file2.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;go:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Go&lt;/h1&gt;

&lt;p&gt;軽く実装に触れておく.&lt;/p&gt;

&lt;p&gt;言語は &lt;code&gt;Go&lt;/code&gt; を使用しており、採用理由はなんとなくである.&lt;/p&gt;

&lt;h2 id=&#34;cli:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;CLI&lt;/h2&gt;

&lt;p&gt;CLIには &lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;&lt;code&gt;codegangsta/cli&lt;/code&gt;&lt;/a&gt; を使用した.&lt;/p&gt;

&lt;p&gt;感想は特にない.&lt;/p&gt;

&lt;h2 id=&#34;yaml:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;YAML&lt;/h2&gt;

&lt;p&gt;YAML formatのConfig fileのparseには &lt;a href=&#34;https://github.com/go-yaml/yaml&#34;&gt;gopkg.in/yaml.v2&lt;/a&gt; を使用した.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;gopkg.in/yaml.v2&amp;quot;
  &amp;quot;os&amp;quot;
)

var data = `
key1: value1
key2:
  key3:
  - value2
  - value3
`

type T struct {
  Key1 string
  Key2 struct {
    Key3 []string
  }
}

func main() {
  t := T{}
  err := yaml.Unmarshal([]byte(data), &amp;amp;t)
  if err != nil {
    fmt.Println(err)
    os.Exit(1)
  }

  fmt.Println(t)
  // {value1 {[value2 value3]}}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様にOutputの &lt;code&gt;struct&lt;/code&gt; を用意して &lt;code&gt;yaml.Unmarshal&lt;/code&gt; するのだが、今回のConfig fileは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;default:
  ignore_keywords:
  - sample keyword
development:
  urls:
  - https://development.kaizenplatform.com/file0.js
  - https://development.kaizenplatform.com/file1.js
production:
  urls:
  - https://production.kaizenplatform.com/file0.js
  - https://production.kaizenplatform.com/file1.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様に環境名がTop levelのKeyとなりその下に特定のKVが入る形式で、
環境名はUserが自由に指定でき、Top levelのKeyが指定できない.&lt;/p&gt;

&lt;p&gt;この場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;gopkg.in/yaml.v2&amp;quot;
  &amp;quot;os&amp;quot;
)

var data = `
default:
  key1: value1
  key2:
    key3:
    - value2
    - value3
development:
  key1: value1
  key2:
    key3:
    - value2
    - value3
`

type T struct {
  Key1 string
  Key2 struct {
    Key3 []string
  }
}

func main() {
  m := make(map[string]T)
  err := yaml.Unmarshal([]byte(data), &amp;amp;m)
  if err != nil {
    fmt.Println(err)
    os.Exit(1)
  }

  fmt.Println(m)
  // map[default:{value1 {[value2 value3]}} development:{value1 {[value2 value3]}}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様に &lt;code&gt;map&lt;/code&gt; で指定する.&lt;/p&gt;

&lt;h2 id=&#34;unminify:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Unminify&lt;/h2&gt;

&lt;p&gt;minified fileのunminifyには &lt;a href=&#34;https://github.com/ditashi/jsbeautifier-go&#34;&gt;&lt;code&gt;ditashi/jsbeautifier-go&lt;/code&gt;&lt;/a&gt; と言う &lt;a href=&#34;http://jsbeautifier.org&#34;&gt;jsbeautifier&lt;/a&gt; のGo port (CLI tool) の内部APIを使用した.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function main(){var e={key1:&amp;quot;value1&amp;quot;,key2:{key3:[&amp;quot;value2&amp;quot;,&amp;quot;value3&amp;quot;]}};console.log(e)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様なminifiedなJavaScriptを &lt;code&gt;example.min.js&lt;/code&gt; として用意して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;github.com/ditashi/jsbeautifier-go/jsbeautifier&amp;quot;
)

func beautify(src string) *string {
  options := jsbeautifier.DefaultOptions()
  return jsbeautifier.BeautifyFile(src, options)
}

func main() {
  filename := &amp;quot;example.min.js&amp;quot;
  fmt.Println(*beautify(filename))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;go run&lt;/code&gt; すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function main() {
    var e = {
        key1: &amp;quot;value1&amp;quot;,
        key2: {
            key3: [&amp;quot;value2&amp;quot;, &amp;quot;value3&amp;quot;]
        }
    };
    console.log(e)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とunminifyできる.&lt;/p&gt;

&lt;h2 id=&#34;diff:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Diff&lt;/h2&gt;

&lt;p&gt;diffには &lt;a href=&#34;https://github.com/sergi/go-diff&#34;&gt;sergi/go-diff/diffmatchpatch&lt;/a&gt; を使用した.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;github.com/sergi/go-diff/diffmatchpatch&amp;quot;
  &amp;quot;strings&amp;quot;
)

func lineDiff(src1, src2 string) []diffmatchpatch.Diff {
  dmp := diffmatchpatch.New()
  a, b, c := dmp.DiffLinesToChars(src1, src2)
  diffs := dmp.DiffMain(a, b, false)
  result := dmp.DiffCharsToLines(diffs, c)
  return result
}

func prefix(diff diffmatchpatch.Diff) string {
  switch diff.Type {
  case diffmatchpatch.DiffEqual:
    return &amp;quot; &amp;quot;
  case diffmatchpatch.DiffInsert:
    return &amp;quot;+&amp;quot;

  case diffmatchpatch.DiffDelete:
    return &amp;quot;-&amp;quot;
  }
  return &amp;quot; &amp;quot;
}

var src1 = `
abc
def
ghi
`

var src2 = `
abc
defg
hi
`

func main() {
  result := lineDiff(src1, src2)

  for _, diff := range result {
    for _, string := range strings.Split(diff.Text, &amp;quot;\n&amp;quot;) {
      if len(string) &amp;gt; 0 {
        fmt.Println(prefix(diff) + string)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;go run&lt;/code&gt; すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; abc
-def
-ghi
+defg
+hi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり、行単位のdiffが取れている.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;業務KAIZEN! ╭( ･ㅂ･)و&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;see-also:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/detect-js-changes&#34;&gt;detect-js-changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;codegangsta/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-yaml/yaml&#34;&gt;gopkg.in/yaml.v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ditashi/jsbeautifier-go&#34;&gt;ditashi/jsbeautifier-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sergi/go-diff&#34;&gt;sergi/go-diff/diffmatchpatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Use SSL with Custom Domain on GitHub Pages</title>
      <link>https://blog.rudolph-miller.com/2016/01/29/use-ssl-with-custom-domain-on-gh-pages/</link>
      <pubDate>Fri, 29 Jan 2016 17:18:42 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/29/use-ssl-with-custom-domain-on-gh-pages/</guid>
      <description>

&lt;p&gt;Custom domainなGitHub PagesをSSL対応する.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ssl-on-github-pages:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;SSL on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudflare:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;CloudFlare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;ssl-on-github-pages:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;SSL on GitHub Pages&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;blog.rudolph-miller.com&lt;/em&gt; はGitHub Pagesで配信しており、
ふとGitHub PagesはSSL対応しているのかと思い調べてみた.&lt;/p&gt;

&lt;p&gt;defaultの &lt;em&gt;github.io&lt;/em&gt; domainの場合はSSL対応しているが (&lt;a href=&#34;https://github.com/isaacs/github/issues/156&#34;&gt;公式には完了していない??&lt;/a&gt;) 、
Custom domainを使用している場合は証明書のdomainが異なるためGitHubの発行している証明書ではSSLが使えないようだった.&lt;/p&gt;

&lt;p&gt;なにかやり方がないかと調べていると、
&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;のDNSを使えばCustom domainでもSSL対応できそうだったのでやってみた.&lt;/p&gt;

&lt;h1 id=&#34;cloudflare:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;CloudFlare&lt;/h1&gt;

&lt;h2 id=&#34;about:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;CloudFlareはCDNやDNSをやってるUSの企業.
Freeプランがあり、基本無料で使える.&lt;/p&gt;

&lt;h2 id=&#34;setting:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;Setting&lt;/h2&gt;

&lt;p&gt;Sign upからdomainの登録は迷わないと思うので割愛.&lt;/p&gt;

&lt;p&gt;今回した設定は &lt;code&gt;SSL&lt;/code&gt;, &lt;code&gt;HSTS&lt;/code&gt;, &lt;code&gt;Subdomain&lt;/code&gt;.
基本的にはCloudFlareの管理画面のDomain毎のOverviewの上のMenuから入って設定する.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/menu.png&#34; alt=&#34;20160129/menu.png&#34;&gt;


&lt;h3 id=&#34;ssl:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;SSL&lt;/h3&gt;

&lt;p&gt;SSLの設定は上のMenuの &lt;code&gt;Crypto&lt;/code&gt;&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/crypto.png&#34; alt=&#34;20160129/crypto.png&#34;&gt;


&lt;p&gt;から行う.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/ssl.png&#34; alt=&#34;20160129/ssl.png&#34;&gt;


&lt;p&gt;SSLの設定は &lt;code&gt;Off&lt;/code&gt;, &lt;code&gt;Flexible&lt;/code&gt;, &lt;code&gt;Full&lt;/code&gt;, &lt;code&gt;Strict&lt;/code&gt; と選べる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flexible&lt;/code&gt;: ClientとCloudFlareの間は暗号化されたConnectionを使い、CloudFlareからServerは暗号化されてないConnectionを使う.

&lt;ul&gt;
&lt;li&gt;ServerにSSL証明書が必要ない.&lt;/li&gt;
&lt;li&gt;今回はこれを使用.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Full&lt;/code&gt;: ClientとCloudFlare間もCloudFlareからServer間も暗号化されたConnectionを使う.

&lt;ul&gt;
&lt;li&gt;ServerにSSL証明書が必要.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;: HTTPできたRequestをHTTPSにupgradeする.

&lt;ul&gt;
&lt;li&gt;Enterprise only.&lt;/li&gt;
&lt;li&gt;ServerにSSL証明書が必要.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は &lt;code&gt;Flexible&lt;/code&gt; を選択.&lt;/p&gt;

&lt;h3 id=&#34;hsts:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;HSTS&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;HSTSと言うのは &lt;code&gt;HTTP Strict Transport Security&lt;/code&gt; の略で、
Web serverがWeb browserに対して、次回以降HTTPの代わりにHTTPSを使うように伝達する機能.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;次回以降&lt;/strong&gt;なので初回はHTTPでRequestし、その次からHTTPSを強制することができる.
(もちろん初回からHTTPSでRequestもできる.)&lt;/p&gt;

&lt;p&gt;初回から強制するために、BrowserがHSTSの設定のpreloadを行う機能もある.
(CloadFlareでもpreloadを有効にすることが可能.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;HSTSの設定は &lt;code&gt;SSL&lt;/code&gt; 同様に上のMenuの &lt;code&gt;Crypto&lt;/code&gt;&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/crypto.png&#34; alt=&#34;20160129/crypto.png&#34;&gt;


&lt;p&gt;から行う.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/hsts.png&#34; alt=&#34;20160129/hsts.png&#34;&gt;


&lt;h3 id=&#34;subdomain:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;Subdomain&lt;/h3&gt;

&lt;p&gt;Subdomainの設定は上のMenuの &lt;code&gt;DNS&lt;/code&gt;&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/dns.png&#34; alt=&#34;20160129/dns.png&#34;&gt;


&lt;p&gt;から行う.&lt;/p&gt;

&lt;p&gt;今回はSubdomainが &lt;em&gt;blog.rudolph-miller.com&lt;/em&gt; でGitHub PagesのDomainが &lt;em&gt;rudolph-miller.github.io&lt;/em&gt; なので、&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/dns_input.png&#34; alt=&#34;20160129/dns_input.png&#34;&gt;


&lt;p&gt;こんな感じに &lt;code&gt;CNAME&lt;/code&gt; を登録し、&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/dns_status.png&#34; alt=&#34;20160129/dns_status.png&#34;&gt;


&lt;p&gt;&lt;code&gt;Status&lt;/code&gt; を&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/not_penetrating.png&#34; alt=&#34;20160129/not_penetrating.png&#34;&gt;


&lt;p&gt;から&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/penetrating.png&#34; alt=&#34;20160129/penetrating.png&#34;&gt;


&lt;p&gt;にClickで変更すると完了.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;DNSの反映待ちはあったが、簡単にCustom domainなGitHub Pagesを簡単にSSL対応できた.&lt;/p&gt;

&lt;h1 id=&#34;see-also:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflarestatus.com/&#34;&gt;CloudFlare system status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/&#34;&gt;Configuring CloudFlare’s Universal SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&#34;&gt;Setting up a custom domain with GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Scroll to the top with Redux Router</title>
      <link>https://blog.rudolph-miller.com/2016/01/25/scroll-to-the-top-with-redux-router/</link>
      <pubDate>Mon, 25 Jan 2016 21:46:15 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/25/scroll-to-the-top-with-redux-router/</guid>
      <description>

&lt;p&gt;Redux RouterでLocationの変更時にScrollをtopに持っていく方法.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#scroll-position-after-transition-with-redux-router:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll position after transition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scroll-to-the-top-with-redux-router:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;scroll-position-after-transition:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll position after transition&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt; は &lt;a href=&#34;https://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの紹介&lt;/a&gt; で紹介した通り、React.jsでde facto standardとなっているRouting libraryの &lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt; の &lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;Redux Routerを実際にApplicationで使用していると &lt;code&gt;Link&lt;/code&gt; での遷移時にScrollが元の位置のままで困ったので、 &lt;code&gt;Link&lt;/code&gt; での遷移で &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; するよう実装した.&lt;/p&gt;

&lt;h1 id=&#34;scroll-to-the-top:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/h1&gt;

&lt;h2 id=&#34;example:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;とりあえずRedux Routerを使用したApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const Styles = {
  linkContainer: {
    marginTop: &#39;1000px&#39;
  }
}

class App extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

class Hoge extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;Hoge&amp;lt;/div&amp;gt;
        &amp;lt;div style={Styles.linkContainer}&amp;gt;
          &amp;lt;Link to=&amp;quot;/fuga&amp;quot;&amp;gt;
            To Fuga
          &amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Fuga extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;Fuga&amp;lt;/div&amp;gt;
        &amp;lt;div style={Styles.linkContainer}&amp;gt;
          &amp;lt;Link to=&amp;quot;/hoge&amp;quot;&amp;gt;
            To Hoge
          &amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect path=&amp;quot;/&amp;quot; to=&amp;quot;hoge&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;hoge&amp;quot; component={Hoge} /&amp;gt;
      &amp;lt;Route path=&amp;quot;fuga&amp;quot; component={Fuga} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const reducer = combineReducers({
  router: routerStateReducer
});

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160125/scroll_step1.gif&#34; alt=&#34;20160125/scroll_step1.gif&#34;&gt;


&lt;p&gt;上のGIFの通り、このままだと &lt;code&gt;Link&lt;/code&gt; での遷移時にScrollが元の位置のままだ.&lt;br /&gt;
本来なら、遷移したらScrollを最上部にもっていくべきだろう.&lt;/p&gt;

&lt;h2 id=&#34;scroll-to-the-top-1:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/h2&gt;

&lt;p&gt;Redux Routerでも数行でこれが実装できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@@ -66,7 +66,18 @@
const reducer = combineReducers({
   router: routerStateReducer
 });
 
-const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
+const history = createHistory();
+
+history.listen(location =&amp;gt; {
+  setTimeout(() =&amp;gt; {
+    if (location.action === &#39;POP&#39;) {
+      return;
+    }
+    window.scrollTo(0, 0);
+  });
+});
+
+const store = reduxReactRouter({routes, history})(createStore)(reducer);
 
 class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
         &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変更点は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reduxReactRouter&lt;/code&gt; に &lt;code&gt;createHistory&lt;/code&gt; ではなく、 &lt;code&gt;history&lt;/code&gt; として &lt;code&gt;createHistory()&lt;/code&gt; の返り値を渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt; に対して &lt;code&gt;location&lt;/code&gt; の変更のEventの &lt;code&gt;listen&lt;/code&gt; を行い、 &lt;code&gt;location.action&lt;/code&gt; が &lt;code&gt;&#39;POP&#39;&lt;/code&gt; 以外の時に &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; を実行する.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だけ.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160125/scroll_step2.gif&#34; alt=&#34;20160125/scroll_step2.gif&#34;&gt;


&lt;h2 id=&#34;pushstate:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;pushState&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/&#34;&gt;pushState in Redux Router&lt;/a&gt; で紹介した通り、
Redux Routerにも &lt;code&gt;pushState&lt;/code&gt; のAPIがあり &lt;code&gt;pushState&lt;/code&gt; ででもPageの遷移ができるが、
この改修により &lt;code&gt;pushState&lt;/code&gt; での遷移でもScrollを最上部に持っていくことができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Add List-balloon to Twitter share button</title>
      <link>https://blog.rudolph-miller.com/2016/01/25/add-list-balloon-to-twitter-share-button/</link>
      <pubDate>Mon, 25 Jan 2016 00:01:11 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/25/add-list-balloon-to-twitter-share-button/</guid>
      <description>

&lt;p&gt;Twitterのshare buttonにlist balloonを追加する.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#twitter-share-button:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Twitter share button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-list-balloon:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Add List-balloon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;twitter-share-button:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Twitter share button&lt;/h1&gt;

&lt;p&gt;Blogなどに埋め込まれているTwitterのshareボタンだが、以前は上にBalloonでTweet数が表示されていた.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/previous_twitter.png&#34; alt=&#34;20160124/previous_twitter.png&#34;&gt;


&lt;p&gt;それがTwitter内部でのCassandraの廃止に付随して、昨年末なくなった.&lt;br /&gt;
(参照: &lt;a href=&#34;https://blog.twitter.com/ja/2015/buttons&#34;&gt;持続的なプラットフォームのための難しい決断&lt;/a&gt;)&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/new_twitter.png&#34; alt=&#34;20160124/new_twitter.png&#34;&gt;


&lt;p&gt;Twitter、 はてなブックマーク、Facebook、Google+のshareボタンがBalloon付きでならんでいたのだが、TwitterのshareボタンだけがBalloonが無くなり、統一感が失われた.
違和感を感じつつも放置していたのだが、最近あるBlogでTwittenのshareボタンの上にBalloonで &lt;code&gt;list&lt;/code&gt; と表示し、
&lt;em&gt;&lt;a href=&#34;https://twitter.com/search&#34;&gt;https://twitter.com/search&lt;/a&gt;&lt;/em&gt; のその記事のPermalinkの検索結果へのLinkとなるようにしているのを見かけたので実装してみた.&lt;/p&gt;

&lt;h1 id=&#34;add-list-balloon:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Add List-balloon&lt;/h1&gt;

&lt;p&gt;まず従来のshareボタンだが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  window.twttr=(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],t=window.twttr||{};if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src=&amp;quot;https://platform.twitter.com/widgets.js&amp;quot;;fjs.parentNode.insertBefore(js,fjs);t._e=[];t.ready=function(f){t._e.push(f);};return t;}(document,&amp;quot;script&amp;quot;,&amp;quot;twitter-wjs&amp;quot;));
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を埋め込む.&lt;/p&gt;

&lt;p&gt;以前は一つ目のHTML codeの &lt;code&gt;a&lt;/code&gt; tagの &lt;code&gt;data-conut=&amp;quot;vertical&amp;quot;&lt;/code&gt; によりTweet数のBalloon付きでshareボタンが表示されていたが、今はこのように表示される.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/new_twitter.png&#34; alt=&#34;20160124/new_twitter.png&#34;&gt;


&lt;p&gt;とりあえず、Balloonを表示する.&lt;br /&gt;
BalloonはCSSで一つの &lt;code&gt;span&lt;/code&gt; とその &lt;code&gt;::before&lt;/code&gt; と &lt;code&gt;::after&lt;/code&gt; を使って描けるので、とりあえず一つ &lt;code&gt;span&lt;/code&gt; を追加する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
+  &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
   &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/step1.png&#34; alt=&#34;20160124/step1.png&#34;&gt;


&lt;p&gt;これにBalloonを描くようCSSを当てる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.balloon-bottom {
  position: relative;
  display: inline-block;
  padding: 0 15px;
  width: 75px;
  min-width: 75px;
  height: 33px;
  line-height: 33px;
  color: #000;
  text-align: center;
  background-color: #fff;
  border: 1px solid #B0C1D8;
  border-radius: 3px;
  z-index: 0;
}

.balloon-bottom:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  bottom: -4px;
  left: 50%;
  margin-left: -4px;
  width: 0px;
  height: 0px;
  border-style: solid;
  border-width: 5px 4px 0 4px;
  border-color: #fff transparent transparent transparent;
  z-index: 0;
}

.balloon-bottom:after {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  bottom: -6px;
  left: 50%;
  margin-left: -5px;
  width: 0px;
  height: 0px;
  border-style: solid;
  border-width: 6px 5px 0 5px;
  border-color: #B0C1D8 transparent transparent transparent;
  z-index: -1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/step2.png&#34; alt=&#34;20160124/step2.png&#34;&gt;


&lt;p&gt;(下の吹き出しの大きさの変更は &lt;code&gt;:before&lt;/code&gt; と &lt;code&gt;:after&lt;/code&gt; の &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;margin-left&lt;/code&gt;, &lt;code&gt;border-width&lt;/code&gt; をsynchronouslyに変更する.)&lt;/p&gt;

&lt;p&gt;次はこれを縦に並べる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
-  &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
-  &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
+  &amp;lt;ul class=&amp;quot;twitter-share-button-with-balloon&amp;quot;&amp;gt;
+    &amp;lt;li&amp;gt;
+      &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
+    &amp;lt;/li&amp;gt;
+    &amp;lt;li&amp;gt;
+      &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
+    &amp;lt;/li&amp;gt;
+  &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.twitter-share-button-with-balloon {
  list-style: none;
}

.twitter-share-button-with-balloon &amp;gt; :first-child + * {
  margin-top: 7px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/step3.png&#34; alt=&#34;20160124/step3.png&#34;&gt;


&lt;p&gt;見た目はこれで完成.&lt;br /&gt;
あとはLinkだが、このBlogは&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を使っているので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
   &amp;lt;ul class=&amp;quot;twitter-share-button-with-balloon&amp;quot;&amp;gt;
     &amp;lt;li&amp;gt;
+    &amp;lt;a href=&amp;quot;https://twitter.com/search?q={{ .Permalink }}&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;
       &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
+    &amp;lt;/a&amp;gt;
     &amp;lt;/li&amp;gt;
     &amp;lt;li&amp;gt;
       &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
     &amp;lt;/li&amp;gt;
   &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;a&lt;/code&gt; tagで囲えば完成.&lt;/p&gt;

&lt;h1 id=&#34;see-also:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/ja/2015/buttons&#34;&gt;持続的なプラットフォームのための難しい決断&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Import Query Result to BigQuery</title>
      <link>https://blog.rudolph-miller.com/2016/01/15/import-query-result-to-bigquery/</link>
      <pubDate>Fri, 15 Jan 2016 18:45:16 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/15/import-query-result-to-bigquery/</guid>
      <description>

&lt;p&gt;特定DirectoryにあるSQL fileを実行して、結果をBigQueryに入れるScriptを書いた.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#background:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-query-result-to-bigquery:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Import Query Result to BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;background:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://kaizenplatform.com/ja/&#34;&gt;Kaizen Platform&lt;/a&gt;では&lt;a href=&#34;https://cloud.google.com/bigquery/?hl=ja&#34;&gt;BigQuery&lt;/a&gt;と&lt;a href=&#34;http://redash.io/&#34;&gt;re:dash&lt;/a&gt;を使ってProjectの&lt;strong&gt;定量KPIの可視化&lt;/strong&gt;をしていて、定期的に振り返りの機会を設けている.&lt;/p&gt;

&lt;p&gt;これを実施・運用する上で困ったのが、UserのPVなどをplotする際に社内のUserかどうかがBigQueryに格納しているDataだけでは判別がつかないことだった.&lt;br /&gt;
(社内UserのIDリストを &lt;code&gt;user_id NOT IN (...)&lt;/code&gt; に貼り付けるという&lt;strong&gt;真心こもったOperation&lt;/strong&gt;が行われていた.)&lt;/p&gt;

&lt;p&gt;Kaizen Platformでは数ヶ月に一度 &lt;code&gt;Kaizen Week&lt;/code&gt; の名で、日頃のプロジェクトを一時停止して、積みタスクや、リファクタリング、新しいツールの試験・導入などの時間を確保しようという試みがあり、ちょうど今週がその &lt;code&gt;Kaizen Week&lt;/code&gt; だったので、ここを改善しようと思った.&lt;/p&gt;

&lt;p&gt;解決策としては2通り考えられる.
一つがLogにUserの属性を埋め込む方法、もう一つはBigQuery外部のDatabase (今回は社内のMySQL) からUserの属性を参照する方法だが、今回は二つ目の方法をとることにした.&lt;/p&gt;

&lt;p&gt;外部DatabaseをBigQueryから参照する方法だが、Query Engineでうまい具合にJOINする方法 (&lt;a href=&#34;https://prestodb.io/&#34;&gt;Presto&lt;/a&gt;) と、外部DatabaseのDataをBigQueryにimportする方法が考えられた. 一つ目の方法はこれぐらい軽いことをやりるのにわざわさ導入するのはなって気がした (あくまで気がした) ので、外部DatabaseのDataをBigQueryにimportすることにした.&lt;/p&gt;

&lt;p&gt;今回の場合、とりあえずUserのTableをうまい具合にBigQueryにimportするだけで良かったが、今後もカジュアルに外部DatabaseのDataをBigQueryにimportしたいという要望があったので、&lt;strong&gt;特定の場所にSQL fileを配置するだけで、それらを実行した結果をBigQueryにimportできる&lt;/strong&gt;ようにした.&lt;/p&gt;

&lt;h1 id=&#34;import-query-result-to-bigquery:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Import Query Result to BigQuery&lt;/h1&gt;

&lt;h2 id=&#34;how:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;How&lt;/h2&gt;

&lt;p&gt;始めはGoでScriptを書いていたが、ふとEmbulkが使えないかと思って調べてみると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MySQLのInput pluginとBigQueryのOutput pluginは当然ある.&lt;/li&gt;
&lt;li&gt;MySQLのInput pluginで任意のQueryが実行できる.&lt;/li&gt;
&lt;li&gt;Queryの実行結果に対応するSchemaからBigQueryのSchemaを生成できると良かったが (別でPlugin書けばできそう) 、今回はSQL fileと別に &lt;code&gt;.schema.json&lt;/code&gt; でBigQueryのSchemaを用意することにする.&lt;/li&gt;
&lt;li&gt;Configulation fileのExtensionを &lt;code&gt;liquid&lt;/code&gt; にすると&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Liquid Template Engine&lt;/a&gt;が使用できる.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; によって外部から値を差し込むことが可能.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だったので、Scriptの中で特定の場所にあるSQL fileをとってきて、その情報で &lt;code&gt;env&lt;/code&gt; を差し替えることにより、QueryそれぞれでConfigulation fileを作成する必要がなく、Embulkで上の目標が達成できそうだったので、Embulkを採用することにした.&lt;/p&gt;

&lt;h2 id=&#34;do-it:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Do it&lt;/h2&gt;

&lt;p&gt;Embulkはinstall済みだとして、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ embulk gem install embulk-input-mysql
$ embulk gem install embulk-output-bigquery
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、今回必要なPluginsをinstallする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;in:
  type: mysql
  host: {{ env.mysql_host }}
  user: {{ env.mysql_user }}
  {% if env.mysql_password %}
  password: {{ env.mysql_password }}
  {% endif %}
  database:  {{ env.mysql_database }}
  query: {{ env.query }}
out:
  type: bigquery
  file_ext: csv
  auth_method: private_key
  service_account_email: {{ env.service_account_email }}
  p12_keyfile: {{ env.p12_keyfile }}
  path_prefix: /tmp/import_query_result_to_bq/
  file_ext: csv
  delete_from_local_when_job_end: 1
  project: your_project
  dataset: {{ env.dataset }}
  table: {{ env.table }}_%Y%m%d
  source_format: CSV
  formatter:
    type: csv
    header_line: false
  schema_file: {{ env.schema_file }}
  auto_create_table: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;Liquid Template Engine&lt;/code&gt; を使用し &lt;code&gt;env&lt;/code&gt; で設定可能な &lt;code&gt;config.yml.liquid&lt;/code&gt; を用意し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

QUERY_DIR=query
DATASET=tmp

export service_account_email=example@developer.gserviceaccount.com
export p12_keyfile=/path/to/p12_keyfile.p12

export mysql_host=localhost
export mysql_user=root
export mysql_password=password
export mysql_database=your_database
export dataset=$DATASET

for file in $QUERY_DIR/*.sql; do
  export query=`cat $file`
  filename=${file##*/}
  basename=${filename%.*}
  dir=$(cd $(dirname $file) &amp;amp;&amp;amp; pwd)
  export table=$basename
  export schema_file=$dir/$basename.schema.json
  embulk run config.yml.liquid
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなScriptを &lt;code&gt;import_query_result_to_bigquery&lt;/code&gt; として用意し実行権限をつけ、 &lt;code&gt;QUERY_DIR&lt;/code&gt; に設定したDirectoryに、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT id FROM users WHENE is_admin = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;admin_users.sql&lt;/code&gt; として、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  { &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;STRING&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;admin_users.schema.json&lt;/code&gt; として配置し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./import_query_result_to_bigquery
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると、 &lt;code&gt;admin_users.sql&lt;/code&gt; のQueryの実行結果を &lt;code&gt;DATASET&lt;/code&gt; で設定したBigQueryのDatasetにTable名 &lt;code&gt;admin_users_20160114&lt;/code&gt; (PrefixはSQL file名で、Suffixは年月日) としてimportできる.&lt;/p&gt;

&lt;h2 id=&#34;operation:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Operation&lt;/h2&gt;

&lt;h3 id=&#34;query-files:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Query files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;*.sql&lt;/code&gt; と &lt;code&gt;*.schema.json&lt;/code&gt; は専用のGitHubのRepositioryを作成して、そこに集約し、Scriptの実行前に &lt;code&gt;QUERY_DIR&lt;/code&gt; で指定したDirectoryに展開する.&lt;/p&gt;

&lt;p&gt;これによって、新しくQueryを追加する際に、&lt;strong&gt;GitHub上で完結&lt;/strong&gt;できる.&lt;/p&gt;

&lt;h3 id=&#34;query-in-bigquery:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Query in BigQuery&lt;/h3&gt;

&lt;p&gt;cronなどでDailyのJobとして実行するとして、Table名のSuffixとして &lt;code&gt;_%Y%m%d&lt;/code&gt; がついているので、BigQuery上では &lt;code&gt;TABLE_DATE_RANGE&lt;/code&gt; を使用して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM TABLE_DATE_RANGE(tmp.admin_users_, DATE_ADD(CURRENT_TIMESTAMP(), -1, &#39;DAY&#39;), CURRENT_TIMESTAMP());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにすると、当日のTableを対象としてQueryを実行できる.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;EmbulkのPlugin機構と &lt;code&gt;Liquid Template Engine&lt;/code&gt; のおかげで簡単なScriptで業務が改善した.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;see-also:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk&#34;&gt;Embulk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk-input-jdbc/tree/master/embulk-input-mysql&#34;&gt;embulk-input-mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk-output-bigquery&#34;&gt;embulk-output-bigquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Liquid Template Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Theme of Material-UI</title>
      <link>https://blog.rudolph-miller.com/2016/01/11/theme-of-material-ui/</link>
      <pubDate>Mon, 11 Jan 2016 21:15:39 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/11/theme-of-material-ui/</guid>
      <description>

&lt;p&gt;Material-UIのThemeの使い方を紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#material-ui:2974f27f4339877b24e592c5128f86c3&#34;&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#theme:2974f27f4339877b24e592c5128f86c3&#34;&gt;Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:2974f27f4339877b24e592c5128f86c3&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;material-ui:2974f27f4339877b24e592c5128f86c3&#34;&gt;Material-UI&lt;/h1&gt;

&lt;p&gt;Material-UIとMaterial Designについては&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/&#34;&gt;前回&lt;/a&gt;の記事を参照.&lt;/p&gt;

&lt;h1 id=&#34;theme:2974f27f4339877b24e592c5128f86c3&#34;&gt;Theme&lt;/h1&gt;

&lt;p&gt;Material Designでは色をPrimary color paletteとSecondary color (Accent color) paletteに限定することにより、
直感的で統一感のあるDesignを作り出している.&lt;/p&gt;

&lt;p&gt;Material-UIではこれをThemeとして管理する.&lt;/p&gt;

&lt;h2 id=&#34;color:2974f27f4339877b24e592c5128f86c3&#34;&gt;Color&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/&#34;&gt;前回&lt;/a&gt;の記事の&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/#example:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Example&lt;/a&gt;にThemeを適用し、Colorを変更する.&lt;/p&gt;

&lt;p&gt;Colorの指定は&lt;a href=&#34;https://www.google.com/design/spec/style/color.html#color-color-palette&#34;&gt;Color palette&lt;/a&gt;とMaterial-UIの&lt;a href=&#34;http://www.material-ui.com/#/customization/colors&#34;&gt;customization/colors&lt;/a&gt;を参照.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import ThemeManager from &#39;material-ui/lib/styles/theme-manager&#39;;
import ThemeDecorator from &#39;material-ui/lib/styles/theme-decorator&#39;;
import Colors from &#39;material-ui/lib/styles/colors&#39;;
import ColorManipulator from &#39;material-ui/lib/utils/color-manipulator&#39;;
import LightRawTheme from &#39;material-ui/lib/styles/raw-themes/light-raw-theme&#39;;

export default ThemeManager.modifyRawThemePalette(
  ThemeManager.getMuiTheme(LightRawTheme),
  {
    primary1Color: Colors.cyan500,
    primary2Color: Colors.cyan700,
    primary3Color: Colors.lightBlack,
    accent1Color: Colors.green400,
    accent2Color: Colors.grey100,
    accent3Color: Colors.grey500,
    textColor: Colors.blueGrey800,
    alternateTextColor: Colors.white,
    canvasColor: Colors.white,
    borderColor: Colors.grey300,
    disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3),
    pickerHeaderColor: Colors.cyan500
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;theme.js&lt;/code&gt; に書き込み、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import { render } from &#39;react-dom&#39;;
 import React, { Component, PropTypes } from &#39;react&#39;;
 import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
 injectTapEventPlugin();
 
 import {
   Avatar, Card, CardActions,
   CardHeader, CardMedia, CardTitle,
-  RaisedButton, FlatButton, CardText
+  RaisedButton, FlatButton, CardText,
+  ThemeWrapper
 } from &#39;material-ui&#39;;
+import ThemeDecorator from &#39;material-ui/lib/styles/theme-decorator&#39;;

+import Theme from &#39;./theme&#39;;
 
+@ThemeDecorator(Theme)
 class App extends Component {
 ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@ThemeDecorator&lt;/code&gt; で適用する.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160111/theme-applied.png&#34; alt=&#34;/20160111/theme-applied.png&#34;&gt;


&lt;p&gt;簡単にColorなどを変更できるが、Themeとして管理することにより、統一感が崩れない.&lt;/p&gt;

&lt;h2 id=&#34;font-family:2974f27f4339877b24e592c5128f86c3&#34;&gt;Font Family&lt;/h2&gt;

&lt;p&gt;Material-UIのdefaultの &lt;code&gt;font-family&lt;/code&gt; は &lt;code&gt;&#39;Roboto&#39;, sans-serif&lt;/code&gt; だが、日本語などの &lt;code&gt;Roboto&lt;/code&gt; でカバーされていない言語の場合 &lt;code&gt;Noto&lt;/code&gt; を使用したい.&lt;br /&gt;
(Material Designの&lt;a href=&#34;https://www.google.com/design/spec/style/typography.html#typography-typeface&#34;&gt;Typography&lt;/a&gt;参考.)&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;Noto Sans JP&lt;/code&gt; を使用するため、あらかじめHTMLに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&#39;http://fonts.googleapis.com/earlyaccess/notosansjp.css&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を差し込む.&lt;/p&gt;

&lt;p&gt;あとは上記の &lt;code&gt;theme.js&lt;/code&gt; で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; export default ThemeManager.modifyRawThemePalette(
-  ThemeManager.getMuiTheme(LightRawTheme),
+  ThemeManager.modifyRawThemeFontFamily(
+    ThemeManager.getMuiTheme(LightRawTheme),
+    &amp;quot;&#39;Roboto&#39;, &#39;Noto Sans JP&#39;, sans-serif&amp;quot;
+  ),
   {
     primary1Color: Colors.cyan500,
     primary2Color: Colors.cyan700,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;ThemeManager.modifyRawThemeFontFamily&lt;/code&gt; で &lt;code&gt;font-family&lt;/code&gt; を変更する.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160111/font-family-not-changed.png&#34; alt=&#34;/20160111/font-family-not-changed.png&#34;&gt;


&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160111/font-family-changed.png&#34; alt=&#34;/20160111/font-family-changed.png&#34;&gt;


&lt;h1 id=&#34;see-also:2974f27f4339877b24e592c5128f86c3&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/&#34;&gt;Material-UIの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/style/color.html#color-color-palette&#34;&gt;Color palette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.material-ui.com/#/customization/colors&#34;&gt;Material-UI customization/colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/style/typography.html#typography-typeface&#34;&gt;Typography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Material-UI</title>
      <link>https://blog.rudolph-miller.com/2016/01/04/material-ui/</link>
      <pubDate>Mon, 04 Jan 2016 20:54:36 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/04/material-ui/</guid>
      <description>

&lt;p&gt;Material-UIの紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#material-design:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#material-ui:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:685cc0a50b9186931af118d17b9d18fd&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;material-design:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material Design&lt;/h1&gt;

&lt;p&gt;Material DesignはGoogleが開発しているDesign Guidelineで&lt;strong&gt;一貫性と実世界と同じ挙動でユーザーの負担を軽くする&lt;/strong&gt;ことが目標で、 &lt;strong&gt;マテリアル（素材）のある世界&lt;/strong&gt; が特徴.&lt;/p&gt;

&lt;p&gt;あらゆるdeviceを対象とした&lt;strong&gt;一貫性&lt;/strong&gt;と&lt;strong&gt;周りの世界と連続的で、同じ物理的性質や同じ動き&lt;/strong&gt;で、ユーザーがあらゆるdeviceであらゆるApplicationを、それぞれでの操作を学習する必要無く、自然に使えるようになる.&lt;/p&gt;

&lt;h1 id=&#34;material-ui:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material-UI&lt;/h1&gt;

&lt;h2 id=&#34;about:685cc0a50b9186931af118d17b9d18fd&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/callemall/material-ui&#34;&gt;Material-UI&lt;/a&gt;はMaterial DesignのReact.js実装.&lt;/p&gt;

&lt;p&gt;ComponentとThemeで簡単にMaterial Designを試すことができる.&lt;br /&gt;
(Themeについては今回は触れず、&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/11/theme-of-material-ui/&#34;&gt;Theme of Material-ui&lt;/a&gt;で紹介.)&lt;/p&gt;

&lt;h2 id=&#34;install:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save material-ui
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;material-ui&lt;/code&gt; をinstallする.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zilverline/react-tap-event-plugin&#34;&gt;React-Tap-Event-Plugin&lt;/a&gt;を使用して、Tap eventをlistenしているので、これを有効にしないと一部のComponentが正常に動作しない.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save react-tap-event-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でinstallし、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
injectTapEventPlugin();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をApplicationで実行して有効化する.&lt;/p&gt;

&lt;p&gt;また、Material-UIは &lt;code&gt;Roboto&lt;/code&gt; フォントを使用しているので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&#39;http://fonts.googleapis.com/css?family=Roboto&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をHTMLに差し込むなどして、 &lt;code&gt;Roboto&lt;/code&gt; フォントを有効にする.&lt;/p&gt;

&lt;h2 id=&#34;example:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { render } from &#39;react-dom&#39;;
import React, { Component, PropTypes } from &#39;react&#39;;
import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
injectTapEventPlugin();

import {
  Avatar, Card, CardActions,
  CardHeader, CardMedia, CardTitle,
  RaisedButton, FlatButton, CardText
} from &#39;material-ui&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;Card&amp;gt;
        &amp;lt;CardHeader
          title=&amp;quot;Title&amp;quot;
          subtitle=&amp;quot;Subtitle&amp;quot;
          avatar={&amp;lt;Avatar style={{color: &#39;red&#39;}}&amp;gt;A&amp;lt;/Avatar&amp;gt;}/&amp;gt;
        &amp;lt;CardHeader
          title=&amp;quot;Demo Url Based Avatar&amp;quot;
          subtitle=&amp;quot;Subtitle&amp;quot;
          avatar=&amp;quot;http://lorempixel.com/100/100/nature/&amp;quot;/&amp;gt;
        &amp;lt;CardMedia overlay={&amp;lt;CardTitle title=&amp;quot;Title&amp;quot; subtitle=&amp;quot;Subtitle&amp;quot;/&amp;gt;}&amp;gt;
          &amp;lt;img src=&amp;quot;http://lorempixel.com/600/337/nature/&amp;quot;/&amp;gt;
        &amp;lt;/CardMedia&amp;gt;
        &amp;lt;CardTitle title=&amp;quot;Title&amp;quot; subtitle=&amp;quot;Subtitle&amp;quot;/&amp;gt;
        &amp;lt;CardActions&amp;gt;
          &amp;lt;RaisedButton primary={true} label=&amp;quot;Action1&amp;quot;/&amp;gt;
          &amp;lt;FlatButton label=&amp;quot;Action2&amp;quot;/&amp;gt;
        &amp;lt;/CardActions&amp;gt;
        &amp;lt;CardText&amp;gt;
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          Donec mattis pretium massa. Aliquam erat volutpat. Nulla facilisi.
          Donec vulputate interdum sollicitudin. Nunc lacinia auctor quam sed pellentesque.
          Aliquam dui mauris, mattis quis lacus id, pellentesque lobortis odio.
        &amp;lt;/CardText&amp;gt;
      &amp;lt;/Card&amp;gt;
    );
  }
}

render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160104/example.png&#34; alt=&#34;20160104/example.png&#34;&gt;


&lt;p&gt;こんな感じにComponentに &lt;code&gt;props&lt;/code&gt; を渡すだけ.&lt;/p&gt;

&lt;h1 id=&#34;see-also:685cc0a50b9186931af118d17b9d18fd&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/callemall/material-ui&#34;&gt;Material UI - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.material-ui.com/#/home&#34;&gt;Material UI - Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zilverline/react-tap-event-plugin&#34;&gt;react-tap-event-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Materail Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>pushState in Redux Router</title>
      <link>https://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/</link>
      <pubDate>Fri, 25 Dec 2015 12:34:52 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; の使い方と、 React Reduxの&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; について、
&lt;code&gt;connect&lt;/code&gt; のSource codeを追いながら解説.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の25日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;は&lt;a href=&#34;htpp://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;前回&lt;/a&gt;で紹介した通り、
React.jsでde facto standardとなっているRouting libraryの&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;h1 id=&#34;pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; はReact RouterでURLを遷移するAPIで、元はBrowserのHistory API.
Redux Routeの &lt;code&gt;pushState&lt;/code&gt; はこれをwrapしたもの.&lt;/p&gt;

&lt;h1 id=&#34;usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/redux-router&#34;&gt;前回&lt;/a&gt;で使ったApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  router: routerStateReducer,
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect(state =&amp;gt; {
  return {
    location: state.router.location
  }
})
class CounterButton extends Component {
  render() {
    const { dispatch } = this.props;

    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.location.pathname === &#39;/incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151225/without-push-state.gif&#34; alt=&#34;/20151225/without-push-state.gif&#34;&gt;


&lt;p&gt;これに &lt;code&gt;pushState&lt;/code&gt; で、 &lt;code&gt;/decr&lt;/code&gt; を1秒後に &lt;code&gt;/incr&lt;/code&gt; にredirectするという無駄な機能をつける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter, pushState } from &#39;redux-router&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+@connect(null, { pushState })
class Decrement extends Component {
+  componentDidMount() {
+    const { pushState } = this.props;
+
+    setTimeout(() =&amp;gt; {
+      pushState(null, &#39;/incr&#39;);
+    }, 1000)
+  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151225/with-push-state.gif&#34; alt=&#34;/20151225/with-push-state.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; をRedux Routerから &lt;code&gt;import&lt;/code&gt; し、 &lt;code&gt;pushState&lt;/code&gt; を &lt;code&gt;connect&lt;/code&gt; の第二引数に &lt;code&gt;{ pushState: pushState }&lt;/code&gt; の形で渡し、
&lt;code&gt;componentDidMount&lt;/code&gt; の中で &lt;code&gt;setTimeout&lt;/code&gt; を使って &lt;code&gt;this.props.pushState&lt;/code&gt; を呼んでいる.&lt;/p&gt;

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; は &lt;a href=&#34;https://github.com/acdlite/redux-router/blob/master/src/actionCreators.js#L56&#34;&gt;ここ&lt;/a&gt;で定義されていて、どうもAction creatorのようだ.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の第二引数って何だろう.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rackt/redux/&#34;&gt;Redux&lt;/a&gt;の&lt;a href=&#34;http://rackt.org/redux/index.html&#34;&gt;Tutorial&lt;/a&gt;の &lt;code&gt;connect&lt;/code&gt; の&lt;a href=&#34;http://rackt.org/redux/docs/basics/UsageWithReact.html&#34;&gt;解説&lt;/a&gt;にこう書いてある.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases you will only pass the first argument to connect(), which is a function we call a selector.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ほとんどの場合、第一引数しか使わないらしい.&lt;/p&gt;

&lt;p&gt;仕方ないので&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24&#34;&gt;Source code&lt;/a&gt;を読むと、 &lt;code&gt;mapDispatchToProps&lt;/code&gt; と呼ぶものらしい.&lt;/p&gt;

&lt;h1 id=&#34;mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h1&gt;

&lt;p&gt;もう少し &lt;code&gt;mapDispatchToProps&lt;/code&gt; を追ってみる.&lt;/p&gt;

&lt;h2 id=&#34;connect:5ffab360503358b5e43ebafcc74ab758&#34;&gt;connect&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24-L275&#34;&gt;ここ&lt;/a&gt;だが、簡単に言うと、4つの引数をとって、1つの引数をとる関数を返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default function connect(mapStateToProps, mapDispatchToProps, mergeProps, options = {}) {
  return function wrapWithConnect(WrappedComponent) {
    class Connect extends Component {
      render() {
        return createElement(WrappedComponent, this.mergeProps);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-1:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; なら &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされて、 &lt;code&gt;Object&lt;/code&gt; でないならそのままで、 &lt;code&gt;finalMapDispatchToProps&lt;/code&gt; に入る.
&lt;code&gt;mapDispatchToProps&lt;/code&gt; として何も渡さなかった場合は &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; がdefaultで入るようになっている. &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて、 &lt;code&gt;dispatch&lt;/code&gt; を受け取り &lt;code&gt;{ dispatch: dispatch }&lt;/code&gt; として返している.&lt;/p&gt;

&lt;h2 id=&#34;wrapactioncreators:5ffab360503358b5e43ebafcc74ab758&#34;&gt;wrapActionCreators&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt; が &lt;code&gt;Object&lt;/code&gt; だったときは &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされるが、 &lt;code&gt;wrapActionCreators&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/utils/wrapActionCreators.js#L3&#34;&gt;ここ&lt;/a&gt;にあり、 Reduxの &lt;code&gt;bindActionCreators&lt;/code&gt; を呼んでいる.
&lt;code&gt;bindActionCreators&lt;/code&gt; は引数が &lt;code&gt;Object&lt;/code&gt; の時は、その &lt;code&gt;values&lt;/code&gt; にたいして &lt;code&gt;bindActionCreator&lt;/code&gt; を &lt;code&gt;map&lt;/code&gt; している. &lt;code&gt;bindActionCreator&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function bindActionCreator(actionCreator, dispatch) {
  return (...args) =&amp;gt; dispatch(actionCreator(...args));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;actionCreator&lt;/code&gt;を与えられた引数で呼んで、 &lt;code&gt;dispatch&lt;/code&gt; する関数を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMapDispatchToProps&lt;/code&gt; は &lt;code&gt;computeDispatchProps&lt;/code&gt; の中で &lt;code&gt;dispatch&lt;/code&gt; を引数として呼ばれており、その返り値が &lt;code&gt;Connect#updateDispatchPropsIfNeeded&lt;/code&gt; の中で &lt;code&gt;this.dispatchProps&lt;/code&gt; に入る. この &lt;code&gt;this.dispatchProps&lt;/code&gt; は &lt;code&gt;Connect#updateMergedProps&lt;/code&gt; で &lt;code&gt;computeMergedProps&lt;/code&gt; を通して &lt;code&gt;this.mergedProps&lt;/code&gt; に入る.&lt;/p&gt;

&lt;h2 id=&#34;computemergedprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;computeMergedProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;computeMergedProps&lt;/code&gt; は &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、 &lt;code&gt;finalMergeProps&lt;/code&gt; にそれらを渡し、その返り値を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmergeprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMergeProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMergeProps&lt;/code&gt; は &lt;code&gt;connect&lt;/code&gt; の第三引数である &lt;code&gt;mergeProps&lt;/code&gt; が入っている. &lt;code&gt;connect&lt;/code&gt; に第三引数が指定されていない場合は &lt;code&gt;defaultMergeProps&lt;/code&gt; が入り、その定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMergeProps = (stateProps, dispatchProps, parentProps) =&amp;gt; ({
  ...parentProps,
  ...stateProps,
  ...dispatchProps
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、 &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、それらをexpandしてまとめて返している.
&lt;code&gt;Connect#updateMergedProps&lt;/code&gt; でこれが &lt;code&gt;this.mergedProps&lt;/code&gt; に入り、最終的に &lt;code&gt;connect&lt;/code&gt; の返す関数の引数として渡される &lt;code&gt;WrappedComponent&lt;/code&gt; に &lt;code&gt;createElement&lt;/code&gt; で渡される.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(WrappedComponent, this.mergedProps); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-again:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps again&lt;/h2&gt;

&lt;p&gt;結局 &lt;code&gt;mapDispatchToProps&lt;/code&gt; は何だったかと言うと、 &lt;code&gt;dispatch&lt;/code&gt; を &lt;code&gt;createElement&lt;/code&gt; にどのように渡すかを定義する引数だった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;@connect(null, { pushState })
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(Decrement, { pushState: (...args) =&amp;gt; { dispatch(pushState(..args)); } });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となって、 &lt;code&gt;class Decrement&lt;/code&gt; の中で &lt;code&gt;this.props.pushState&lt;/code&gt; が使えるようになる.&lt;/p&gt;

&lt;p&gt;さらに &lt;code&gt;mapDispatchToProps&lt;/code&gt; のdefaultが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;であったように、 &lt;code&gt;dispatch&lt;/code&gt; 自体もmappingしないと &lt;code&gt;this.props.dispatch&lt;/code&gt; は使えないので &lt;code&gt;this.props.dispatch&lt;/code&gt; が必要な際は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;functiton mapDispatchToProps(dispatch) {
  return {
    dispatch,
    pushState: bindActionCreators(pushState, dispatch)
  };
}
@connect(null, mapDispatchToProps)
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、 &lt;code&gt;dispatch&lt;/code&gt; もmappingするような関数 ( &lt;code&gt;mapDispatchToProps&lt;/code&gt; ) を作り、 &lt;code&gt;connect&lt;/code&gt; の第二引数として渡す.&lt;/p&gt;

&lt;p&gt;このように &lt;code&gt;dispatch&lt;/code&gt; を内部で呼び出すAPI作る際は、&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; を経由して、 &lt;code&gt;this.props&lt;/code&gt; に組み込まれるよう作る.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Router</title>
      <link>https://blog.rudolph-miller.com/2015/12/23/redux-router/</link>
      <pubDate>Wed, 23 Dec 2015 00:01:34 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/23/redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの紹介.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の23日目の記事.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;でRedux Routerの記事を見かけた気がするが、他所は気にしない.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h1&gt;

&lt;h2 id=&#34;about:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;はReact.jsでde facto standardとなっているRouting libraryの
&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;React RouterのRedux bindingsはReact RounterもReduxも抱えているOrganizationの&lt;a href=&#34;https://github.com/rackt&#34;&gt;rackt&lt;/a&gt;が作っている
&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;もあるが、Redux Routerの方が現時点でGitHubのStar数は多い.
(名前の通り、redux-simple-routerの方がよりsimpleで、Redux Routerはfatでcomplexだが機能は多い.)&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151222/rackt.gif&#34; alt=&#34;/20151222/rackt.gif&#34;&gt;


&lt;p&gt;これは&lt;a href=&#34;http://rackt.org/&#34;&gt;rackt.org&lt;/a&gt;. サイトではもっと綺麗にうねうねしてる.&lt;/p&gt;

&lt;h2 id=&#34;why:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;ReduxはStateの管理を容易に (一様に) するが、単体でReact Routerを使用すると、
Application上の重要なStateであるURLがReduxでの管理からはずれてしまう.&lt;br /&gt;
Redux RouterによりURLのStateもReduxで管理できる.&lt;/p&gt;

&lt;h2 id=&#34;usage:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;とりあえずReduxでApplicationを作って、そこにReact Routerを導入、最後にRedux Routerを導入する手順で紹介する.&lt;/p&gt;

&lt;h3 id=&#34;redux:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { dispatch, counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(incrCounter()); }}&amp;gt;
          INCREMENT
        &amp;lt;/button&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(decrCounter()); }}&amp;gt;
          DECREMENT
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;App /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151222/initial-impl.gif&#34; alt=&#34;/20151222/initial-impl.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;@connect&lt;/code&gt; して &lt;code&gt;state.counter&lt;/code&gt; を表示し、その &lt;code&gt;state.counter&lt;/code&gt; を増減させるボタンがあるだけのApplicationで、とくに解説することはない.&lt;/p&gt;

&lt;h3 id=&#34;react-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;React Router&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mport React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect()
class CounterButton extends Component {
  static propTypes = {
    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
  }

  render() {
    const { dispatch } = this.props;
    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.type === &#39;incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;Router routes={routes} /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151222/second-impl.gif&#34; alt=&#34;/20151222/second-impl.gif&#34;&gt;


&lt;p&gt;React Routerを導入して &lt;code&gt;Increment&lt;/code&gt; と &lt;code&gt;Decrement&lt;/code&gt; をRoutingで分けただけ.&lt;br /&gt;
共通で &lt;code&gt;CounterButton&lt;/code&gt; をrenderしていて、 &lt;code&gt;this.props.type&lt;/code&gt; でボタンがクリックされた時に、
&lt;code&gt;incrCounter()&lt;/code&gt; か &lt;code&gt;decrCounter()&lt;/code&gt; のどちらを &lt;code&gt;dispatch&lt;/code&gt; するか分岐している.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.props.type&lt;/code&gt; ではなく、&lt;strong&gt;URLというApplicationが持つState&lt;/strong&gt;で分岐させたいとする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; @connect()
 class CounterButton extends Component {
-  static propTypes = {
-    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
+  static contextTypes = {
+    location: React.PropTypes.object.isRequired
   }
 
   render() {
     const { dispatch } = this.props;
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.props.type === &#39;incr&#39;) {
+          if(this.context.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Increment extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
           TO DECREMENT
         &amp;lt;/Link&amp;gt;
       &amp;lt;/div&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Decrement extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/&#39;&amp;gt;
           TO INCREMENT
         &amp;lt;/Link&amp;gt;
       &amp;lt;/div&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;static contextTypes&lt;/code&gt; を定義して、 &lt;code&gt;this.context.location&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application全体のState&lt;/strong&gt;の管理に一貫性がなくなった.&lt;/p&gt;

&lt;h3 id=&#34;redux-router-1:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h3&gt;

&lt;p&gt;一貫性を取り戻すためにRedux Routerを導入する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import createHistory from &#39;history/lib/createHashHistory&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; const reducer = combineReducers({
+  router: routerStateReducer,
   counter: handleCounter
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-@connect()
+@connect(state =&amp;gt; {
+  return {
+    location: state.router.location
+  }
+})
class CounterButton extends Component {
-  static contextTypes = {
-    location: React.PropTypes.object.isRequired
-  }

   render() {
     const { dispatch } = this.props;
 
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.context.location.pathname === &#39;/incr&#39;) {
+          if(this.props.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
         }} &amp;gt;
         {this.props.children}
       &amp;lt;/button&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-const store = createStore(reducer);
+const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
-        &amp;lt;Router routes={routes} /&amp;gt;
+        &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順に解説する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;色々 &lt;code&gt;import&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combineReducers&lt;/code&gt; で &lt;code&gt;router:&lt;/code&gt; を &lt;code&gt;routerStateReducer&lt;/code&gt; がhandleするようset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; を &lt;code&gt;this.props.location&lt;/code&gt; とできるよう、 &lt;code&gt;@connect&lt;/code&gt; で &lt;code&gt;location:&lt;/code&gt; に &lt;code&gt;state.router.location&lt;/code&gt; をset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; の代わりに &lt;code&gt;this.props.location&lt;/code&gt; を使用.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; でwrapして、 &lt;code&gt;router&lt;/code&gt; のStateを &lt;code&gt;store&lt;/code&gt; で管理するようにする.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createBrowserHistory&lt;/code&gt; を使用して、 &lt;code&gt;&amp;lt;Router history={history} /&amp;gt;&lt;/code&gt; をしていた場合は、 &lt;code&gt;createBrowserHistory&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; の第二引数に渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ReduxRouter history={history} /&amp;gt;&lt;/code&gt; とはしない.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Router routes={routes} /&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;ReduxRouter /&amp;gt;&lt;/code&gt; で置き換える.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでReduxでURLのStateも &lt;code&gt;router&lt;/code&gt; として管理できるようになった.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;秩序を取り戻した. ╭( ･ㅂ･)و&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Fetch Action</title>
      <link>https://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</link>
      <pubDate>Tue, 15 Dec 2015 12:53:17 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</guid>
      <description>

&lt;p&gt;Redux Fetch ActionというReduxのFetch actionのutilityを作った.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の15日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/h1&gt;

&lt;h2 id=&#34;why:204c7e295a840c149fff4b9b8d704763&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;最近&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;を使っているが、DataのFetchが似たようなAction creatorとReducerのpatternになったので、
切り出してpublishした. (&lt;code&gt;POST&lt;/code&gt; もFetchかよって違和感はある.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FluxのActionには&lt;a href=&#34;https://github.com/acdlite/flux-standard-action&#34;&gt;非公式のCoding規約&lt;/a&gt;があるらしく、
それに則るため&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;をbaseとしている.&lt;/p&gt;

&lt;h2 id=&#34;api:204c7e295a840c149fff4b9b8d704763&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;APIは &lt;code&gt;createFetchAction&lt;/code&gt; と &lt;code&gt;handleFetchAction&lt;/code&gt; がある.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createFetchAction&lt;/code&gt; はAction creatorを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FETCH_DATA = &#39;FETCH_DATA&#39;;
const fetchAction = createFetchAction(FETCH_DATA, &#39;/data.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleFetchAction&lt;/code&gt; はReducerを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
const reducer = handleFetchAction(FETCH_DATA, {
  request: (state = {}, action) =&amp;gt; {
    return state;
  },
  receive: (state = {}, action) =&amp;gt; {
    return action.payload;
  },
  error: (satet = {}, action) =&amp;gt; {
    return state;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;h2 id=&#34;example:204c7e295a840c149fff4b9b8d704763&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;二つのAPIを合わせ、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;;
import thunk from &#39;redux-thunk&#39;;
import { handleActions } from &#39;redux-actions&#39;;
import { createFetchAction, handleFetchAction } from &#39;redux-fetch-action&#39;;
import { Server }from &#39;node-static&#39;;
import { createServer } from &#39;http&#39;;

const file = new Server();
createServer((request, response)  =&amp;gt; {
  request.addListener(&#39;end&#39;, () =&amp;gt; {
    file.serve(request, response);
  }).resume();
}).listen(8080);

const FETCH1 = &#39;FETCH1&#39;;
const FETCH2 = &#39;FETCH2&#39;;
const FETCH3 = &#39;FETCH3&#39;;

const reducer1 = handleFetchAction(FETCH1, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 1&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 1&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 1&#39;);
    return posts;
  }
});

const reducer2 = handleFetchAction(FETCH2, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 2&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 2&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 2&#39;);
    return posts;
  }
});

const reducer3 = handleFetchAction(FETCH3, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 3&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 3&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 3&#39;);
    return posts;
  }
});

const reducer = handleActions({
  FETCH1: reducer1,
  FETCH2: reducer2,
  FETCH3: reducer3
}, {});

const store = applyMiddleware(
  thunk
)(createStore)(reducer);

const fetchAction1 = createFetchAction(FETCH1, &#39;http://localhost:8080/data.json&#39;);
const fetchAction2 = createFetchAction(FETCH2, &#39;http://localhost:8080/sample.html&#39;);
const fetchAction3 = createFetchAction(FETCH3, &#39;http://localhost:8080/unknown.json&#39;);

store.dispatch(fetchAction1());
store.dispatch(fetchAction2());
store.dispatch(fetchAction3());

/*
REQUEST 1
REQUEST 2
REQUEST 3
ERROR 3
RECEIVED 1
{ posts:
   [ { id: 1, text: &#39;Sample text 1&#39; },
     { id: 2, text: &#39;Sample text 2&#39; } ] }
RECEIVED 2
&amp;lt;div&amp;gt;
  sample
&amp;lt;/div&amp;gt;
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにFetchのhandleができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasuhiro-okada-aktsk/items/a14f7f37262fb6cf0bf8&#34;&gt;Redux: Actionのコーディング規約 と redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Bootstrap Star Rating</title>
      <link>https://blog.rudolph-miller.com/2015/12/13/react-bootstrap-star-rating/</link>
      <pubDate>Sun, 13 Dec 2015 23:00:37 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/13/react-bootstrap-star-rating/</guid>
      <description>

&lt;p&gt;React Bootstrap Star Ratingを作った.&lt;/p&gt;

&lt;p&gt;作ったので軽く紹介する.&lt;br /&gt;
GitHubは&lt;a href=&#34;https://github.com/Rudolph-Miller/react-bootstrap-star-rating&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-bootstrap-star-rating:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-bootstrap-star-rating:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;React Bootstrap Star Rating&lt;/h1&gt;

&lt;p&gt;作り始めた動機はあるプロジェクトでBowerでjQueryが使われており、
commitするにあたってそれらを殲滅しnpmとReactを導入しようと思ったが、
どうもReactには良い感じのStar rating libraryが無かったから.&lt;/p&gt;

&lt;h2 id=&#34;star-rating-in-react:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Star Rating in React&lt;/h2&gt;

&lt;p&gt;npmのdownload statsで一番だったのは&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;react-star-rating&lt;/a&gt; (939 downloads in the last month) で、
それ以外はほとんど使われていないようだった.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;react-star-rating&lt;/a&gt;はどうかというと、GitHubのcommitはa month agoで&lt;a href=&#34;http://cameronjroe.com/react-star-rating/&#34;&gt;Project page&lt;/a&gt;もあり、
ある程度は開発されていそうだったが、どうも件のProjectのowner曰くstyleがイケていないらしい.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151213/react-star-rating.png&#34; alt=&#34;/20151213/react-star-rating.png&#34;&gt;


&lt;p&gt;ということで、件のProjectで使用していたjQuery pluginをReactでwrapして使うことした.
(&lt;a href=&#34;http://plugins.krajee.com/star-rating/demo&#34;&gt;DEMO&lt;/a&gt;をみる限り、色々customizableっぽい.)&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151213/bootstrap-star-rating.gif&#34; alt=&#34;/20151213/bootstrap-star-rating.gif&#34;&gt;


&lt;h2 id=&#34;wrap-jquery-plugin:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Wrap jQuery plugin&lt;/h2&gt;

&lt;p&gt;作ったといってもjQuery pluginをwrapしただけ (どうもnpmにpublishしていなかっただけで、package.jsonはあった.) なので、
wrapする際の常套patternを軽く紹介する.&lt;/p&gt;

&lt;h3 id=&#34;dom-node:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;DOM node&lt;/h3&gt;

&lt;p&gt;jQuery pluginなのでDOM nodeに対して操作を行う.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#rating&#39;).rating();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをReactで実装する際は &lt;code&gt;ref&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class StarRating extends Component {
  componentDidMount() {
    $node.rating();
  }

  render() {
    return (
      &amp;lt;input
        ref={node =&amp;gt; { this.$node = $(node); }} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-api:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Export API&lt;/h3&gt;

&lt;p&gt;今回の&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;bootstrap-star-rating&lt;/a&gt;は強制にvalueをupdateするAPIがあった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#rating&#39;).rating(&#39;update&#39;, 5);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをReactで実装する際は &lt;code&gt;method&lt;/code&gt; として定義して、 &lt;code&gt;ref&lt;/code&gt; を通して呼び出す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class StarRating extends Component {
  componentDidMount() {
    $node.rating();
  }

  render() {
    return (
      &amp;lt;input
        ref={node =&amp;gt; { this.$node = $(node); }} /&amp;gt;
    );
  }

  update(value) {
    $node.rating(&#39;update&#39;, value);
  }
}

class App extends Component {
  componentDidMount() {
    setTimeout(() =&amp;gt; {
      this.starRating.update(5);
    }, 1000);
  }

  render() {
    return (
      &amp;lt;StarRating
        ref={ref =&amp;gt; { this.starRating = ref; }} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;result:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;簡単にwrapして別のLibraryとして切り出しただけなのでjQueryを無くせたわけでは無いが、&lt;br /&gt;
直接の依存からはremoveできるようになったので心のざわつきは無くせたかな.&lt;/p&gt;

&lt;h1 id=&#34;see-also:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react-bootstrap-star-rating&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plugins.krajee.com/star-rating&#34;&gt;Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kartik-v/bootstrap-star-rating&#34;&gt;bootstrap-star-rating&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>