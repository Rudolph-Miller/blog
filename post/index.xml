<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on (rudolph-miller)</title>
    <link>http://blog.rudolph-miller.com/post/</link>
    <description>Recent content in Posts on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; Copyright 2015 Rudolph Miller</copyright>
    <lastBuildDate>Tue, 18 Aug 2015 22:19:36 +0900</lastBuildDate>
    <atom:link href="http://blog.rudolph-miller.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Itamae</title>
      <link>http://blog.rudolph-miller.com/2015/08/18/introduction-to-itamae/</link>
      <pubDate>Tue, 18 Aug 2015 22:19:36 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/18/introduction-to-itamae/</guid>
      <description>

&lt;p&gt;Itamaeを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#what-itamae-is:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;What Itamae is.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use-itamae:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;How to use Itamae.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-itamae-is:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;What Itamae is.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/itamae-kitchen/itamae&#34;&gt;Itamae&lt;/a&gt;はサーバーの構成管理ツールの一つ.&lt;/li&gt;
&lt;li&gt;Ruby DSLが使えるが、Chefほど色々覚えなくて良い.&lt;/li&gt;
&lt;li&gt;レシピをGemに閉じ込めることが可能.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本当に簡単に使え、Bundlerで依存管理が可能で、使い勝手が良かったので紹介する.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-itamae:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;How to use Itamae.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install itamae
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でitamaeをinstallし、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;package &#39;sl&#39; do
  action :install
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;sl.rb&lt;/code&gt;に書き込む.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;itamae local sl.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でlocalに&lt;code&gt;sl&lt;/code&gt;をinstallできる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install &#39;docker-api&#39;
itamae docker --image centos sl.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;centos&lt;/code&gt;をBaseに&lt;code&gt;sl&lt;/code&gt;コマンド入りのDocker imageを作成できる.&lt;br /&gt;
と言いたいとこだが、&lt;code&gt;No package sl available.&lt;/code&gt;だ.&lt;br /&gt;
仕方ないので、&lt;code&gt;centos&lt;/code&gt;ではSourceからmakeするよう&lt;code&gt;sl.rb&lt;/code&gt;を変更する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;case node[:platform]
when &#39;darwin&#39;
  package &#39;sl&#39;
when &#39;redhat&#39;
  %w( git gcc make ncurses-devel ).each do |package|
    package package do
      action :install
    end
  end

  git &#39;/usr/local/src/sl&#39; do
    repository &#39;https://github.com/mtoyoda/sl&#39;
  end

  execute &#39;install sl&#39; do
    cwd &#39;/usr/local/src/sl&#39;
    command &amp;lt;&amp;lt;-&amp;quot;EOS&amp;quot;
    make
    cp ./sl /usr/local/bin/sl
    EOS
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;node[:platform]&lt;/code&gt;で分岐して&lt;code&gt;redhat&lt;/code&gt;なら&lt;a href=&#34;https://github.com/mtoyoda/sl&#34;&gt;Source&lt;/a&gt;をからbuildする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ itamae docker --image centos sl.rb
 INFO : Starting Itamae...
 INFO : Recipe: /Users/tomoya/ruby/sample.rb
 INFO :   package[git] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   package[gcc] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   package[make] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   package[ncurses-devel] installed will change from &#39;false&#39; to &#39;true&#39;
 INFO :   git[/usr/local/src/sl] exist will change from &#39;false&#39; to &#39;true&#39;
 INFO :   execute[install sl] executed will change from &#39;false&#39; to &#39;true&#39;
 INFO : Image created: 7534d8550ce218cc9d111e92a28e1c56549730bf52d5e6c83363f8a9b2042825
$ docker run -it 7534d8550ce218cc9d111e92a28e1c56549730bf52d5e6c83363f8a9b2042825 sl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でdocker containerでSLが走る.&lt;/p&gt;

&lt;p&gt;GemとしてpublishされているRecipeを使用するのも簡単だ.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gem install itamae-plugin-recipe-nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;nginx&lt;/code&gt;のRecipeをinstallし、
(登録されていないので実際にはinstallできない.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# To include recipe at lib/itamae/plugin/recipe/nginx.rb
include_recipe &#39;nginx&#39;

# To include recipe at lib/itamae/plugin/recipe/nginx/debug.rb
include_recipe &#39;nginx::debug&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くだけでRecipeのincludeができる.&lt;/p&gt;

&lt;h2 id=&#34;see-also:b72d2926b7f180a7f91b4f672ac3b1c6&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/itamae-kitchen/itamae&#34;&gt;Itamae GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui&#34;&gt;Itamae - Infra as Code 現状確認会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mizzy/specinfra&#34;&gt;Specinfra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Clipper</title>
      <link>http://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</link>
      <pubDate>Mon, 10 Aug 2015 13:53:10 +0900</pubDate>
      
      <guid>http://blog.rudolph-miller.com/2015/08/10/introduction-to-clipper/</guid>
      <description>

&lt;p&gt;稚作のClipperを紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;clipper:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;Clipper&lt;/h2&gt;

&lt;p&gt;例えばMicro Blogサービスを作るとしよう.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.models
  (:use :cl
        :integral))
(in-package :sample.models)

(defclass user ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :reader user-id)
   (name :col-type (:varchar 255)
         :initarg :name
         :accessor user-name))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defclass post ()
  ((id :type (:integer 11)
       :primary-key t
       :auto-increment t
       :not-null t
       :reader post-id)
   (content :type string
            :col-type (:varchar 255)
            :initarg :content
            :accessor post-content)
   (user-id :type integer
            :initarg :user-id
            :accessor post-user-id))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))

(defun user-posts (user)
  (check-type user user)
  (select-dao &#39;post (where (:= :user_id (user-id user)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じに&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt;を使用しModelとして&lt;code&gt;user&lt;/code&gt;と&lt;code&gt;post&lt;/code&gt;を定義する.
とりあえずこれで&lt;code&gt;user&lt;/code&gt;に紐づく&lt;code&gt;post&lt;/code&gt;の投稿と&lt;code&gt;post&lt;/code&gt;の一覧機能ができる.&lt;/p&gt;

&lt;p&gt;次に&lt;code&gt;user&lt;/code&gt;が名前の表示だけじゃ物足りなく感じ、Iconを設定できるようにしてみる.
Iconを設定するためにはImage Filesを保存、管理しなくてはならない.&lt;/p&gt;

&lt;p&gt;開発を進めて行く内に、
「開発時はBrowserで確認するため&lt;code&gt;static/images/icons&lt;/code&gt;に保存し、
test時は開発環境を壊したくないため&lt;code&gt;t/images/icons&lt;/code&gt;に保存したい.
その上、productionではS3のBucketに保存したい.」
となるのは当然だと思う.
(少なくとも僕はそれが必要になった.)&lt;/p&gt;

&lt;p&gt;これらの切り替えを簡単にするのが&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;Clipper&lt;/a&gt;だ.&lt;/p&gt;

&lt;p&gt;とりあえずIconのModelとして&lt;code&gt;icon&lt;/code&gt;を用意して、&lt;code&gt;user&lt;/code&gt;と紐づける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defclass icon ()
  ((id :type integer
       :primary-key t
       :auto-increment t
       :not-null t
       :initarg :id)
   (user-id :type integer)
   (image-file-name :col-type (:varchar 255)
                    :initarg :image-file-name)
   (image-content-type :col-type (:varchar 255)
                       :initarg :image-content-type)
   (image-file-size :col-type (:integer 11)
                    :initarg :image-file-size)
   (url :type string
        :initarg :url))
  (:metaclass &amp;lt;dao-table-class&amp;gt;))


(defun user-icon (user)
  (check-type user user)
  (car
   (select-dao &#39;icon
               (where (:= :user_id (user-id user)))
               (limit 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数でのconfigの切り替えに&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt;を使用し、
&lt;code&gt;clipper:setup-clipper&lt;/code&gt;の引数をenvごとに管理する.
又、切り替えのための&lt;code&gt;sample.models::setup-clipper&lt;/code&gt;も定義しておく.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(defpackage sample.config
  (:use :cl)
  (:import-from :envy
                :config-env-var
                :defconfig))
(in-package :sample.config)

(setf (config-env-var) &amp;quot;APP_ENV&amp;quot;)

(defconfig |development|
    `(:clipper (:store-type :local
                :image-directory #P&amp;quot;/home/user/app/images/icons&amp;quot;
                :relative #P&amp;quot;/home/user/app/&amp;quot;
                :prefix &amp;quot;http://localhost:3000/&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defconfig |production|
    `(:clipper (:store-type :s3
                :aws-access-key (uiop:getenv &amp;quot;AWS_ACCESS_KEY&amp;quot;)
                :aws-secret-key (uiop:getenv &amp;quot;AWS_SECRET_KEY&amp;quot;)
                :s3-endpoint &amp;quot;s3-ap-northeast-1.amazonaws.com&amp;quot;
                :s3-bucket-name &amp;quot;sample-app&amp;quot;
                :format &amp;quot;:ID/:FILE-NAME.:EXTENSION&amp;quot;)))

(defun config ()
  (envy:config #.(package-name *package*)))


(in-package :sample.models)

(defun setup-clipper ()
  (apply #&#39;clipper:setup-clipper
         (append (list :clipper-class (find-class &#39;icon))
                 (getf (sample.config::config) :clipper))))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると環境変数&lt;code&gt;APP_ENV&lt;/code&gt;によってImage Filesの保存先を切り替えられる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Common-Lisp&#34;&gt;(in-package :sample.models)

(ql:quickload :osicat)

(defvar *url* &amp;quot;http://www.lisperati.com/lisplogo_alien_256.png&amp;quot;)

;; APP_ENV=development
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;development&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;Rudolph&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;http://localhost:3000/images/icons/1/lisplogo_alien_256.png&amp;quot;


;; APP_ENV=production
(setf (osicat:environment-variable &amp;quot;APP_ENV&amp;quot;) &amp;quot;production&amp;quot;)
(setup-clipper)

(let* ((user (create-dao &#39;user :name &amp;quot;John&amp;quot;))
       (icon (create-dao &#39;icon :user-id (user-id user))))
  (save-dao (clipper:attach-image icon :url *url*))
  (clipper:image-url icon))

;; =&amp;gt; &amp;quot;https://s3-ap-northeast-1.amazonaws.com/sample-app/2/lisplogo_alien_256.png&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;便利.&lt;/p&gt;

&lt;h2 id=&#34;see-also:5bbeb7a83ef521a35f8ff56c6ff34120&#34;&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rudolph-miller.github.io/clipper/overview.html&#34;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://quickdocs.org/clipper/&#34;&gt;Quickdocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/clipper&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/integral&#34;&gt;Integral&lt;/a&gt; - An object relational mapper for Common Lisp.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fukamachi/envy&#34;&gt;Envy&lt;/a&gt; - Configuration switcher by an environment variable inspired by Config::ENV.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xach.com/lisp/zs3/&#34;&gt;ZS3&lt;/a&gt; - Amazon S3 and CloudFront from Common Lisp.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>