<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on (rudolph-miller)</title>
    <link>https://blog.rudolph-miller.com/post/</link>
    <description>Recent content in Posts on (rudolph-miller)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>&amp;copy; 2015 Rudolph Miller</copyright>
    <lastBuildDate>Sun, 31 Jan 2016 21:39:15 +0900</lastBuildDate>
    <atom:link href="https://blog.rudolph-miller.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>detect-js-changes</title>
      <link>https://blog.rudolph-miller.com/2016/01/31/detect-js-changes/</link>
      <pubDate>Sun, 31 Jan 2016 21:39:15 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/31/detect-js-changes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/detect-js-changes&#34;&gt;detect-js-changes&lt;/a&gt;という業務Toolを作ってKaizenの業務をKAIZENした話.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#background:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#detect-js-changes:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;detect-js-changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#go:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;background:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Background&lt;/h1&gt;

&lt;h2 id=&#34;javascript-file:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;JavaScript file&lt;/h2&gt;

&lt;p&gt;Kaizen PlatformではAB TestのJavaScript fileをBaseのfileにClient毎のDataを書き出して生成している.
生成後、JavaScript fileをClient毎のS3 ObjectにUploadしている.&lt;/p&gt;

&lt;h2 id=&#34;e2e:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;E2E&lt;/h2&gt;

&lt;p&gt;このAB TestのJavaScriptに対してPhantomJSやBrowserStack上でのE2E Testを行っている.&lt;/p&gt;

&lt;p&gt;DeployのタイミングでこのE2E Testを実施しているのだが、
そもそも生成されるJavaScript fileに変更がなかった場合Test結果は変わらないのでskipすることになっている.&lt;/p&gt;

&lt;h2 id=&#34;until-now:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Until now&lt;/h2&gt;

&lt;p&gt;このJavaScript fileに変更があるかないかの確認フローは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;今までは対象のJavaScript files (16 files) のURLに対して &lt;code&gt;wget&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Depoly.&lt;/li&gt;
&lt;li&gt;再度 &lt;code&gt;wget&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;末尾にJavaScript file生成日時のTimestampと、ClientのDataに書き出した日時のTimestampがあるので、それら意外に差分がないかを &lt;code&gt;diff&lt;/code&gt; で確認.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となっていて、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;何回も &lt;code&gt;wget&lt;/code&gt; する.

&lt;ul&gt;
&lt;li&gt;Deploy環境によってURLが変わる. (QA用やProduction用など.)&lt;/li&gt;
&lt;li&gt;Timestampの差分すら出なかった場合はS3の反映待ちだったりするので、再度 &lt;code&gt;wget&lt;/code&gt; する.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JavaScript fileはminifyしてあるので、&lt;code&gt;diff&lt;/code&gt; をとるにはunminifyしないといけない.&lt;/li&gt;
&lt;li&gt;Timestampの差分はでるので、 &lt;code&gt;diff&lt;/code&gt; の結果をTimestampの差分かどうか確認しないといけない.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりが面倒くさい.&lt;/p&gt;

&lt;p&gt;ひとつひとつのStepはScriptが用意されていたりするが、それでも面倒くさい.&lt;/p&gt;

&lt;p&gt;Depoly (基本は週2回) 毎にこれを誰かが実行している.&lt;/p&gt;

&lt;h1 id=&#34;detect-js-changes:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;detect-js-changes&lt;/h1&gt;

&lt;p&gt;この面倒くささを解消するために作ったのが &lt;code&gt;detect-js-changes&lt;/code&gt; だ.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/Rudolph-Miller/detect-js-changes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でinstallできる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;detect-js-changes&lt;/code&gt; を使うと上の確認フローが、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;detect-js-changes download&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Deploy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detect-js-changes download&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detect-js-changes detect&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となる.&lt;/p&gt;

&lt;p&gt;Deploy環境ごとのURLは &lt;code&gt;config.yml&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;qa:
  urls:
  - https://qa.kaizenplatform.com/file1.js
  - https://qa.kaizenplatform.com/file2.js
production:
  urls:
  - https://production.kaizenplatform.com/file1.js
  - https://production.kaizenplatform.com/file2.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とYAMLで記述し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;detect-js-changes -e qa -c config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と環境やConfig fileを指定できる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.yml&lt;/code&gt; でどういうKeywordをignoreするか
(今回は末尾のTimestampとClientのDataのTimestampを特定するKeyword)
も指定できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;default:
  ignore_keywords:
  - Timestamp
  - generated_at
qa:
  urls:
  - https://qa.kaizenplatform.com/file1.js
  - https://qa.kaizenplatform.com/file2.js
production:
  urls:
  - https://production.kaizenplatform.com/file1.js
  - https://production.kaizenplatform.com/file2.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;go:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Go&lt;/h1&gt;

&lt;p&gt;軽く実装に触れておく.&lt;/p&gt;

&lt;p&gt;言語は &lt;code&gt;Go&lt;/code&gt; を使用しており、採用理由はなんとなくである.&lt;/p&gt;

&lt;h2 id=&#34;cli:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;CLI&lt;/h2&gt;

&lt;p&gt;CLIには &lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;&lt;code&gt;codegangsta/cli&lt;/code&gt;&lt;/a&gt; を使用した.&lt;/p&gt;

&lt;p&gt;感想は特にない.&lt;/p&gt;

&lt;h2 id=&#34;yaml:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;YAML&lt;/h2&gt;

&lt;p&gt;YAML formatのConfig fileのparseには &lt;a href=&#34;https://github.com/go-yaml/yaml&#34;&gt;gopkg.in/yaml.v2&lt;/a&gt; を使用した.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;gopkg.in/yaml.v2&amp;quot;
  &amp;quot;os&amp;quot;
)

var data = `
key1: value1
key2:
  key3:
  - value2
  - value3
`

type T struct {
  Key1 string
  Key2 struct {
    Key3 []string
  }
}

func main() {
  t := T{}
  err := yaml.Unmarshal([]byte(data), &amp;amp;t)
  if err != nil {
    fmt.Println(err)
    os.Exit(1)
  }

  fmt.Println(t)
  // {value1 {[value2 value3]}}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様にOutputの &lt;code&gt;struct&lt;/code&gt; を用意して &lt;code&gt;yaml.Unmarshal&lt;/code&gt; するのだが、今回のConfig fileは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;default:
  ignore_keywords:
  - sample keyword
development:
  urls:
  - https://development.kaizenplatform.com/file0.js
  - https://development.kaizenplatform.com/file1.js
production:
  urls:
  - https://production.kaizenplatform.com/file0.js
  - https://production.kaizenplatform.com/file1.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様に環境名がTop levelのKeyとなりその下に特定のKVが入る形式で、
環境名はUserが自由に指定でき、Top levelのKeyが指定できない.&lt;/p&gt;

&lt;p&gt;この場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;gopkg.in/yaml.v2&amp;quot;
  &amp;quot;os&amp;quot;
)

var data = `
default:
  key1: value1
  key2:
    key3:
    - value2
    - value3
development:
  key1: value1
  key2:
    key3:
    - value2
    - value3
`

type T struct {
  Key1 string
  Key2 struct {
    Key3 []string
  }
}

func main() {
  m := make(map[string]T)
  err := yaml.Unmarshal([]byte(data), &amp;amp;m)
  if err != nil {
    fmt.Println(err)
    os.Exit(1)
  }

  fmt.Println(m)
  // map[default:{value1 {[value2 value3]}} development:{value1 {[value2 value3]}}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様に &lt;code&gt;map&lt;/code&gt; で指定する.&lt;/p&gt;

&lt;h2 id=&#34;unminify:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Unminify&lt;/h2&gt;

&lt;p&gt;minified fileのunminifyには &lt;a href=&#34;https://github.com/ditashi/jsbeautifier-go&#34;&gt;&lt;code&gt;ditashi/jsbeautifier-go&lt;/code&gt;&lt;/a&gt; と言う &lt;a href=&#34;http://jsbeautifier.org&#34;&gt;jsbeautifier&lt;/a&gt; のGo port (CLI tool) の内部APIを使用した.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function main(){var e={key1:&amp;quot;value1&amp;quot;,key2:{key3:[&amp;quot;value2&amp;quot;,&amp;quot;value3&amp;quot;]}};console.log(e)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の様なminifiedなJavaScriptを &lt;code&gt;example.min.js&lt;/code&gt; として用意して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;github.com/ditashi/jsbeautifier-go/jsbeautifier&amp;quot;
)

func beautify(src string) *string {
  options := jsbeautifier.DefaultOptions()
  return jsbeautifier.BeautifyFile(src, options)
}

func main() {
  filename := &amp;quot;example.min.js&amp;quot;
  fmt.Println(*beautify(filename))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;go run&lt;/code&gt; すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function main() {
    var e = {
        key1: &amp;quot;value1&amp;quot;,
        key2: {
            key3: [&amp;quot;value2&amp;quot;, &amp;quot;value3&amp;quot;]
        }
    };
    console.log(e)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とunminifyできる.&lt;/p&gt;

&lt;h2 id=&#34;diff:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;Diff&lt;/h2&gt;

&lt;p&gt;diffには &lt;a href=&#34;https://github.com/sergi/go-diff&#34;&gt;sergi/go-diff/diffmatchpatch&lt;/a&gt; を使用した.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;fmt&amp;quot;
  &amp;quot;github.com/sergi/go-diff/diffmatchpatch&amp;quot;
  &amp;quot;strings&amp;quot;
)

func lineDiff(src1, src2 string) []diffmatchpatch.Diff {
  dmp := diffmatchpatch.New()
  a, b, c := dmp.DiffLinesToChars(src1, src2)
  diffs := dmp.DiffMain(a, b, false)
  result := dmp.DiffCharsToLines(diffs, c)
  return result
}

func prefix(diff diffmatchpatch.Diff) string {
  switch diff.Type {
  case diffmatchpatch.DiffEqual:
    return &amp;quot; &amp;quot;
  case diffmatchpatch.DiffInsert:
    return &amp;quot;+&amp;quot;

  case diffmatchpatch.DiffDelete:
    return &amp;quot;-&amp;quot;
  }
  return &amp;quot; &amp;quot;
}

var src1 = `
abc
def
ghi
`

var src2 = `
abc
defg
hi
`

func main() {
  result := lineDiff(src1, src2)

  for _, diff := range result {
    for _, string := range strings.Split(diff.Text, &amp;quot;\n&amp;quot;) {
      if len(string) &amp;gt; 0 {
        fmt.Println(prefix(diff) + string)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;go run&lt;/code&gt; すると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; abc
-def
-ghi
+defg
+hi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり、行単位のdiffが取れている.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;業務KAIZEN! ╭( ･ㅂ･)و&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;see-also:344e738fbd9ca3a556971580ada8f1e4&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/detect-js-changes&#34;&gt;detect-js-changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;codegangsta/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-yaml/yaml&#34;&gt;gopkg.in/yaml.v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ditashi/jsbeautifier-go&#34;&gt;ditashi/jsbeautifier-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sergi/go-diff&#34;&gt;sergi/go-diff/diffmatchpatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Use SSL with Custom Domain on GitHub Pages</title>
      <link>https://blog.rudolph-miller.com/2016/01/29/use-ssl-with-custom-domain-on-gh-pages/</link>
      <pubDate>Fri, 29 Jan 2016 17:18:42 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/29/use-ssl-with-custom-domain-on-gh-pages/</guid>
      <description>

&lt;p&gt;Custom domainなGitHub PagesをSSL対応する.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ssl-on-github-pages:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;SSL on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cloudflare:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;CloudFlare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;ssl-on-github-pages:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;SSL on GitHub Pages&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;blog.rudolph-miller.com&lt;/em&gt; はGitHub Pagesで配信しており、
ふとGitHub PagesはSSL対応しているのかと思い調べてみた.&lt;/p&gt;

&lt;p&gt;defaultの &lt;em&gt;github.io&lt;/em&gt; domainの場合はSSL対応しているが (&lt;a href=&#34;https://github.com/isaacs/github/issues/156&#34;&gt;公式には完了していない??&lt;/a&gt;) 、
Custom domainを使用している場合は証明書のdomainが異なるためGitHubの発行している証明書ではSSLが使えないようだった.&lt;/p&gt;

&lt;p&gt;なにかやり方がないかと調べていると、
&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;のDNSを使えばCustom domainでもSSL対応できそうだったのでやってみた.&lt;/p&gt;

&lt;h1 id=&#34;cloudflare:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;CloudFlare&lt;/h1&gt;

&lt;h2 id=&#34;about:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;CloudFlareはCDNやDNSをやってるUSの企業.
Freeプランがあり、基本無料で使える.&lt;/p&gt;

&lt;h2 id=&#34;setting:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;Setting&lt;/h2&gt;

&lt;p&gt;Sign upからdomainの登録は迷わないと思うので割愛.&lt;/p&gt;

&lt;p&gt;今回した設定は &lt;code&gt;SSL&lt;/code&gt;, &lt;code&gt;HSTS&lt;/code&gt;, &lt;code&gt;Subdomain&lt;/code&gt;.
基本的にはCloudFlareの管理画面のDomain毎のOverviewの上のMenuから入って設定する.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/menu.png&#34; alt=&#34;20160129/menu.png&#34;&gt;


&lt;h3 id=&#34;ssl:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;SSL&lt;/h3&gt;

&lt;p&gt;SSLの設定は上のMenuの &lt;code&gt;Crypto&lt;/code&gt;&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/crypto.png&#34; alt=&#34;20160129/crypto.png&#34;&gt;


&lt;p&gt;から行う.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/ssl.png&#34; alt=&#34;20160129/ssl.png&#34;&gt;


&lt;p&gt;SSLの設定は &lt;code&gt;Off&lt;/code&gt;, &lt;code&gt;Flexible&lt;/code&gt;, &lt;code&gt;Full&lt;/code&gt;, &lt;code&gt;Strict&lt;/code&gt; と選べる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flexible&lt;/code&gt;: ClientとCloudFlareの間は暗号化されたConnectionを使い、CloudFlareからServerは暗号化されてないConnectionを使う.

&lt;ul&gt;
&lt;li&gt;ServerにSSL証明書が必要ない.&lt;/li&gt;
&lt;li&gt;今回はこれを使用.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Full&lt;/code&gt;: ClientとCloudFlare間もCloudFlareからServer間も暗号化されたConnectionを使う.

&lt;ul&gt;
&lt;li&gt;ServerにSSL証明書が必要.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Strict&lt;/code&gt;: HTTPできたRequestをHTTPSにupgradeする.

&lt;ul&gt;
&lt;li&gt;Enterprise only.&lt;/li&gt;
&lt;li&gt;ServerにSSL証明書が必要.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は &lt;code&gt;Flexible&lt;/code&gt; を選択.&lt;/p&gt;

&lt;h3 id=&#34;hsts:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;HSTS&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;HSTSと言うのは &lt;code&gt;HTTP Strict Transport Security&lt;/code&gt; の略で、
Web serverがWeb browserに対して、次回以降HTTPの代わりにHTTPSを使うように伝達する機能.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;次回以降&lt;/strong&gt;なので初回はHTTPでRequestし、その次からHTTPSを強制することができる.
(もちろん初回からHTTPSでRequestもできる.)&lt;/p&gt;

&lt;p&gt;初回から強制するために、BrowserがHSTSの設定のpreloadを行う機能もある.
(CloadFlareでもpreloadを有効にすることが可能.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;HSTSの設定は &lt;code&gt;SSL&lt;/code&gt; 同様に上のMenuの &lt;code&gt;Crypto&lt;/code&gt;&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/crypto.png&#34; alt=&#34;20160129/crypto.png&#34;&gt;


&lt;p&gt;から行う.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/hsts.png&#34; alt=&#34;20160129/hsts.png&#34;&gt;


&lt;h3 id=&#34;subdomain:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;Subdomain&lt;/h3&gt;

&lt;p&gt;Subdomainの設定は上のMenuの &lt;code&gt;DNS&lt;/code&gt;&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/dns.png&#34; alt=&#34;20160129/dns.png&#34;&gt;


&lt;p&gt;から行う.&lt;/p&gt;

&lt;p&gt;今回はSubdomainが &lt;em&gt;blog.rudolph-miller.com&lt;/em&gt; でGitHub PagesのDomainが &lt;em&gt;rudolph-miller.github.io&lt;/em&gt; なので、&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/dns_input.png&#34; alt=&#34;20160129/dns_input.png&#34;&gt;


&lt;p&gt;こんな感じに &lt;code&gt;CNAME&lt;/code&gt; を登録し、&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/dns_status.png&#34; alt=&#34;20160129/dns_status.png&#34;&gt;


&lt;p&gt;&lt;code&gt;Status&lt;/code&gt; を&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/not_penetrating.png&#34; alt=&#34;20160129/not_penetrating.png&#34;&gt;


&lt;p&gt;から&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160129/penetrating.png&#34; alt=&#34;20160129/penetrating.png&#34;&gt;


&lt;p&gt;にClickで変更すると完了.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;DNSの反映待ちはあったが、簡単にCustom domainなGitHub Pagesを簡単にSSL対応できた.&lt;/p&gt;

&lt;h1 id=&#34;see-also:cf68b4f8581564027f3288c1c2c90b3d&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflarestatus.com/&#34;&gt;CloudFlare system status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/&#34;&gt;Configuring CloudFlare’s Universal SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&#34;&gt;Setting up a custom domain with GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Scroll to the top with Redux Router</title>
      <link>https://blog.rudolph-miller.com/2016/01/25/scroll-to-the-top-with-redux-router/</link>
      <pubDate>Mon, 25 Jan 2016 21:46:15 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/25/scroll-to-the-top-with-redux-router/</guid>
      <description>

&lt;p&gt;Redux RouterでLocationの変更時にScrollをtopに持っていく方法.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#scroll-position-after-transition-with-redux-router:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll position after transition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scroll-to-the-top-with-redux-router:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;scroll-position-after-transition:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll position after transition&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt; は &lt;a href=&#34;https://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの紹介&lt;/a&gt; で紹介した通り、React.jsでde facto standardとなっているRouting libraryの &lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt; の &lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;Redux Routerを実際にApplicationで使用していると &lt;code&gt;Link&lt;/code&gt; での遷移時にScrollが元の位置のままで困ったので、 &lt;code&gt;Link&lt;/code&gt; での遷移で &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; するよう実装した.&lt;/p&gt;

&lt;h1 id=&#34;scroll-to-the-top:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/h1&gt;

&lt;h2 id=&#34;example:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;とりあえずRedux Routerを使用したApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { createStore, combineReducers } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const Styles = {
  linkContainer: {
    marginTop: &#39;1000px&#39;
  }
}

class App extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

class Hoge extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;Hoge&amp;lt;/div&amp;gt;
        &amp;lt;div style={Styles.linkContainer}&amp;gt;
          &amp;lt;Link to=&amp;quot;/fuga&amp;quot;&amp;gt;
            To Fuga
          &amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Fuga extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;Fuga&amp;lt;/div&amp;gt;
        &amp;lt;div style={Styles.linkContainer}&amp;gt;
          &amp;lt;Link to=&amp;quot;/hoge&amp;quot;&amp;gt;
            To Hoge
          &amp;lt;/Link&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect path=&amp;quot;/&amp;quot; to=&amp;quot;hoge&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;hoge&amp;quot; component={Hoge} /&amp;gt;
      &amp;lt;Route path=&amp;quot;fuga&amp;quot; component={Fuga} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const reducer = combineReducers({
  router: routerStateReducer
});

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160125/scroll_step1.gif&#34; alt=&#34;20160125/scroll_step1.gif&#34;&gt;


&lt;p&gt;上のGIFの通り、このままだと &lt;code&gt;Link&lt;/code&gt; での遷移時にScrollが元の位置のままだ.&lt;br /&gt;
本来なら、遷移したらScrollを最上部にもっていくべきだろう.&lt;/p&gt;

&lt;h2 id=&#34;scroll-to-the-top-1:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;Scroll to the top&lt;/h2&gt;

&lt;p&gt;Redux Routerでも数行でこれが実装できる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@@ -66,7 +66,18 @@
const reducer = combineReducers({
   router: routerStateReducer
 });
 
-const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
+const history = createHistory();
+
+history.listen(location =&amp;gt; {
+  setTimeout(() =&amp;gt; {
+    if (location.action === &#39;POP&#39;) {
+      return;
+    }
+    window.scrollTo(0, 0);
+  });
+});
+
+const store = reduxReactRouter({routes, history})(createStore)(reducer);
 
 class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
         &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変更点は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reduxReactRouter&lt;/code&gt; に &lt;code&gt;createHistory&lt;/code&gt; ではなく、 &lt;code&gt;history&lt;/code&gt; として &lt;code&gt;createHistory()&lt;/code&gt; の返り値を渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt; に対して &lt;code&gt;location&lt;/code&gt; の変更のEventの &lt;code&gt;listen&lt;/code&gt; を行い、 &lt;code&gt;location.action&lt;/code&gt; が &lt;code&gt;&#39;POP&#39;&lt;/code&gt; 以外の時に &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; を実行する.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だけ.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160125/scroll_step2.gif&#34; alt=&#34;20160125/scroll_step2.gif&#34;&gt;


&lt;h2 id=&#34;pushstate:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;pushState&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/&#34;&gt;pushState in Redux Router&lt;/a&gt; で紹介した通り、
Redux Routerにも &lt;code&gt;pushState&lt;/code&gt; のAPIがあり &lt;code&gt;pushState&lt;/code&gt; ででもPageの遷移ができるが、
この改修により &lt;code&gt;pushState&lt;/code&gt; での遷移でもScrollを最上部に持っていくことができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:8c6698fca28b5f763bfcc5cf03efbc9c&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Add List-balloon to Twitter share button</title>
      <link>https://blog.rudolph-miller.com/2016/01/25/add-list-balloon-to-twitter-share-button/</link>
      <pubDate>Mon, 25 Jan 2016 00:01:11 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/25/add-list-balloon-to-twitter-share-button/</guid>
      <description>

&lt;p&gt;Twitterのshare buttonにlist balloonを追加する.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#twitter-share-button:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Twitter share button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add-list-balloon:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Add List-balloon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;twitter-share-button:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Twitter share button&lt;/h1&gt;

&lt;p&gt;Blogなどに埋め込まれているTwitterのshareボタンだが、以前は上にBalloonでTweet数が表示されていた.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/previous_twitter.png&#34; alt=&#34;20160124/previous_twitter.png&#34;&gt;


&lt;p&gt;それがTwitter内部でのCassandraの廃止に付随して、昨年末なくなった.&lt;br /&gt;
(参照: &lt;a href=&#34;https://blog.twitter.com/ja/2015/buttons&#34;&gt;持続的なプラットフォームのための難しい決断&lt;/a&gt;)&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/new_twitter.png&#34; alt=&#34;20160124/new_twitter.png&#34;&gt;


&lt;p&gt;Twitter、 はてなブックマーク、Facebook、Google+のshareボタンがBalloon付きでならんでいたのだが、TwitterのshareボタンだけがBalloonが無くなり、統一感が失われた.
違和感を感じつつも放置していたのだが、最近あるBlogでTwittenのshareボタンの上にBalloonで &lt;code&gt;list&lt;/code&gt; と表示し、
&lt;em&gt;&lt;a href=&#34;https://twitter.com/search&#34;&gt;https://twitter.com/search&lt;/a&gt;&lt;/em&gt; のその記事のPermalinkの検索結果へのLinkとなるようにしているのを見かけたので実装してみた.&lt;/p&gt;

&lt;h1 id=&#34;add-list-balloon:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;Add List-balloon&lt;/h1&gt;

&lt;p&gt;まず従来のshareボタンだが、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  window.twttr=(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],t=window.twttr||{};if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src=&amp;quot;https://platform.twitter.com/widgets.js&amp;quot;;fjs.parentNode.insertBefore(js,fjs);t._e=[];t.ready=function(f){t._e.push(f);};return t;}(document,&amp;quot;script&amp;quot;,&amp;quot;twitter-wjs&amp;quot;));
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を埋め込む.&lt;/p&gt;

&lt;p&gt;以前は一つ目のHTML codeの &lt;code&gt;a&lt;/code&gt; tagの &lt;code&gt;data-conut=&amp;quot;vertical&amp;quot;&lt;/code&gt; によりTweet数のBalloon付きでshareボタンが表示されていたが、今はこのように表示される.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/new_twitter.png&#34; alt=&#34;20160124/new_twitter.png&#34;&gt;


&lt;p&gt;とりあえず、Balloonを表示する.&lt;br /&gt;
BalloonはCSSで一つの &lt;code&gt;span&lt;/code&gt; とその &lt;code&gt;::before&lt;/code&gt; と &lt;code&gt;::after&lt;/code&gt; を使って描けるので、とりあえず一つ &lt;code&gt;span&lt;/code&gt; を追加する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
+  &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
   &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/step1.png&#34; alt=&#34;20160124/step1.png&#34;&gt;


&lt;p&gt;これにBalloonを描くようCSSを当てる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.balloon-bottom {
  position: relative;
  display: inline-block;
  padding: 0 15px;
  width: 75px;
  min-width: 75px;
  height: 33px;
  line-height: 33px;
  color: #000;
  text-align: center;
  background-color: #fff;
  border: 1px solid #B0C1D8;
  border-radius: 3px;
  z-index: 0;
}

.balloon-bottom:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  bottom: -4px;
  left: 50%;
  margin-left: -4px;
  width: 0px;
  height: 0px;
  border-style: solid;
  border-width: 5px 4px 0 4px;
  border-color: #fff transparent transparent transparent;
  z-index: 0;
}

.balloon-bottom:after {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  bottom: -6px;
  left: 50%;
  margin-left: -5px;
  width: 0px;
  height: 0px;
  border-style: solid;
  border-width: 6px 5px 0 5px;
  border-color: #B0C1D8 transparent transparent transparent;
  z-index: -1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/step2.png&#34; alt=&#34;20160124/step2.png&#34;&gt;


&lt;p&gt;(下の吹き出しの大きさの変更は &lt;code&gt;:before&lt;/code&gt; と &lt;code&gt;:after&lt;/code&gt; の &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;margin-left&lt;/code&gt;, &lt;code&gt;border-width&lt;/code&gt; をsynchronouslyに変更する.)&lt;/p&gt;

&lt;p&gt;次はこれを縦に並べる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
-  &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
-  &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
+  &amp;lt;ul class=&amp;quot;twitter-share-button-with-balloon&amp;quot;&amp;gt;
+    &amp;lt;li&amp;gt;
+      &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
+    &amp;lt;/li&amp;gt;
+    &amp;lt;li&amp;gt;
+      &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
+    &amp;lt;/li&amp;gt;
+  &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.twitter-share-button-with-balloon {
  list-style: none;
}

.twitter-share-button-with-balloon &amp;gt; :first-child + * {
  margin-top: 7px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160124/step3.png&#34; alt=&#34;20160124/step3.png&#34;&gt;


&lt;p&gt;見た目はこれで完成.&lt;br /&gt;
あとはLinkだが、このBlogは&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を使っているので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;div class=&amp;quot;social-button&amp;quot;&amp;gt;
   &amp;lt;ul class=&amp;quot;twitter-share-button-with-balloon&amp;quot;&amp;gt;
     &amp;lt;li&amp;gt;
+    &amp;lt;a href=&amp;quot;https://twitter.com/search?q={{ .Permalink }}&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;
       &amp;lt;span class=&amp;quot;balloon-bottom&amp;quot;&amp;gt;list&amp;lt;/span&amp;gt;
+    &amp;lt;/a&amp;gt;
     &amp;lt;/li&amp;gt;
     &amp;lt;li&amp;gt;
       &amp;lt;a class=&amp;quot;twitter-share-button&amp;quot; href=&amp;quot;https://twitter.com/share&amp;quot; data-dnt=&amp;quot;true&amp;quot; data-count=&amp;quot;vertical&amp;quot;&amp;gt;Tweet&amp;lt;/a&amp;gt;
     &amp;lt;/li&amp;gt;
   &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;a&lt;/code&gt; tagで囲えば完成.&lt;/p&gt;

&lt;h1 id=&#34;see-also:359e491c453d46e1b4bf2da9348c0d89&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/ja/2015/buttons&#34;&gt;持続的なプラットフォームのための難しい決断&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Import Query Result to BigQuery</title>
      <link>https://blog.rudolph-miller.com/2016/01/15/import-query-result-to-bigquery/</link>
      <pubDate>Fri, 15 Jan 2016 18:45:16 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/15/import-query-result-to-bigquery/</guid>
      <description>

&lt;p&gt;特定DirectoryにあるSQL fileを実行して、結果をBigQueryに入れるScriptを書いた.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#background:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-query-result-to-bigquery:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Import Query Result to BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;background:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://kaizenplatform.com/ja/&#34;&gt;Kaizen Platform&lt;/a&gt;では&lt;a href=&#34;https://cloud.google.com/bigquery/?hl=ja&#34;&gt;BigQuery&lt;/a&gt;と&lt;a href=&#34;http://redash.io/&#34;&gt;re:dash&lt;/a&gt;を使ってProjectの&lt;strong&gt;定量KPIの可視化&lt;/strong&gt;をしていて、定期的に振り返りの機会を設けている.&lt;/p&gt;

&lt;p&gt;これを実施・運用する上で困ったのが、UserのPVなどをplotする際に社内のUserかどうかがBigQueryに格納しているDataだけでは判別がつかないことだった.&lt;br /&gt;
(社内UserのIDリストを &lt;code&gt;user_id NOT IN (...)&lt;/code&gt; に貼り付けるという&lt;strong&gt;真心こもったOperation&lt;/strong&gt;が行われていた.)&lt;/p&gt;

&lt;p&gt;Kaizen Platformでは数ヶ月に一度 &lt;code&gt;Kaizen Week&lt;/code&gt; の名で、日頃のプロジェクトを一時停止して、積みタスクや、リファクタリング、新しいツールの試験・導入などの時間を確保しようという試みがあり、ちょうど今週がその &lt;code&gt;Kaizen Week&lt;/code&gt; だったので、ここを改善しようと思った.&lt;/p&gt;

&lt;p&gt;解決策としては2通り考えられる.
一つがLogにUserの属性を埋め込む方法、もう一つはBigQuery外部のDatabase (今回は社内のMySQL) からUserの属性を参照する方法だが、今回は二つ目の方法をとることにした.&lt;/p&gt;

&lt;p&gt;外部DatabaseをBigQueryから参照する方法だが、Query Engineでうまい具合にJOINする方法 (&lt;a href=&#34;https://prestodb.io/&#34;&gt;Presto&lt;/a&gt;) と、外部DatabaseのDataをBigQueryにimportする方法が考えられた. 一つ目の方法はこれぐらい軽いことをやりるのにわざわさ導入するのはなって気がした (あくまで気がした) ので、外部DatabaseのDataをBigQueryにimportすることにした.&lt;/p&gt;

&lt;p&gt;今回の場合、とりあえずUserのTableをうまい具合にBigQueryにimportするだけで良かったが、今後もカジュアルに外部DatabaseのDataをBigQueryにimportしたいという要望があったので、&lt;strong&gt;特定の場所にSQL fileを配置するだけで、それらを実行した結果をBigQueryにimportできる&lt;/strong&gt;ようにした.&lt;/p&gt;

&lt;h1 id=&#34;import-query-result-to-bigquery:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Import Query Result to BigQuery&lt;/h1&gt;

&lt;h2 id=&#34;how:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;How&lt;/h2&gt;

&lt;p&gt;始めはGoでScriptを書いていたが、ふとEmbulkが使えないかと思って調べてみると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MySQLのInput pluginとBigQueryのOutput pluginは当然ある.&lt;/li&gt;
&lt;li&gt;MySQLのInput pluginで任意のQueryが実行できる.&lt;/li&gt;
&lt;li&gt;Queryの実行結果に対応するSchemaからBigQueryのSchemaを生成できると良かったが (別でPlugin書けばできそう) 、今回はSQL fileと別に &lt;code&gt;.schema.json&lt;/code&gt; でBigQueryのSchemaを用意することにする.&lt;/li&gt;
&lt;li&gt;Configulation fileのExtensionを &lt;code&gt;liquid&lt;/code&gt; にすると&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Liquid Template Engine&lt;/a&gt;が使用できる.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; によって外部から値を差し込むことが可能.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だったので、Scriptの中で特定の場所にあるSQL fileをとってきて、その情報で &lt;code&gt;env&lt;/code&gt; を差し替えることにより、QueryそれぞれでConfigulation fileを作成する必要がなく、Embulkで上の目標が達成できそうだったので、Embulkを採用することにした.&lt;/p&gt;

&lt;h2 id=&#34;do-it:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Do it&lt;/h2&gt;

&lt;p&gt;Embulkはinstall済みだとして、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ embulk gem install embulk-input-mysql
$ embulk gem install embulk-output-bigquery
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、今回必要なPluginsをinstallする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;in:
  type: mysql
  host: {{ env.mysql_host }}
  user: {{ env.mysql_user }}
  {% if env.mysql_password %}
  password: {{ env.mysql_password }}
  {% endif %}
  database:  {{ env.mysql_database }}
  query: {{ env.query }}
out:
  type: bigquery
  file_ext: csv
  auth_method: private_key
  service_account_email: {{ env.service_account_email }}
  p12_keyfile: {{ env.p12_keyfile }}
  path_prefix: /tmp/import_query_result_to_bq/
  file_ext: csv
  delete_from_local_when_job_end: 1
  project: your_project
  dataset: {{ env.dataset }}
  table: {{ env.table }}_%Y%m%d
  source_format: CSV
  formatter:
    type: csv
    header_line: false
  schema_file: {{ env.schema_file }}
  auto_create_table: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;Liquid Template Engine&lt;/code&gt; を使用し &lt;code&gt;env&lt;/code&gt; で設定可能な &lt;code&gt;config.yml.liquid&lt;/code&gt; を用意し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

QUERY_DIR=query
DATASET=tmp

export service_account_email=example@developer.gserviceaccount.com
export p12_keyfile=/path/to/p12_keyfile.p12

export mysql_host=localhost
export mysql_user=root
export mysql_password=password
export mysql_database=your_database
export dataset=$DATASET

for file in $QUERY_DIR/*.sql; do
  export query=`cat $file`
  filename=${file##*/}
  basename=${filename%.*}
  dir=$(cd $(dirname $file) &amp;amp;&amp;amp; pwd)
  export table=$basename
  export schema_file=$dir/$basename.schema.json
  embulk run config.yml.liquid
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなScriptを &lt;code&gt;import_query_result_to_bigquery&lt;/code&gt; として用意し実行権限をつけ、 &lt;code&gt;QUERY_DIR&lt;/code&gt; に設定したDirectoryに、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT id FROM users WHENE is_admin = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;admin_users.sql&lt;/code&gt; として、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  { &amp;quot;name&amp;quot;: &amp;quot;id&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;STRING&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;admin_users.schema.json&lt;/code&gt; として配置し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ./import_query_result_to_bigquery
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると、 &lt;code&gt;admin_users.sql&lt;/code&gt; のQueryの実行結果を &lt;code&gt;DATASET&lt;/code&gt; で設定したBigQueryのDatasetにTable名 &lt;code&gt;admin_users_20160114&lt;/code&gt; (PrefixはSQL file名で、Suffixは年月日) としてimportできる.&lt;/p&gt;

&lt;h2 id=&#34;operation:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Operation&lt;/h2&gt;

&lt;h3 id=&#34;query-files:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Query files&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;*.sql&lt;/code&gt; と &lt;code&gt;*.schema.json&lt;/code&gt; は専用のGitHubのRepositioryを作成して、そこに集約し、Scriptの実行前に &lt;code&gt;QUERY_DIR&lt;/code&gt; で指定したDirectoryに展開する.&lt;/p&gt;

&lt;p&gt;これによって、新しくQueryを追加する際に、&lt;strong&gt;GitHub上で完結&lt;/strong&gt;できる.&lt;/p&gt;

&lt;h3 id=&#34;query-in-bigquery:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;Query in BigQuery&lt;/h3&gt;

&lt;p&gt;cronなどでDailyのJobとして実行するとして、Table名のSuffixとして &lt;code&gt;_%Y%m%d&lt;/code&gt; がついているので、BigQuery上では &lt;code&gt;TABLE_DATE_RANGE&lt;/code&gt; を使用して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM TABLE_DATE_RANGE(tmp.admin_users_, DATE_ADD(CURRENT_TIMESTAMP(), -1, &#39;DAY&#39;), CURRENT_TIMESTAMP());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにすると、当日のTableを対象としてQueryを実行できる.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;EmbulkのPlugin機構と &lt;code&gt;Liquid Template Engine&lt;/code&gt; のおかげで簡単なScriptで業務が改善した.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;see-also:139eb9a18c43f6f61ff0332b901ae2a9&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk&#34;&gt;Embulk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk-input-jdbc/tree/master/embulk-input-mysql&#34;&gt;embulk-input-mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/embulk/embulk-output-bigquery&#34;&gt;embulk-output-bigquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://liquidmarkup.org/&#34;&gt;Liquid Template Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Theme of Material-UI</title>
      <link>https://blog.rudolph-miller.com/2016/01/11/theme-of-material-ui/</link>
      <pubDate>Mon, 11 Jan 2016 21:15:39 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/11/theme-of-material-ui/</guid>
      <description>

&lt;p&gt;Material-UIのThemeの使い方を紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#material-ui:2974f27f4339877b24e592c5128f86c3&#34;&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#theme:2974f27f4339877b24e592c5128f86c3&#34;&gt;Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:2974f27f4339877b24e592c5128f86c3&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;material-ui:2974f27f4339877b24e592c5128f86c3&#34;&gt;Material-UI&lt;/h1&gt;

&lt;p&gt;Material-UIとMaterial Designについては&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/&#34;&gt;前回&lt;/a&gt;の記事を参照.&lt;/p&gt;

&lt;h1 id=&#34;theme:2974f27f4339877b24e592c5128f86c3&#34;&gt;Theme&lt;/h1&gt;

&lt;p&gt;Material Designでは色をPrimary color paletteとSecondary color (Accent color) paletteに限定することにより、
直感的で統一感のあるDesignを作り出している.&lt;/p&gt;

&lt;p&gt;Material-UIではこれをThemeとして管理する.&lt;/p&gt;

&lt;h2 id=&#34;color:2974f27f4339877b24e592c5128f86c3&#34;&gt;Color&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/&#34;&gt;前回&lt;/a&gt;の記事の&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/#example:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Example&lt;/a&gt;にThemeを適用し、Colorを変更する.&lt;/p&gt;

&lt;p&gt;Colorの指定は&lt;a href=&#34;https://www.google.com/design/spec/style/color.html#color-color-palette&#34;&gt;Color palette&lt;/a&gt;とMaterial-UIの&lt;a href=&#34;http://www.material-ui.com/#/customization/colors&#34;&gt;customization/colors&lt;/a&gt;を参照.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import ThemeManager from &#39;material-ui/lib/styles/theme-manager&#39;;
import ThemeDecorator from &#39;material-ui/lib/styles/theme-decorator&#39;;
import Colors from &#39;material-ui/lib/styles/colors&#39;;
import ColorManipulator from &#39;material-ui/lib/utils/color-manipulator&#39;;
import LightRawTheme from &#39;material-ui/lib/styles/raw-themes/light-raw-theme&#39;;

export default ThemeManager.modifyRawThemePalette(
  ThemeManager.getMuiTheme(LightRawTheme),
  {
    primary1Color: Colors.cyan500,
    primary2Color: Colors.cyan700,
    primary3Color: Colors.lightBlack,
    accent1Color: Colors.green400,
    accent2Color: Colors.grey100,
    accent3Color: Colors.grey500,
    textColor: Colors.blueGrey800,
    alternateTextColor: Colors.white,
    canvasColor: Colors.white,
    borderColor: Colors.grey300,
    disabledColor: ColorManipulator.fade(Colors.darkBlack, 0.3),
    pickerHeaderColor: Colors.cyan500
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を &lt;code&gt;theme.js&lt;/code&gt; に書き込み、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import { render } from &#39;react-dom&#39;;
 import React, { Component, PropTypes } from &#39;react&#39;;
 import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
 injectTapEventPlugin();
 
 import {
   Avatar, Card, CardActions,
   CardHeader, CardMedia, CardTitle,
-  RaisedButton, FlatButton, CardText
+  RaisedButton, FlatButton, CardText,
+  ThemeWrapper
 } from &#39;material-ui&#39;;
+import ThemeDecorator from &#39;material-ui/lib/styles/theme-decorator&#39;;

+import Theme from &#39;./theme&#39;;
 
+@ThemeDecorator(Theme)
 class App extends Component {
 ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@ThemeDecorator&lt;/code&gt; で適用する.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160111/theme-applied.png&#34; alt=&#34;/20160111/theme-applied.png&#34;&gt;


&lt;p&gt;簡単にColorなどを変更できるが、Themeとして管理することにより、統一感が崩れない.&lt;/p&gt;

&lt;h2 id=&#34;font-family:2974f27f4339877b24e592c5128f86c3&#34;&gt;Font Family&lt;/h2&gt;

&lt;p&gt;Material-UIのdefaultの &lt;code&gt;font-family&lt;/code&gt; は &lt;code&gt;&#39;Roboto&#39;, sans-serif&lt;/code&gt; だが、日本語などの &lt;code&gt;Roboto&lt;/code&gt; でカバーされていない言語の場合 &lt;code&gt;Noto&lt;/code&gt; を使用したい.&lt;br /&gt;
(Material Designの&lt;a href=&#34;https://www.google.com/design/spec/style/typography.html#typography-typeface&#34;&gt;Typography&lt;/a&gt;参考.)&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;Noto Sans JP&lt;/code&gt; を使用するため、あらかじめHTMLに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&#39;http://fonts.googleapis.com/earlyaccess/notosansjp.css&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を差し込む.&lt;/p&gt;

&lt;p&gt;あとは上記の &lt;code&gt;theme.js&lt;/code&gt; で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; export default ThemeManager.modifyRawThemePalette(
-  ThemeManager.getMuiTheme(LightRawTheme),
+  ThemeManager.modifyRawThemeFontFamily(
+    ThemeManager.getMuiTheme(LightRawTheme),
+    &amp;quot;&#39;Roboto&#39;, &#39;Noto Sans JP&#39;, sans-serif&amp;quot;
+  ),
   {
     primary1Color: Colors.cyan500,
     primary2Color: Colors.cyan700,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;ThemeManager.modifyRawThemeFontFamily&lt;/code&gt; で &lt;code&gt;font-family&lt;/code&gt; を変更する.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160111/font-family-not-changed.png&#34; alt=&#34;/20160111/font-family-not-changed.png&#34;&gt;


&lt;img src=&#34;https://blog.rudolph-miller.com/images//20160111/font-family-changed.png&#34; alt=&#34;/20160111/font-family-changed.png&#34;&gt;


&lt;h1 id=&#34;see-also:2974f27f4339877b24e592c5128f86c3&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/04/material-ui/&#34;&gt;Material-UIの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/style/color.html#color-color-palette&#34;&gt;Color palette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.material-ui.com/#/customization/colors&#34;&gt;Material-UI customization/colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/style/typography.html#typography-typeface&#34;&gt;Typography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Material-UI</title>
      <link>https://blog.rudolph-miller.com/2016/01/04/material-ui/</link>
      <pubDate>Mon, 04 Jan 2016 20:54:36 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2016/01/04/material-ui/</guid>
      <description>

&lt;p&gt;Material-UIの紹介.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#material-design:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#material-ui:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:685cc0a50b9186931af118d17b9d18fd&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;material-design:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material Design&lt;/h1&gt;

&lt;p&gt;Material DesignはGoogleが開発しているDesign Guidelineで&lt;strong&gt;一貫性と実世界と同じ挙動でユーザーの負担を軽くする&lt;/strong&gt;ことが目標で、 &lt;strong&gt;マテリアル（素材）のある世界&lt;/strong&gt; が特徴.&lt;/p&gt;

&lt;p&gt;あらゆるdeviceを対象とした&lt;strong&gt;一貫性&lt;/strong&gt;と&lt;strong&gt;周りの世界と連続的で、同じ物理的性質や同じ動き&lt;/strong&gt;で、ユーザーがあらゆるdeviceであらゆるApplicationを、それぞれでの操作を学習する必要無く、自然に使えるようになる.&lt;/p&gt;

&lt;h1 id=&#34;material-ui:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Material-UI&lt;/h1&gt;

&lt;h2 id=&#34;about:685cc0a50b9186931af118d17b9d18fd&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/callemall/material-ui&#34;&gt;Material-UI&lt;/a&gt;はMaterial DesignのReact.js実装.&lt;/p&gt;

&lt;p&gt;ComponentとThemeで簡単にMaterial Designを試すことができる.&lt;br /&gt;
(Themeについては今回は触れず、&lt;a href=&#34;https://blog.rudolph-miller.com/2016/01/11/theme-of-material-ui/&#34;&gt;Theme of Material-ui&lt;/a&gt;で紹介.)&lt;/p&gt;

&lt;h2 id=&#34;install:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save material-ui
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;material-ui&lt;/code&gt; をinstallする.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zilverline/react-tap-event-plugin&#34;&gt;React-Tap-Event-Plugin&lt;/a&gt;を使用して、Tap eventをlistenしているので、これを有効にしないと一部のComponentが正常に動作しない.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save react-tap-event-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でinstallし、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
injectTapEventPlugin();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をApplicationで実行して有効化する.&lt;/p&gt;

&lt;p&gt;また、Material-UIは &lt;code&gt;Roboto&lt;/code&gt; フォントを使用しているので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link href=&#39;http://fonts.googleapis.com/css?family=Roboto&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をHTMLに差し込むなどして、 &lt;code&gt;Roboto&lt;/code&gt; フォントを有効にする.&lt;/p&gt;

&lt;h2 id=&#34;example:685cc0a50b9186931af118d17b9d18fd&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { render } from &#39;react-dom&#39;;
import React, { Component, PropTypes } from &#39;react&#39;;
import injectTapEventPlugin from &#39;react-tap-event-plugin&#39;;
injectTapEventPlugin();

import {
  Avatar, Card, CardActions,
  CardHeader, CardMedia, CardTitle,
  RaisedButton, FlatButton, CardText
} from &#39;material-ui&#39;;

class App extends Component {
  render() {
    return (
      &amp;lt;Card&amp;gt;
        &amp;lt;CardHeader
          title=&amp;quot;Title&amp;quot;
          subtitle=&amp;quot;Subtitle&amp;quot;
          avatar={&amp;lt;Avatar style={{color: &#39;red&#39;}}&amp;gt;A&amp;lt;/Avatar&amp;gt;}/&amp;gt;
        &amp;lt;CardHeader
          title=&amp;quot;Demo Url Based Avatar&amp;quot;
          subtitle=&amp;quot;Subtitle&amp;quot;
          avatar=&amp;quot;http://lorempixel.com/100/100/nature/&amp;quot;/&amp;gt;
        &amp;lt;CardMedia overlay={&amp;lt;CardTitle title=&amp;quot;Title&amp;quot; subtitle=&amp;quot;Subtitle&amp;quot;/&amp;gt;}&amp;gt;
          &amp;lt;img src=&amp;quot;http://lorempixel.com/600/337/nature/&amp;quot;/&amp;gt;
        &amp;lt;/CardMedia&amp;gt;
        &amp;lt;CardTitle title=&amp;quot;Title&amp;quot; subtitle=&amp;quot;Subtitle&amp;quot;/&amp;gt;
        &amp;lt;CardActions&amp;gt;
          &amp;lt;RaisedButton primary={true} label=&amp;quot;Action1&amp;quot;/&amp;gt;
          &amp;lt;FlatButton label=&amp;quot;Action2&amp;quot;/&amp;gt;
        &amp;lt;/CardActions&amp;gt;
        &amp;lt;CardText&amp;gt;
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          Donec mattis pretium massa. Aliquam erat volutpat. Nulla facilisi.
          Donec vulputate interdum sollicitudin. Nunc lacinia auctor quam sed pellentesque.
          Aliquam dui mauris, mattis quis lacus id, pellentesque lobortis odio.
        &amp;lt;/CardText&amp;gt;
      &amp;lt;/Card&amp;gt;
    );
  }
}

render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images/20160104/example.png&#34; alt=&#34;20160104/example.png&#34;&gt;


&lt;p&gt;こんな感じにComponentに &lt;code&gt;props&lt;/code&gt; を渡すだけ.&lt;/p&gt;

&lt;h1 id=&#34;see-also:685cc0a50b9186931af118d17b9d18fd&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/callemall/material-ui&#34;&gt;Material UI - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.material-ui.com/#/home&#34;&gt;Material UI - Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zilverline/react-tap-event-plugin&#34;&gt;react-tap-event-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/design/spec/material-design/introduction.html&#34;&gt;Materail Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>pushState in Redux Router</title>
      <link>https://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/</link>
      <pubDate>Fri, 25 Dec 2015 12:34:52 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/25/pushstate-in-redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; の使い方と、 React Reduxの&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; について、
&lt;code&gt;connect&lt;/code&gt; のSource codeを追いながら解説.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の25日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Redux Router&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;は&lt;a href=&#34;htpp://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;前回&lt;/a&gt;で紹介した通り、
React.jsでde facto standardとなっているRouting libraryの&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;h1 id=&#34;pushstate:5ffab360503358b5e43ebafcc74ab758&#34;&gt;pushState&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; はReact RouterでURLを遷移するAPIで、元はBrowserのHistory API.
Redux Routeの &lt;code&gt;pushState&lt;/code&gt; はこれをwrapしたもの.&lt;/p&gt;

&lt;h1 id=&#34;usage:5ffab360503358b5e43ebafcc74ab758&#34;&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/redux-router&#34;&gt;前回&lt;/a&gt;で使ったApplicationを用意する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
import createHistory from &#39;history/lib/createHashHistory&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  router: routerStateReducer,
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect(state =&amp;gt; {
  return {
    location: state.router.location
  }
})
class CounterButton extends Component {
  render() {
    const { dispatch } = this.props;

    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.location.pathname === &#39;/incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;ReduxRouter /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151225/without-push-state.gif&#34; alt=&#34;/20151225/without-push-state.gif&#34;&gt;


&lt;p&gt;これに &lt;code&gt;pushState&lt;/code&gt; で、 &lt;code&gt;/decr&lt;/code&gt; を1秒後に &lt;code&gt;/incr&lt;/code&gt; にredirectするという無駄な機能をつける.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter, pushState } from &#39;redux-router&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+@connect(null, { pushState })
class Decrement extends Component {
+  componentDidMount() {
+    const { pushState } = this.props;
+
+    setTimeout(() =&amp;gt; {
+      pushState(null, &#39;/incr&#39;);
+    }, 1000)
+  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151225/with-push-state.gif&#34; alt=&#34;/20151225/with-push-state.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;pushState&lt;/code&gt; をRedux Routerから &lt;code&gt;import&lt;/code&gt; し、 &lt;code&gt;pushState&lt;/code&gt; を &lt;code&gt;connect&lt;/code&gt; の第二引数に &lt;code&gt;{ pushState: pushState }&lt;/code&gt; の形で渡し、
&lt;code&gt;componentDidMount&lt;/code&gt; の中で &lt;code&gt;setTimeout&lt;/code&gt; を使って &lt;code&gt;this.props.pushState&lt;/code&gt; を呼んでいる.&lt;/p&gt;

&lt;p&gt;Redux Routerの &lt;code&gt;pushState&lt;/code&gt; は &lt;a href=&#34;https://github.com/acdlite/redux-router/blob/master/src/actionCreators.js#L56&#34;&gt;ここ&lt;/a&gt;で定義されていて、どうもAction creatorのようだ.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の第二引数って何だろう.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rackt/redux/&#34;&gt;Redux&lt;/a&gt;の&lt;a href=&#34;http://rackt.org/redux/index.html&#34;&gt;Tutorial&lt;/a&gt;の &lt;code&gt;connect&lt;/code&gt; の&lt;a href=&#34;http://rackt.org/redux/docs/basics/UsageWithReact.html&#34;&gt;解説&lt;/a&gt;にこう書いてある.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases you will only pass the first argument to connect(), which is a function we call a selector.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ほとんどの場合、第一引数しか使わないらしい.&lt;/p&gt;

&lt;p&gt;仕方ないので&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24&#34;&gt;Source code&lt;/a&gt;を読むと、 &lt;code&gt;mapDispatchToProps&lt;/code&gt; と呼ぶものらしい.&lt;/p&gt;

&lt;h1 id=&#34;mapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h1&gt;

&lt;p&gt;もう少し &lt;code&gt;mapDispatchToProps&lt;/code&gt; を追ってみる.&lt;/p&gt;

&lt;h2 id=&#34;connect:5ffab360503358b5e43ebafcc74ab758&#34;&gt;connect&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/components/connect.js#L24-L275&#34;&gt;ここ&lt;/a&gt;だが、簡単に言うと、4つの引数をとって、1つの引数をとる関数を返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default function connect(mapStateToProps, mapDispatchToProps, mergeProps, options = {}) {
  return function wrapWithConnect(WrappedComponent) {
    class Connect extends Component {
      render() {
        return createElement(WrappedComponent, this.mergeProps);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-1:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; なら &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされて、 &lt;code&gt;Object&lt;/code&gt; でないならそのままで、 &lt;code&gt;finalMapDispatchToProps&lt;/code&gt; に入る.
&lt;code&gt;mapDispatchToProps&lt;/code&gt; として何も渡さなかった場合は &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; がdefaultで入るようになっている. &lt;code&gt;defaultMapDispatchToProps&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて、 &lt;code&gt;dispatch&lt;/code&gt; を受け取り &lt;code&gt;{ dispatch: dispatch }&lt;/code&gt; として返している.&lt;/p&gt;

&lt;h2 id=&#34;wrapactioncreators:5ffab360503358b5e43ebafcc74ab758&#34;&gt;wrapActionCreators&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt; が &lt;code&gt;Object&lt;/code&gt; だったときは &lt;code&gt;wrapActionCreators&lt;/code&gt; でwrapされるが、 &lt;code&gt;wrapActionCreators&lt;/code&gt; の定義は&lt;a href=&#34;https://github.com/rackt/react-redux/blob/b35f8be00dae2af16a2b4eb12947ed616bc39279/src/utils/wrapActionCreators.js#L3&#34;&gt;ここ&lt;/a&gt;にあり、 Reduxの &lt;code&gt;bindActionCreators&lt;/code&gt; を呼んでいる.
&lt;code&gt;bindActionCreators&lt;/code&gt; は引数が &lt;code&gt;Object&lt;/code&gt; の時は、その &lt;code&gt;values&lt;/code&gt; にたいして &lt;code&gt;bindActionCreator&lt;/code&gt; を &lt;code&gt;map&lt;/code&gt; している. &lt;code&gt;bindActionCreator&lt;/code&gt; の定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function bindActionCreator(actionCreator, dispatch) {
  return (...args) =&amp;gt; dispatch(actionCreator(...args));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;actionCreator&lt;/code&gt;を与えられた引数で呼んで、 &lt;code&gt;dispatch&lt;/code&gt; する関数を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmapdispatchtoprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMapDispatchToProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMapDispatchToProps&lt;/code&gt; は &lt;code&gt;computeDispatchProps&lt;/code&gt; の中で &lt;code&gt;dispatch&lt;/code&gt; を引数として呼ばれており、その返り値が &lt;code&gt;Connect#updateDispatchPropsIfNeeded&lt;/code&gt; の中で &lt;code&gt;this.dispatchProps&lt;/code&gt; に入る. この &lt;code&gt;this.dispatchProps&lt;/code&gt; は &lt;code&gt;Connect#updateMergedProps&lt;/code&gt; で &lt;code&gt;computeMergedProps&lt;/code&gt; を通して &lt;code&gt;this.mergedProps&lt;/code&gt; に入る.&lt;/p&gt;

&lt;h2 id=&#34;computemergedprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;computeMergedProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;computeMergedProps&lt;/code&gt; は &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、 &lt;code&gt;finalMergeProps&lt;/code&gt; にそれらを渡し、その返り値を返している.&lt;/p&gt;

&lt;h2 id=&#34;finalmergeprops:5ffab360503358b5e43ebafcc74ab758&#34;&gt;finalMergeProps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;finalMergeProps&lt;/code&gt; は &lt;code&gt;connect&lt;/code&gt; の第三引数である &lt;code&gt;mergeProps&lt;/code&gt; が入っている. &lt;code&gt;connect&lt;/code&gt; に第三引数が指定されていない場合は &lt;code&gt;defaultMergeProps&lt;/code&gt; が入り、その定義は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMergeProps = (stateProps, dispatchProps, parentProps) =&amp;gt; ({
  ...parentProps,
  ...stateProps,
  ...dispatchProps
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、 &lt;code&gt;stateProps&lt;/code&gt;, &lt;code&gt;dispatchProps&lt;/code&gt; と &lt;code&gt;parentProps&lt;/code&gt; を受け取り、それらをexpandしてまとめて返している.
&lt;code&gt;Connect#updateMergedProps&lt;/code&gt; でこれが &lt;code&gt;this.mergedProps&lt;/code&gt; に入り、最終的に &lt;code&gt;connect&lt;/code&gt; の返す関数の引数として渡される &lt;code&gt;WrappedComponent&lt;/code&gt; に &lt;code&gt;createElement&lt;/code&gt; で渡される.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(WrappedComponent, this.mergedProps); 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mapdispatchtoprops-again:5ffab360503358b5e43ebafcc74ab758&#34;&gt;mapDispatchToProps again&lt;/h2&gt;

&lt;p&gt;結局 &lt;code&gt;mapDispatchToProps&lt;/code&gt; は何だったかと言うと、 &lt;code&gt;dispatch&lt;/code&gt; を &lt;code&gt;createElement&lt;/code&gt; にどのように渡すかを定義する引数だった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;@connect(null, { pushState })
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;createElement(Decrement, { pushState: (...args) =&amp;gt; { dispatch(pushState(..args)); } });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となって、 &lt;code&gt;class Decrement&lt;/code&gt; の中で &lt;code&gt;this.props.pushState&lt;/code&gt; が使えるようになる.&lt;/p&gt;

&lt;p&gt;さらに &lt;code&gt;mapDispatchToProps&lt;/code&gt; のdefaultが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defaultMapDispatchToProps = dispatch =&amp;gt; ({ dispatch });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;であったように、 &lt;code&gt;dispatch&lt;/code&gt; 自体もmappingしないと &lt;code&gt;this.props.dispatch&lt;/code&gt; は使えないので &lt;code&gt;this.props.dispatch&lt;/code&gt; が必要な際は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;functiton mapDispatchToProps(dispatch) {
  return {
    dispatch,
    pushState: bindActionCreators(pushState, dispatch)
  };
}
@connect(null, mapDispatchToProps)
class Decrement extends Component {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、 &lt;code&gt;dispatch&lt;/code&gt; もmappingするような関数 ( &lt;code&gt;mapDispatchToProps&lt;/code&gt; ) を作り、 &lt;code&gt;connect&lt;/code&gt; の第二引数として渡す.&lt;/p&gt;

&lt;p&gt;このように &lt;code&gt;dispatch&lt;/code&gt; を内部で呼び出すAPI作る際は、&lt;code&gt;connect&lt;/code&gt; の &lt;code&gt;mapDispatchToProps&lt;/code&gt; を経由して、 &lt;code&gt;this.props&lt;/code&gt; に組み込まれるよう作る.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5ffab360503358b5e43ebafcc74ab758&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/12/23/redux-router/&#34;&gt;Redux Routerの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Router</title>
      <link>https://blog.rudolph-miller.com/2015/12/23/redux-router/</link>
      <pubDate>Wed, 23 Dec 2015 00:01:34 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/23/redux-router/</guid>
      <description>

&lt;p&gt;Redux Routerの紹介.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の23日目の記事.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;でRedux Routerの記事を見かけた気がするが、他所は気にしない.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h1&gt;

&lt;h2 id=&#34;about:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;はReact.jsでde facto standardとなっているRouting libraryの
&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;の&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt; bindings.&lt;/p&gt;

&lt;p&gt;React RouterのRedux bindingsはReact RounterもReduxも抱えているOrganizationの&lt;a href=&#34;https://github.com/rackt&#34;&gt;rackt&lt;/a&gt;が作っている
&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;もあるが、Redux Routerの方が現時点でGitHubのStar数は多い.
(名前の通り、redux-simple-routerの方がよりsimpleで、Redux Routerはfatでcomplexだが機能は多い.)&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151222/rackt.gif&#34; alt=&#34;/20151222/rackt.gif&#34;&gt;


&lt;p&gt;これは&lt;a href=&#34;http://rackt.org/&#34;&gt;rackt.org&lt;/a&gt;. サイトではもっと綺麗にうねうねしてる.&lt;/p&gt;

&lt;h2 id=&#34;why:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;ReduxはStateの管理を容易に (一様に) するが、単体でReact Routerを使用すると、
Application上の重要なStateであるURLがReduxでの管理からはずれてしまう.&lt;br /&gt;
Redux RouterによりURLのStateもReduxで管理できる.&lt;/p&gt;

&lt;h2 id=&#34;usage:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;とりあえずReduxでApplicationを作って、そこにReact Routerを導入、最後にRedux Routerを導入する手順で紹介する.&lt;/p&gt;

&lt;h3 id=&#34;redux:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React, { Component } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { dispatch, counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(incrCounter()); }}&amp;gt;
          INCREMENT
        &amp;lt;/button&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; { dispatch(decrCounter()); }}&amp;gt;
          DECREMENT
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;App /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151222/initial-impl.gif&#34; alt=&#34;/20151222/initial-impl.gif&#34;&gt;


&lt;p&gt;&lt;code&gt;@connect&lt;/code&gt; して &lt;code&gt;state.counter&lt;/code&gt; を表示し、その &lt;code&gt;state.counter&lt;/code&gt; を増減させるボタンがあるだけのApplicationで、とくに解説することはない.&lt;/p&gt;

&lt;h3 id=&#34;react-router:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;React Router&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mport React, { Component, PropTypes } from &#39;react&#39;;
import { render } from &#39;react-dom&#39;;
import { combineReducers, createStore } from &#39;redux&#39;;
import { connect, Provider } from &#39;react-redux&#39;;
import { createAction, handleActions } from &#39;redux-actions&#39;;
import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;

const INCR_COUNTER = &#39;INCR_COUNTER&#39;;
const incrCounter = createAction(INCR_COUNTER);
const DECR_COUNTER = &#39;DECR_COUNTER&#39;;
const decrCounter = createAction(DECR_COUNTER);

const handleCounter = handleActions({
  INCR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter + 1;
  },
  DECR_COUNTER: (counter = 0, action) =&amp;gt; {
    return counter - 1;
  }
}, 0);

const reducer = combineReducers({
  counter: handleCounter
});

@connect(state =&amp;gt; {
  return {
    counter: state.counter
  };
})
class App extends Component {
  render() {
    const { counter } = this.props;
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;{`COUNTER: ${counter}`}&amp;lt;/p&amp;gt;
        {this.props.children}
      &amp;lt;/div&amp;gt;
    );
  }
}

@connect()
class CounterButton extends Component {
  static propTypes = {
    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
  }

  render() {
    const { dispatch } = this.props;
    return (
      &amp;lt;button
        onClick={() =&amp;gt; {
          if(this.props.type === &#39;incr&#39;) {
            dispatch(incrCounter());
          } else {
            dispatch(decrCounter());
          }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}

class Increment extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
          TO DECREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

class Decrement extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
        &amp;lt;Link to=&#39;/&#39;&amp;gt;
          TO INCREMENT
        &amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

const routes = (
  &amp;lt;Route&amp;gt;
    &amp;lt;Redirect from=&amp;quot;/&amp;quot; to=&amp;quot;incr&amp;quot; /&amp;gt;
    &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}&amp;gt;
      &amp;lt;Route path=&amp;quot;incr&amp;quot; component={Increment} /&amp;gt;
      &amp;lt;Route path=&amp;quot;decr&amp;quot; component={Decrement} /&amp;gt;
    &amp;lt;/Route&amp;gt;
  &amp;lt;/Route&amp;gt;
);

const store = createStore(reducer);

class Root extends Component {
  render() {
    return (
      &amp;lt;Provider store={store}&amp;gt;
        &amp;lt;Router routes={routes} /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}

render(&amp;lt;Root /&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151222/second-impl.gif&#34; alt=&#34;/20151222/second-impl.gif&#34;&gt;


&lt;p&gt;React Routerを導入して &lt;code&gt;Increment&lt;/code&gt; と &lt;code&gt;Decrement&lt;/code&gt; をRoutingで分けただけ.&lt;br /&gt;
共通で &lt;code&gt;CounterButton&lt;/code&gt; をrenderしていて、 &lt;code&gt;this.props.type&lt;/code&gt; でボタンがクリックされた時に、
&lt;code&gt;incrCounter()&lt;/code&gt; か &lt;code&gt;decrCounter()&lt;/code&gt; のどちらを &lt;code&gt;dispatch&lt;/code&gt; するか分岐している.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.props.type&lt;/code&gt; ではなく、&lt;strong&gt;URLというApplicationが持つState&lt;/strong&gt;で分岐させたいとする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; @connect()
 class CounterButton extends Component {
-  static propTypes = {
-    type: PropTypes.oneOf([&#39;incr&#39;, &#39;decr&#39;]).isRequired
+  static contextTypes = {
+    location: React.PropTypes.object.isRequired
   }
 
   render() {
     const { dispatch } = this.props;
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.props.type === &#39;incr&#39;) {
+          if(this.context.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
        }} &amp;gt;
        {this.props.children}
      &amp;lt;/button&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Increment extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;incr&#39;&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;INCREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/decr&#39;&amp;gt;
           TO DECREMENT
         &amp;lt;/Link&amp;gt;
       &amp;lt;/div&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Decrement extends Component {
   render() {
     return (
       &amp;lt;div&amp;gt;
-        &amp;lt;CounterButton type=&#39;decr&#39;&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
+        &amp;lt;CounterButton&amp;gt;DECREMENT&amp;lt;/CounterButton&amp;gt;
         &amp;lt;Link to=&#39;/&#39;&amp;gt;
           TO INCREMENT
         &amp;lt;/Link&amp;gt;
       &amp;lt;/div&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;static contextTypes&lt;/code&gt; を定義して、 &lt;code&gt;this.context.location&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application全体のState&lt;/strong&gt;の管理に一貫性がなくなった.&lt;/p&gt;

&lt;h3 id=&#34;redux-router-1:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;Redux Router&lt;/h3&gt;

&lt;p&gt;一貫性を取り戻すためにRedux Routerを導入する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import { Router, IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { IndexRoute, Route, Redirect, Link } from &#39;react-router&#39;;
+import { reduxReactRouter, routerStateReducer, ReduxRouter } from &#39;redux-router&#39;;
+import createHistory from &#39;history/lib/createHashHistory&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; const reducer = combineReducers({
+  router: routerStateReducer,
   counter: handleCounter
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-@connect()
+@connect(state =&amp;gt; {
+  return {
+    location: state.router.location
+  }
+})
class CounterButton extends Component {
-  static contextTypes = {
-    location: React.PropTypes.object.isRequired
-  }

   render() {
     const { dispatch } = this.props;
 
     return (
       &amp;lt;button
         onClick={() =&amp;gt; {
-          if(this.context.location.pathname === &#39;/incr&#39;) {
+          if(this.props.location.pathname === &#39;/incr&#39;) {
             dispatch(incrCounter());
           } else {
             dispatch(decrCounter());
					 }
         }} &amp;gt;
         {this.props.children}
       &amp;lt;/button&amp;gt;
     );
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-const store = createStore(reducer);
+const store = reduxReactRouter({routes, createHistory})(createStore)(reducer);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class Root extends Component {
   render() {
     return (
       &amp;lt;Provider store={store}&amp;gt;
-        &amp;lt;Router routes={routes} /&amp;gt;
+        &amp;lt;ReduxRouter /&amp;gt;
       &amp;lt;/Provider&amp;gt;
     );
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上から順に解説する.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;色々 &lt;code&gt;import&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combineReducers&lt;/code&gt; で &lt;code&gt;router:&lt;/code&gt; を &lt;code&gt;routerStateReducer&lt;/code&gt; がhandleするようset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; を &lt;code&gt;this.props.location&lt;/code&gt; とできるよう、 &lt;code&gt;@connect&lt;/code&gt; で &lt;code&gt;location:&lt;/code&gt; に &lt;code&gt;state.router.location&lt;/code&gt; をset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this.context.location&lt;/code&gt; の代わりに &lt;code&gt;this.props.location&lt;/code&gt; を使用.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; でwrapして、 &lt;code&gt;router&lt;/code&gt; のStateを &lt;code&gt;store&lt;/code&gt; で管理するようにする.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createBrowserHistory&lt;/code&gt; を使用して、 &lt;code&gt;&amp;lt;Router history={history} /&amp;gt;&lt;/code&gt; をしていた場合は、 &lt;code&gt;createBrowserHistory&lt;/code&gt; を &lt;code&gt;reduxReactRouter&lt;/code&gt; の第二引数に渡す.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ReduxRouter history={history} /&amp;gt;&lt;/code&gt; とはしない.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Router routes={routes} /&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;ReduxRouter /&amp;gt;&lt;/code&gt; で置き換える.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでReduxでURLのStateも &lt;code&gt;router&lt;/code&gt; として管理できるようになった.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;秩序を取り戻した. ╭( ･ㅂ･)و&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;see-also:bd1ab92ea0c3f9d4bc1d40d26147e922&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-router&#34;&gt;Redux Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-router&#34;&gt;React Router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux-simple-router&#34;&gt;redux-simple-router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redux Fetch Action</title>
      <link>https://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</link>
      <pubDate>Tue, 15 Dec 2015 12:53:17 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/15/redux-fetch-action/</guid>
      <description>

&lt;p&gt;Redux Fetch ActionというReduxのFetch actionのutilityを作った.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の15日目の記事.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;redux-fetch-action:204c7e295a840c149fff4b9b8d704763&#34;&gt;Redux Fetch Action&lt;/h1&gt;

&lt;h2 id=&#34;why:204c7e295a840c149fff4b9b8d704763&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;最近&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;を使っているが、DataのFetchが似たようなAction creatorとReducerのpatternになったので、
切り出してpublishした. (&lt;code&gt;POST&lt;/code&gt; もFetchかよって違和感はある.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FluxのActionには&lt;a href=&#34;https://github.com/acdlite/flux-standard-action&#34;&gt;非公式のCoding規約&lt;/a&gt;があるらしく、
それに則るため&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;をbaseとしている.&lt;/p&gt;

&lt;h2 id=&#34;api:204c7e295a840c149fff4b9b8d704763&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;APIは &lt;code&gt;createFetchAction&lt;/code&gt; と &lt;code&gt;handleFetchAction&lt;/code&gt; がある.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createFetchAction&lt;/code&gt; はAction creatorを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FETCH_DATA = &#39;FETCH_DATA&#39;;
const fetchAction = createFetchAction(FETCH_DATA, &#39;/data.json&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleFetchAction&lt;/code&gt; はReducerを返す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
const reducer = handleFetchAction(FETCH_DATA, {
  request: (state = {}, action) =&amp;gt; {
    return state;
  },
  receive: (state = {}, action) =&amp;gt; {
    return action.payload;
  },
  error: (satet = {}, action) =&amp;gt; {
    return state;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使用する.&lt;/p&gt;

&lt;h2 id=&#34;example:204c7e295a840c149fff4b9b8d704763&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;二つのAPIを合わせ、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;;
import thunk from &#39;redux-thunk&#39;;
import { handleActions } from &#39;redux-actions&#39;;
import { createFetchAction, handleFetchAction } from &#39;redux-fetch-action&#39;;
import { Server }from &#39;node-static&#39;;
import { createServer } from &#39;http&#39;;

const file = new Server();
createServer((request, response)  =&amp;gt; {
  request.addListener(&#39;end&#39;, () =&amp;gt; {
    file.serve(request, response);
  }).resume();
}).listen(8080);

const FETCH1 = &#39;FETCH1&#39;;
const FETCH2 = &#39;FETCH2&#39;;
const FETCH3 = &#39;FETCH3&#39;;

const reducer1 = handleFetchAction(FETCH1, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 1&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 1&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 1&#39;);
    return posts;
  }
});

const reducer2 = handleFetchAction(FETCH2, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 2&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 2&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 2&#39;);
    return posts;
  }
});

const reducer3 = handleFetchAction(FETCH3, {
  request: (posts = [], action) =&amp;gt; {
    console.log(&#39;REQUEST 3&#39;);
    return posts;
  },
  receive: (posts = [], action) =&amp;gt; {
    console.log(&#39;RECEIVED 3&#39;);
    console.log(action.payload);
    return action.payload.posts;
  },
  error: (posts = [], action) =&amp;gt; {
    console.log(&#39;ERROR 3&#39;);
    return posts;
  }
});

const reducer = handleActions({
  FETCH1: reducer1,
  FETCH2: reducer2,
  FETCH3: reducer3
}, {});

const store = applyMiddleware(
  thunk
)(createStore)(reducer);

const fetchAction1 = createFetchAction(FETCH1, &#39;http://localhost:8080/data.json&#39;);
const fetchAction2 = createFetchAction(FETCH2, &#39;http://localhost:8080/sample.html&#39;);
const fetchAction3 = createFetchAction(FETCH3, &#39;http://localhost:8080/unknown.json&#39;);

store.dispatch(fetchAction1());
store.dispatch(fetchAction2());
store.dispatch(fetchAction3());

/*
REQUEST 1
REQUEST 2
REQUEST 3
ERROR 3
RECEIVED 1
{ posts:
   [ { id: 1, text: &#39;Sample text 1&#39; },
     { id: 2, text: &#39;Sample text 2&#39; } ] }
RECEIVED 2
&amp;lt;div&amp;gt;
  sample
&amp;lt;/div&amp;gt;
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようにFetchのhandleができる.&lt;/p&gt;

&lt;h1 id=&#34;see-also:204c7e295a840c149fff4b9b8d704763&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/redux-fetch-action&#34;&gt;Redux Fetch Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/acdlite/redux-actions&#34;&gt;redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasuhiro-okada-aktsk/items/a14f7f37262fb6cf0bf8&#34;&gt;Redux: Actionのコーディング規約 と redux-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Bootstrap Star Rating</title>
      <link>https://blog.rudolph-miller.com/2015/12/13/react-bootstrap-star-rating/</link>
      <pubDate>Sun, 13 Dec 2015 23:00:37 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/13/react-bootstrap-star-rating/</guid>
      <description>

&lt;p&gt;React Bootstrap Star Ratingを作った.&lt;/p&gt;

&lt;p&gt;作ったので軽く紹介する.&lt;br /&gt;
GitHubは&lt;a href=&#34;https://github.com/Rudolph-Miller/react-bootstrap-star-rating&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-bootstrap-star-rating:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-bootstrap-star-rating:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;React Bootstrap Star Rating&lt;/h1&gt;

&lt;p&gt;作り始めた動機はあるプロジェクトでBowerでjQueryが使われており、
commitするにあたってそれらを殲滅しnpmとReactを導入しようと思ったが、
どうもReactには良い感じのStar rating libraryが無かったから.&lt;/p&gt;

&lt;h2 id=&#34;star-rating-in-react:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Star Rating in React&lt;/h2&gt;

&lt;p&gt;npmのdownload statsで一番だったのは&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;react-star-rating&lt;/a&gt; (939 downloads in the last month) で、
それ以外はほとんど使われていないようだった.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;react-star-rating&lt;/a&gt;はどうかというと、GitHubのcommitはa month agoで&lt;a href=&#34;http://cameronjroe.com/react-star-rating/&#34;&gt;Project page&lt;/a&gt;もあり、
ある程度は開発されていそうだったが、どうも件のProjectのowner曰くstyleがイケていないらしい.&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151213/react-star-rating.png&#34; alt=&#34;/20151213/react-star-rating.png&#34;&gt;


&lt;p&gt;ということで、件のProjectで使用していたjQuery pluginをReactでwrapして使うことした.
(&lt;a href=&#34;http://plugins.krajee.com/star-rating/demo&#34;&gt;DEMO&lt;/a&gt;をみる限り、色々customizableっぽい.)&lt;/p&gt;

&lt;img src=&#34;https://blog.rudolph-miller.com/images//20151213/bootstrap-star-rating.gif&#34; alt=&#34;/20151213/bootstrap-star-rating.gif&#34;&gt;


&lt;h2 id=&#34;wrap-jquery-plugin:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Wrap jQuery plugin&lt;/h2&gt;

&lt;p&gt;作ったといってもjQuery pluginをwrapしただけ (どうもnpmにpublishしていなかっただけで、package.jsonはあった.) なので、
wrapする際の常套patternを軽く紹介する.&lt;/p&gt;

&lt;h3 id=&#34;dom-node:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;DOM node&lt;/h3&gt;

&lt;p&gt;jQuery pluginなのでDOM nodeに対して操作を行う.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#rating&#39;).rating();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをReactで実装する際は &lt;code&gt;ref&lt;/code&gt; を使用する.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class StarRating extends Component {
  componentDidMount() {
    $node.rating();
  }

  render() {
    return (
      &amp;lt;input
        ref={node =&amp;gt; { this.$node = $(node); }} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-api:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Export API&lt;/h3&gt;

&lt;p&gt;今回の&lt;a href=&#34;https://www.npmjs.com/package/react-star-rating&#34;&gt;bootstrap-star-rating&lt;/a&gt;は強制にvalueをupdateするAPIがあった.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#rating&#39;).rating(&#39;update&#39;, 5);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをReactで実装する際は &lt;code&gt;method&lt;/code&gt; として定義して、 &lt;code&gt;ref&lt;/code&gt; を通して呼び出す.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class StarRating extends Component {
  componentDidMount() {
    $node.rating();
  }

  render() {
    return (
      &amp;lt;input
        ref={node =&amp;gt; { this.$node = $(node); }} /&amp;gt;
    );
  }

  update(value) {
    $node.rating(&#39;update&#39;, value);
  }
}

class App extends Component {
  componentDidMount() {
    setTimeout(() =&amp;gt; {
      this.starRating.update(5);
    }, 1000);
  }

  render() {
    return (
      &amp;lt;StarRating
        ref={ref =&amp;gt; { this.starRating = ref; }} /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;result:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;簡単にwrapして別のLibraryとして切り出しただけなのでjQueryを無くせたわけでは無いが、&lt;br /&gt;
直接の依存からはremoveできるようになったので心のざわつきは無くせたかな.&lt;/p&gt;

&lt;h1 id=&#34;see-also:159d3cf4b915f27af0ae75de76a3186a&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react-bootstrap-star-rating&#34;&gt;React Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plugins.krajee.com/star-rating&#34;&gt;Bootstrap Star Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kartik-v/bootstrap-star-rating&#34;&gt;bootstrap-star-rating&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>React Redux Rails</title>
      <link>https://blog.rudolph-miller.com/2015/12/11/react-redux-rails/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:06 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/12/11/react-redux-rails/</guid>
      <description>

&lt;p&gt;React.js &amp;amp; Redux &amp;amp; Ruby on Railsでserver-side rendering.&lt;/p&gt;

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/reactjs&#34;&gt;React.js Advent Calendar 2015&lt;/a&gt;の10日目の記事であり、&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2015/vdom-flux&#34;&gt;仮想DOM/Flux Advent Calendar 2015&lt;/a&gt;の10日目の記事です. (欲張り.)&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;react-redux-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React Redux Rails&lt;/h1&gt;

&lt;h2 id=&#34;react-js:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;React.js&lt;/h2&gt;

&lt;p&gt;React.jsはFacebook製のJavaScriptのUI Library.&lt;br /&gt;
Viewの状態管理をさぼれる.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/reactjs&#34;&gt;一人React.js Advent Calendar 2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;redux:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Redux&lt;/h2&gt;

&lt;p&gt;Reduxは今一番熱いFlux architecture frameworkで状態管理をatomitにする.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amagitakayosi.hatenablog.com/entry/2015/07/30/000000&#34;&gt;人気のFluxフレームワークReduxをさわってみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;react-rails:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;react-rails&lt;/h2&gt;

&lt;p&gt;Ruby on RailsにはReact.jsのserver-side renderingを容易にするGemがある.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, name: &#39;John&#39;) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにViewにReact.jsのComponentを埋め込むことができる.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react_component&lt;/code&gt; の3つ目の引数として &lt;code&gt;{prerender: true}&lt;/code&gt; を渡すだけで、server-side renderingができる.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;HelloMessage&#39;, {name: &#39;John&#39;}, {prerender: true}) %&amp;gt;
&amp;lt;!-- becomes: --&amp;gt;
&amp;lt;div data-react-class=&amp;quot;HelloMessage&amp;quot; data-react-props=&amp;quot;{&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;John&amp;amp;quot;}&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Hello, John!&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/joe-re/items/96f12dda4a62470d1d7c&#34;&gt;react-railsを使ってReactのTutorialをやってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;try:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;Try&lt;/h2&gt;

&lt;p&gt;これらを合わせて、Reduxで状態管理をして、ReactでComponentを組み立て、Ruby on Railsでserver-side renderingをしてみた.&lt;/p&gt;

&lt;p&gt;BaseのAppはReduxのBasic tutorialになっている&lt;a href=&#34;http://rackt.org/redux/docs/basics/ExampleTodoList.html&#34;&gt;tiny todo app&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;&amp;lt;%= react_component(&#39;Root&#39;, {presetTodos: @todos}, {prerender: true}) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/views/todos/index.html.erb#L1&#34;&gt;app/views/todos/index.html.erb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;とRuby on RailsのViewに埋め込むことにより、初回は server-side renderingで &lt;code&gt;@todos&lt;/code&gt; を &lt;code&gt;props&lt;/code&gt; に渡して &lt;code&gt;componentDidMount&lt;/code&gt; でDataをsetし、
それ以外で &lt;code&gt;Root&lt;/code&gt; をrenderした時は &lt;code&gt;componentDidMount&lt;/code&gt; でDataをfetchする.&lt;br /&gt;
(今回のExampleではこの遷移は実装していないが、 &lt;code&gt;{presetTodos: @todos}&lt;/code&gt; をはずぜばこの挙動となる.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;componentDidMount() {
	const { dispatch, presetTodos } = this.props;
	if (presetTodos) {
		dispatch(setTodos(presetTodos));
	} else {
		dispatch(fetchTodos());
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/containers/App.js#L38-L45&#34;&gt;app/assets/javascripts/containers/App.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;軽くポイントを掻い摘む.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScriptのLibrary管理はnpmでbrowserify-railsを使ってBabelでbuildした.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application.js&lt;/code&gt; は &lt;code&gt;//= require react_ujs&lt;/code&gt; と &lt;code&gt;//= require components&lt;/code&gt; のみ. (&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/c07553236da0464393fccf75ecb6a3d61f48b4e2/app/assets/javascripts/application.js#L1-L2&#34;&gt;app/assets/javascripts/application.js&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Babel 6だとDecorationが未supportだったため、Babel 5を使用した. (&lt;a href=&#34;http://phabricator.babeljs.io/T2645&#34;&gt;Implement new decorator proposal when finalized&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ReduxでAsync.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rackt.org/redux/docs/advanced/AsyncActions.html&#34;&gt;Async Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example/blob/ab95d682a10b91358f01bb431be2cdb397795cdd/app/assets/javascripts/actions/index.js#L34-L54&#34;&gt;app/assets/javascripts/actions/index.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくはSourceに.
質問があればTwitterで &lt;a href=&#34;https://twitter.com/Rudolph_Miller&#34;&gt;#Rudolph_Miller&lt;/a&gt; に聞いて下さい.&lt;/p&gt;

&lt;p&gt;意外とすんなり書け、すんなり動いたので、どこかで実戦投入したいと思う.&lt;/p&gt;

&lt;h1 id=&#34;see-also:982e6b4bd120a43daf7d20e0e817411f&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/react_rails_example&#34;&gt;React Rails Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/flux&#34;&gt;Flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/redux&#34;&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rackt/react-redux&#34;&gt;React Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserify-rails/browserify-rails&#34;&gt;browserify-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jonathan unescapes Unicode Escape Sequence</title>
      <link>https://blog.rudolph-miller.com/2015/11/16/jonathan-unescapes-unicode-escape-sequence/</link>
      <pubDate>Mon, 16 Nov 2015 15:33:08 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/11/16/jonathan-unescapes-unicode-escape-sequence/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;にUnicode Escape Sequenceをunescapeする機能を入れた.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#unicode-escape-sequence:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;Unicode Escape Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;unicode-escape-sequence:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;Unicode Escape Sequence&lt;/h1&gt;

&lt;p&gt;先日&lt;a href=&#34;http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/&#34;&gt;Daily Log in Slack&lt;/a&gt;で報告した&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo&#34;&gt;Slack Nippo&lt;/a&gt;を作っている時に、
SlackのAPIのResponseにUnicode Escape Sequenceがあり、&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;がこれをusescapeしていなかったことを知った.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hanshuebner.github.io/yason/&#34;&gt;YASON&lt;/a&gt;も&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;ももちろん対応しているので、
&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;にUnicode Escape Sequenceをunescapeする機能を入れた.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(jonathan:parse &amp;quot;\&amp;quot;\\u30b8\\u30e7\\u30ca\\u30b5\\u30f3\&amp;quot;&amp;quot;)
;; =&amp;gt; &amp;quot;ジョナサン&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろんSurrogate pairも対応している.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(jonathan:parse &amp;quot;\&amp;quot;\\uD840\\uDC0B\&amp;quot;&amp;quot;)
;; =&amp;gt; &amp;quot;𠀋&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;はSurrogate pairを投げると文字化けする.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(with-input-from-string (stream &amp;quot;\&amp;quot;\\uD840\\uDC0B\&amp;quot;&amp;quot;)
  (cl-json:decode-json stream))
;; =&amp;gt; &amp;quot;��&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不具合があれば&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan/issues&#34;&gt;Issues&lt;/a&gt;にreportもらえれば対応します.&lt;/p&gt;

&lt;h1 id=&#34;see-also:414e2a0fa0dc0ddadcfa66c7bce702e1&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/&#34;&gt;Daily Log in Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/jonathan&#34;&gt;Jonathan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hanshuebner.github.io/yason/&#34;&gt;YASON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/cl-json/&#34;&gt;CL-JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Daily Log in Slack</title>
      <link>https://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/</link>
      <pubDate>Sat, 14 Nov 2015 23:02:13 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/11/14/daily-log-in-slack/</guid>
      <description>

&lt;p&gt;Slackでの社内Twitterを日報にするToolを作っている.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#slackで社内twitter:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slackで社内Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#slack-nippo:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#see-also:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;slackで社内twitter:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slackで社内Twitter&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://c16e.com/1511101558&#34;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ 〜 Problemが10分で解決するチャットを作ろう&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先日こんな記事があり、Kaizen Platform社内Slackにも&lt;strong&gt;技術顧問の先導&lt;/strong&gt;により &lt;code&gt;#times_${username}&lt;/code&gt; channelが開設された.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.rudolph-miller.com/images/20151114/channel.png&#34; alt=&#34;channel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;やってみて感じたことと、これに関してのToolを作っているので報告する.&lt;/p&gt;

&lt;p&gt;毎日日報を&lt;a href=&#34;http://kobito.qiita.com/&#34;&gt;Kobito&lt;/a&gt;で書いて、&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿しているのだが、二つ不満があった.&lt;/p&gt;

&lt;p&gt;一つは、普段Vimを使っているので、別にApplicationとしてEditorを立ち上げたくないとこ.&lt;/p&gt;

&lt;p&gt;もう一つは、上の記事にも書かれていたが、&amp;rdquo;チームとしてのスピード感がでない&amp;rdquo;とこ.&lt;br /&gt;
ある程度の粒度の課題なら別で&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿するが、
小粒な課題や粒度の見えない課題を発見して、日報に書き、投稿後にコメントをもらったときには解決していたりする.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#times_${username]&lt;/code&gt; を始めてみると、余分にApplicationを立ち上げる必要がなく、
リアルタイムにコミュニケーションが発生し、いままでの日報の不満は解決された.&lt;/p&gt;

&lt;p&gt;それだけではなく、&lt;strong&gt;不思議としっくりくる感じ&lt;/strong&gt;があった.&lt;br /&gt;
考えてみるとこれは&lt;strong&gt;社内でのコミュニケーションに近い&lt;/strong&gt;のだ.&lt;/p&gt;

&lt;p&gt;席にいるかが一目で分かり、悩んでいると声をかけられ、話していると他の人が乱入してくる.&lt;br /&gt;
リモートワークを取り入れている会社にとって、&lt;strong&gt;この空気&lt;/strong&gt;を生み出せるのは重要だと思う.&lt;/p&gt;

&lt;p&gt;デメリットもある.
だたのチャットなので&lt;strong&gt;流れる&lt;/strong&gt;.
後で&lt;strong&gt;&amp;ldquo;あの時の課題はどうやって解決したっけ&amp;rdquo;&lt;/strong&gt;みたいなのがぱっとでてこない.&lt;/p&gt;

&lt;h1 id=&#34;slack-nippo:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;Slack Nippo&lt;/h1&gt;

&lt;p&gt;ということで、一日の終わりにこの &lt;code&gt;#times_${username}&lt;/code&gt; をまとめて日報とするToolを作っている.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.rudolph-miller.com/images/20151114/daily_log.png&#34; alt=&#34;daily log&#34; /&gt;&lt;/p&gt;

&lt;p&gt;タスク管理はTrelloを使用しており、そのログを &lt;code&gt;#times_${username}&lt;/code&gt; に流すようにした.&lt;br /&gt;
今はこのMarkdownを&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に投稿している.&lt;/p&gt;

&lt;p&gt;まだ実験段階なのでローカルで叩いてMarkdownを吐き出すだけだが、&lt;br /&gt;
フォーマットと機能がまとまってきたら、Serverとして起動して生成したMarkdownをSlackに投稿したり、
&lt;a href=&#34;https://teams.qiita.com/&#34;&gt;Qiita:Team&lt;/a&gt;に直接投稿できる機能をつける.&lt;/p&gt;

&lt;p&gt;Source codeは&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo/&#34;&gt;Slack Nippo - GitHub&lt;/a&gt;にある.&lt;br /&gt;
とりあえず日報をだしたかったので、かなり雑な部分があるのは認識している.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/api-gateway/&#34;&gt;Amazon API Gateway&lt;/a&gt;と&lt;a href=&#34;https://aws.amazon.com/jp/lambda/&#34;&gt;AWS Lambda&lt;/a&gt;でやろうと考えていたのだが、
気がつくと&lt;strong&gt;Common Lisp&lt;/strong&gt;を書いていた. 心地よかった.&lt;br /&gt;
Serverとして機能をつけたらDocker Imageも&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;に上げてローカルで簡単に立ち上げられるようにする.&lt;/p&gt;

&lt;h1 id=&#34;see-also:5f3f4d8b5bd1bfce40967a1c97e646f2&#34;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c16e.com/1511101558&#34;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ 〜 Problemが10分で解決するチャットを作ろう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Rudolph-Miller/slack-nippo/&#34;&gt;Slack Nippo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tech Talk About Lisp</title>
      <link>https://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/</link>
      <pubDate>Sun, 01 Nov 2015 22:38:10 +0900</pubDate>
      
      <guid>https://blog.rudolph-miller.com/2015/11/01/tech-talk-about-lisp/</guid>
      <description>&lt;p&gt;社内のTech Talk #4でLispについて発表した.&lt;/p&gt;

&lt;p&gt;LispやS-expressionについての軽い話をした.&lt;br /&gt;
LispとCommin Lispをごっちゃに扱っているのはワザと.&lt;br /&gt;
たぶんTalkがないとよくわからない部分が多いだろうけど公開しておく.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;77ce6ba2d6134d94a77e432f0246cd06&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>